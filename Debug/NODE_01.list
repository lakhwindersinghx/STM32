
NODE_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b51c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c58  0800b630  0800b630  0001b630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c288  0800c288  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c288  0800c288  0001c288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c290  0800c290  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c290  0800c290  0001c290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c294  0800c294  0001c294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  200001e4  0800c47c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a48  0800c47c  00020a48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011af0  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002909  00000000  00000000  00031d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  00034650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dcf  00000000  00000000  000357d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a14a  00000000  00000000  000365a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015371  00000000  00000000  000506f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093f74  00000000  00000000  00065a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060ec  00000000  00000000  000f99d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ffac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b614 	.word	0x0800b614

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800b614 	.word	0x0800b614

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gesf2>:
 8000b68:	f04f 3cff 	mov.w	ip, #4294967295
 8000b6c:	e006      	b.n	8000b7c <__cmpsf2+0x4>
 8000b6e:	bf00      	nop

08000b70 <__lesf2>:
 8000b70:	f04f 0c01 	mov.w	ip, #1
 8000b74:	e002      	b.n	8000b7c <__cmpsf2+0x4>
 8000b76:	bf00      	nop

08000b78 <__cmpsf2>:
 8000b78:	f04f 0c01 	mov.w	ip, #1
 8000b7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	bf18      	it	ne
 8000b8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b92:	d011      	beq.n	8000bb8 <__cmpsf2+0x40>
 8000b94:	b001      	add	sp, #4
 8000b96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b9a:	bf18      	it	ne
 8000b9c:	ea90 0f01 	teqne	r0, r1
 8000ba0:	bf58      	it	pl
 8000ba2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ba6:	bf88      	it	hi
 8000ba8:	17c8      	asrhi	r0, r1, #31
 8000baa:	bf38      	it	cc
 8000bac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bb0:	bf18      	it	ne
 8000bb2:	f040 0001 	orrne.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	d102      	bne.n	8000bc4 <__cmpsf2+0x4c>
 8000bbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bc2:	d105      	bne.n	8000bd0 <__cmpsf2+0x58>
 8000bc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bc8:	d1e4      	bne.n	8000b94 <__cmpsf2+0x1c>
 8000bca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000bce:	d0e1      	beq.n	8000b94 <__cmpsf2+0x1c>
 8000bd0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cfrcmple>:
 8000bd8:	4684      	mov	ip, r0
 8000bda:	4608      	mov	r0, r1
 8000bdc:	4661      	mov	r1, ip
 8000bde:	e7ff      	b.n	8000be0 <__aeabi_cfcmpeq>

08000be0 <__aeabi_cfcmpeq>:
 8000be0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000be2:	f7ff ffc9 	bl	8000b78 <__cmpsf2>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	bf48      	it	mi
 8000bea:	f110 0f00 	cmnmi.w	r0, #0
 8000bee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bf0 <__aeabi_fcmpeq>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff fff4 	bl	8000be0 <__aeabi_cfcmpeq>
 8000bf8:	bf0c      	ite	eq
 8000bfa:	2001      	moveq	r0, #1
 8000bfc:	2000      	movne	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_fcmplt>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffea 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c0c:	bf34      	ite	cc
 8000c0e:	2001      	movcc	r0, #1
 8000c10:	2000      	movcs	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmple>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffe0 	bl	8000be0 <__aeabi_cfcmpeq>
 8000c20:	bf94      	ite	ls
 8000c22:	2001      	movls	r0, #1
 8000c24:	2000      	movhi	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmpge>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffd2 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpgt>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffc8 	bl	8000bd8 <__aeabi_cfrcmple>
 8000c48:	bf34      	ite	cc
 8000c4a:	2001      	movcc	r0, #1
 8000c4c:	2000      	movcs	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_ldivmod>:
 8000c54:	b97b      	cbnz	r3, 8000c76 <__aeabi_ldivmod+0x22>
 8000c56:	b972      	cbnz	r2, 8000c76 <__aeabi_ldivmod+0x22>
 8000c58:	2900      	cmp	r1, #0
 8000c5a:	bfbe      	ittt	lt
 8000c5c:	2000      	movlt	r0, #0
 8000c5e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c62:	e006      	blt.n	8000c72 <__aeabi_ldivmod+0x1e>
 8000c64:	bf08      	it	eq
 8000c66:	2800      	cmpeq	r0, #0
 8000c68:	bf1c      	itt	ne
 8000c6a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c6e:	f04f 30ff 	movne.w	r0, #4294967295
 8000c72:	f000 b9dd 	b.w	8001030 <__aeabi_idiv0>
 8000c76:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	db09      	blt.n	8000c96 <__aeabi_ldivmod+0x42>
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db1a      	blt.n	8000cbc <__aeabi_ldivmod+0x68>
 8000c86:	f000 f86d 	bl	8000d64 <__udivmoddi4>
 8000c8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c92:	b004      	add	sp, #16
 8000c94:	4770      	bx	lr
 8000c96:	4240      	negs	r0, r0
 8000c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db1b      	blt.n	8000cd8 <__aeabi_ldivmod+0x84>
 8000ca0:	f000 f860 	bl	8000d64 <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	4770      	bx	lr
 8000cbc:	4252      	negs	r2, r2
 8000cbe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc2:	f000 f84f 	bl	8000d64 <__udivmoddi4>
 8000cc6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cce:	b004      	add	sp, #16
 8000cd0:	4240      	negs	r0, r0
 8000cd2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd6:	4770      	bx	lr
 8000cd8:	4252      	negs	r2, r2
 8000cda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cde:	f000 f841 	bl	8000d64 <__udivmoddi4>
 8000ce2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cea:	b004      	add	sp, #16
 8000cec:	4252      	negs	r2, r2
 8000cee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_d2lz>:
 8000cf4:	b538      	push	{r3, r4, r5, lr}
 8000cf6:	4605      	mov	r5, r0
 8000cf8:	460c      	mov	r4, r1
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4628      	mov	r0, r5
 8000d00:	4621      	mov	r1, r4
 8000d02:	f7ff fe5b 	bl	80009bc <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x20>
 8000d08:	4628      	mov	r0, r5
 8000d0a:	4621      	mov	r1, r4
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4628      	mov	r0, r5
 8000d16:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fbd1 	bl	80004d8 <__aeabi_dmul>
 8000d36:	f7ff fea7 	bl	8000a88 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fb52 	bl	80003e4 <__aeabi_ui2d>
 8000d40:	2200      	movs	r2, #0
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d44:	f7ff fbc8 	bl	80004d8 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff fa0a 	bl	8000168 <__aeabi_dsub>
 8000d54:	f7ff fe98 	bl	8000a88 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	468e      	mov	lr, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14c      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d967      	bls.n	8000e4a <__udivmoddi4+0xe6>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b153      	cbz	r3, 8000d96 <__udivmoddi4+0x32>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	fa01 fe03 	lsl.w	lr, r1, r3
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	ea42 0e0e 	orr.w	lr, r2, lr
 8000d94:	409c      	lsls	r4, r3
 8000d96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9a:	fbbe f1f7 	udiv	r1, lr, r7
 8000d9e:	fa1f f58c 	uxth.w	r5, ip
 8000da2:	fb07 ee11 	mls	lr, r7, r1, lr
 8000da6:	fb01 f005 	mul.w	r0, r1, r5
 8000daa:	0c22      	lsrs	r2, r4, #16
 8000dac:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000db0:	4290      	cmp	r0, r2
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x66>
 8000db4:	eb1c 0202 	adds.w	r2, ip, r2
 8000db8:	f101 3eff 	add.w	lr, r1, #4294967295
 8000dbc:	f080 8119 	bcs.w	8000ff2 <__udivmoddi4+0x28e>
 8000dc0:	4290      	cmp	r0, r2
 8000dc2:	f240 8116 	bls.w	8000ff2 <__udivmoddi4+0x28e>
 8000dc6:	3902      	subs	r1, #2
 8000dc8:	4462      	add	r2, ip
 8000dca:	1a12      	subs	r2, r2, r0
 8000dcc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd0:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd4:	fb00 f505 	mul.w	r5, r0, r5
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dde:	42a5      	cmp	r5, r4
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0404 	adds.w	r4, ip, r4
 8000de6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dea:	f080 8104 	bcs.w	8000ff6 <__udivmoddi4+0x292>
 8000dee:	42a5      	cmp	r5, r4
 8000df0:	f240 8101 	bls.w	8000ff6 <__udivmoddi4+0x292>
 8000df4:	4464      	add	r4, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	1b64      	subs	r4, r4, r5
 8000e00:	b11e      	cbz	r6, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40dc      	lsrs	r4, r3
 8000e04:	2300      	movs	r3, #0
 8000e06:	e9c6 4300 	strd	r4, r3, [r6]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0xc0>
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	f000 80ea 	beq.w	8000fec <__udivmoddi4+0x288>
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e24:	fab3 f183 	clz	r1, r3
 8000e28:	2900      	cmp	r1, #0
 8000e2a:	d148      	bne.n	8000ebe <__udivmoddi4+0x15a>
 8000e2c:	42ab      	cmp	r3, r5
 8000e2e:	d302      	bcc.n	8000e36 <__udivmoddi4+0xd2>
 8000e30:	4282      	cmp	r2, r0
 8000e32:	f200 80f8 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000e36:	1a84      	subs	r4, r0, r2
 8000e38:	eb65 0203 	sbc.w	r2, r5, r3
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	4696      	mov	lr, r2
 8000e40:	2e00      	cmp	r6, #0
 8000e42:	d0e2      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e44:	e9c6 4e00 	strd	r4, lr, [r6]
 8000e48:	e7df      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e4a:	b902      	cbnz	r2, 8000e4e <__udivmoddi4+0xea>
 8000e4c:	deff      	udf	#255	; 0xff
 8000e4e:	fab2 f382 	clz	r3, r2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f040 808e 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e58:	1a88      	subs	r0, r1, r2
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	0c17      	lsrs	r7, r2, #16
 8000e5e:	fa1f fe82 	uxth.w	lr, r2
 8000e62:	fbb0 f5f7 	udiv	r5, r0, r7
 8000e66:	fb07 0015 	mls	r0, r7, r5, r0
 8000e6a:	0c22      	lsrs	r2, r4, #16
 8000e6c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e70:	fb0e f005 	mul.w	r0, lr, r5
 8000e74:	4290      	cmp	r0, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x126>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x124>
 8000e82:	4290      	cmp	r0, r2
 8000e84:	f200 80cc 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e88:	4645      	mov	r5, r8
 8000e8a:	1a12      	subs	r2, r2, r0
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	fb0e fe00 	mul.w	lr, lr, r0
 8000e98:	b2a4      	uxth	r4, r4
 8000e9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x150>
 8000ea2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eaa:	d202      	bcs.n	8000eb2 <__udivmoddi4+0x14e>
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	f200 80b4 	bhi.w	800101a <__udivmoddi4+0x2b6>
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	eba4 040e 	sub.w	r4, r4, lr
 8000eb8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ebc:	e7a0      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000ebe:	f1c1 0720 	rsb	r7, r1, #32
 8000ec2:	408b      	lsls	r3, r1
 8000ec4:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec8:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ecc:	fa25 fa07 	lsr.w	sl, r5, r7
 8000ed0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed4:	fbba f8f9 	udiv	r8, sl, r9
 8000ed8:	408d      	lsls	r5, r1
 8000eda:	fa20 f307 	lsr.w	r3, r0, r7
 8000ede:	fb09 aa18 	mls	sl, r9, r8, sl
 8000ee2:	fa1f fe8c 	uxth.w	lr, ip
 8000ee6:	432b      	orrs	r3, r5
 8000ee8:	fa00 f501 	lsl.w	r5, r0, r1
 8000eec:	fb08 f00e 	mul.w	r0, r8, lr
 8000ef0:	0c1c      	lsrs	r4, r3, #16
 8000ef2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000ef6:	42a0      	cmp	r0, r4
 8000ef8:	fa02 f201 	lsl.w	r2, r2, r1
 8000efc:	d90b      	bls.n	8000f16 <__udivmoddi4+0x1b2>
 8000efe:	eb1c 0404 	adds.w	r4, ip, r4
 8000f02:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f06:	f080 8086 	bcs.w	8001016 <__udivmoddi4+0x2b2>
 8000f0a:	42a0      	cmp	r0, r4
 8000f0c:	f240 8083 	bls.w	8001016 <__udivmoddi4+0x2b2>
 8000f10:	f1a8 0802 	sub.w	r8, r8, #2
 8000f14:	4464      	add	r4, ip
 8000f16:	1a24      	subs	r4, r4, r0
 8000f18:	b298      	uxth	r0, r3
 8000f1a:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1e:	fb09 4413 	mls	r4, r9, r3, r4
 8000f22:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f26:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x1dc>
 8000f2e:	eb1c 0404 	adds.w	r4, ip, r4
 8000f32:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f36:	d26a      	bcs.n	800100e <__udivmoddi4+0x2aa>
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d968      	bls.n	800100e <__udivmoddi4+0x2aa>
 8000f3c:	3b02      	subs	r3, #2
 8000f3e:	4464      	add	r4, ip
 8000f40:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000f44:	fba0 9302 	umull	r9, r3, r0, r2
 8000f48:	eba4 040e 	sub.w	r4, r4, lr
 8000f4c:	429c      	cmp	r4, r3
 8000f4e:	46c8      	mov	r8, r9
 8000f50:	469e      	mov	lr, r3
 8000f52:	d354      	bcc.n	8000ffe <__udivmoddi4+0x29a>
 8000f54:	d051      	beq.n	8000ffa <__udivmoddi4+0x296>
 8000f56:	2e00      	cmp	r6, #0
 8000f58:	d067      	beq.n	800102a <__udivmoddi4+0x2c6>
 8000f5a:	ebb5 0308 	subs.w	r3, r5, r8
 8000f5e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f62:	40cb      	lsrs	r3, r1
 8000f64:	fa04 f707 	lsl.w	r7, r4, r7
 8000f68:	431f      	orrs	r7, r3
 8000f6a:	40cc      	lsrs	r4, r1
 8000f6c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f70:	2100      	movs	r1, #0
 8000f72:	e74a      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f78:	f1c3 0020 	rsb	r0, r3, #32
 8000f7c:	40c1      	lsrs	r1, r0
 8000f7e:	409d      	lsls	r5, r3
 8000f80:	fa24 f000 	lsr.w	r0, r4, r0
 8000f84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f88:	4328      	orrs	r0, r5
 8000f8a:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f8e:	fb07 1115 	mls	r1, r7, r5, r1
 8000f92:	fa1f fe8c 	uxth.w	lr, ip
 8000f96:	0c02      	lsrs	r2, r0, #16
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x256>
 8000fa8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fb0:	d22f      	bcs.n	8001012 <__udivmoddi4+0x2ae>
 8000fb2:	4291      	cmp	r1, r2
 8000fb4:	d92d      	bls.n	8001012 <__udivmoddi4+0x2ae>
 8000fb6:	3d02      	subs	r5, #2
 8000fb8:	4462      	add	r2, ip
 8000fba:	1a52      	subs	r2, r2, r1
 8000fbc:	fbb2 f1f7 	udiv	r1, r2, r7
 8000fc0:	fb07 2211 	mls	r2, r7, r1, r2
 8000fc4:	b280      	uxth	r0, r0
 8000fc6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000fca:	fb01 f20e 	mul.w	r2, r1, lr
 8000fce:	4282      	cmp	r2, r0
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x280>
 8000fd2:	eb1c 0000 	adds.w	r0, ip, r0
 8000fd6:	f101 38ff 	add.w	r8, r1, #4294967295
 8000fda:	d216      	bcs.n	800100a <__udivmoddi4+0x2a6>
 8000fdc:	4282      	cmp	r2, r0
 8000fde:	d914      	bls.n	800100a <__udivmoddi4+0x2a6>
 8000fe0:	3902      	subs	r1, #2
 8000fe2:	4460      	add	r0, ip
 8000fe4:	1a80      	subs	r0, r0, r2
 8000fe6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fea:	e73a      	b.n	8000e62 <__udivmoddi4+0xfe>
 8000fec:	4631      	mov	r1, r6
 8000fee:	4630      	mov	r0, r6
 8000ff0:	e70b      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000ff2:	4671      	mov	r1, lr
 8000ff4:	e6e9      	b.n	8000dca <__udivmoddi4+0x66>
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	e6fe      	b.n	8000df8 <__udivmoddi4+0x94>
 8000ffa:	454d      	cmp	r5, r9
 8000ffc:	d2ab      	bcs.n	8000f56 <__udivmoddi4+0x1f2>
 8000ffe:	ebb9 0802 	subs.w	r8, r9, r2
 8001002:	eb63 0e0c 	sbc.w	lr, r3, ip
 8001006:	3801      	subs	r0, #1
 8001008:	e7a5      	b.n	8000f56 <__udivmoddi4+0x1f2>
 800100a:	4641      	mov	r1, r8
 800100c:	e7ea      	b.n	8000fe4 <__udivmoddi4+0x280>
 800100e:	4603      	mov	r3, r0
 8001010:	e796      	b.n	8000f40 <__udivmoddi4+0x1dc>
 8001012:	4645      	mov	r5, r8
 8001014:	e7d1      	b.n	8000fba <__udivmoddi4+0x256>
 8001016:	46d0      	mov	r8, sl
 8001018:	e77d      	b.n	8000f16 <__udivmoddi4+0x1b2>
 800101a:	4464      	add	r4, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e749      	b.n	8000eb4 <__udivmoddi4+0x150>
 8001020:	3d02      	subs	r5, #2
 8001022:	4462      	add	r2, ip
 8001024:	e731      	b.n	8000e8a <__udivmoddi4+0x126>
 8001026:	4608      	mov	r0, r1
 8001028:	e70a      	b.n	8000e40 <__udivmoddi4+0xdc>
 800102a:	4631      	mov	r1, r6
 800102c:	e6ed      	b.n	8000e0a <__udivmoddi4+0xa6>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	; 0x30
 8001038:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	2319      	movs	r3, #25
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	463b      	mov	r3, r7
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	2288      	movs	r2, #136	; 0x88
 800104c:	21ec      	movs	r1, #236	; 0xec
 800104e:	4857      	ldr	r0, [pc, #348]	; (80011ac <TrimRead+0x178>)
 8001050:	f003 f870 	bl	8004134 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8001054:	463b      	mov	r3, r7
 8001056:	3319      	adds	r3, #25
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	9202      	str	r2, [sp, #8]
 800105e:	2207      	movs	r2, #7
 8001060:	9201      	str	r2, [sp, #4]
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2301      	movs	r3, #1
 8001066:	22e1      	movs	r2, #225	; 0xe1
 8001068:	21ec      	movs	r1, #236	; 0xec
 800106a:	4850      	ldr	r0, [pc, #320]	; (80011ac <TrimRead+0x178>)
 800106c:	f003 f862 	bl	8004134 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001070:	787b      	ldrb	r3, [r7, #1]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	783b      	ldrb	r3, [r7, #0]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b21b      	sxth	r3, r3
 800107e:	b29a      	uxth	r2, r3
 8001080:	4b4b      	ldr	r3, [pc, #300]	; (80011b0 <TrimRead+0x17c>)
 8001082:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	78bb      	ldrb	r3, [r7, #2]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <TrimRead+0x180>)
 8001094:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001096:	797b      	ldrb	r3, [r7, #5]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	793b      	ldrb	r3, [r7, #4]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <TrimRead+0x184>)
 80010a6:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	797b      	ldrb	r3, [r7, #5]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b40      	ldr	r3, [pc, #256]	; (80011bc <TrimRead+0x188>)
 80010ba:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 80010bc:	7a7b      	ldrb	r3, [r7, #9]
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <TrimRead+0x18c>)
 80010cc:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 80010ce:	7afb      	ldrb	r3, [r7, #11]
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	7abb      	ldrb	r3, [r7, #10]
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	4313      	orrs	r3, r2
 80010da:	b21a      	sxth	r2, r3
 80010dc:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <TrimRead+0x190>)
 80010de:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 80010e0:	7b7b      	ldrb	r3, [r7, #13]
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	7b3b      	ldrb	r3, [r7, #12]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <TrimRead+0x194>)
 80010f0:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	7bbb      	ldrb	r3, [r7, #14]
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b21a      	sxth	r2, r3
 8001100:	4b32      	ldr	r3, [pc, #200]	; (80011cc <TrimRead+0x198>)
 8001102:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001104:	7c7b      	ldrb	r3, [r7, #17]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b21a      	sxth	r2, r3
 800110a:	7c3b      	ldrb	r3, [r7, #16]
 800110c:	b21b      	sxth	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b21a      	sxth	r2, r3
 8001112:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <TrimRead+0x19c>)
 8001114:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8001116:	7cfb      	ldrb	r3, [r7, #19]
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b21a      	sxth	r2, r3
 800111c:	7cbb      	ldrb	r3, [r7, #18]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21a      	sxth	r2, r3
 8001124:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <TrimRead+0x1a0>)
 8001126:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8001128:	7d7b      	ldrb	r3, [r7, #21]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	b21a      	sxth	r2, r3
 800112e:	7d3b      	ldrb	r3, [r7, #20]
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b21a      	sxth	r2, r3
 8001136:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <TrimRead+0x1a4>)
 8001138:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 800113a:	7dfb      	ldrb	r3, [r7, #23]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b21a      	sxth	r2, r3
 8001140:	7dbb      	ldrb	r3, [r7, #22]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b24      	ldr	r3, [pc, #144]	; (80011dc <TrimRead+0x1a8>)
 800114a:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 800114c:	7e3b      	ldrb	r3, [r7, #24]
 800114e:	b29a      	uxth	r2, r3
 8001150:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <TrimRead+0x1ac>)
 8001152:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001154:	7ebb      	ldrb	r3, [r7, #26]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21a      	sxth	r2, r3
 800115a:	7e7b      	ldrb	r3, [r7, #25]
 800115c:	b21b      	sxth	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <TrimRead+0x1b0>)
 8001164:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001166:	7efb      	ldrb	r3, [r7, #27]
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <TrimRead+0x1b4>)
 800116c:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 800116e:	7f3b      	ldrb	r3, [r7, #28]
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	b21a      	sxth	r2, r3
 8001174:	7f7b      	ldrb	r3, [r7, #29]
 8001176:	b21b      	sxth	r3, r3
 8001178:	f003 030f 	and.w	r3, r3, #15
 800117c:	b21b      	sxth	r3, r3
 800117e:	4313      	orrs	r3, r2
 8001180:	b21a      	sxth	r2, r3
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <TrimRead+0x1b8>)
 8001184:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8001186:	7fbb      	ldrb	r3, [r7, #30]
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	b21a      	sxth	r2, r3
 800118c:	7f7b      	ldrb	r3, [r7, #29]
 800118e:	091b      	lsrs	r3, r3, #4
 8001190:	b2db      	uxtb	r3, r3
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b21a      	sxth	r2, r3
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <TrimRead+0x1bc>)
 800119a:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 800119c:	7ffb      	ldrb	r3, [r7, #31]
 800119e:	b21a      	sxth	r2, r3
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <TrimRead+0x1c0>)
 80011a2:	801a      	strh	r2, [r3, #0]
}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200002e8 	.word	0x200002e8
 80011b0:	20000210 	.word	0x20000210
 80011b4:	20000218 	.word	0x20000218
 80011b8:	2000021a 	.word	0x2000021a
 80011bc:	20000212 	.word	0x20000212
 80011c0:	2000021c 	.word	0x2000021c
 80011c4:	2000021e 	.word	0x2000021e
 80011c8:	20000220 	.word	0x20000220
 80011cc:	20000222 	.word	0x20000222
 80011d0:	20000224 	.word	0x20000224
 80011d4:	20000226 	.word	0x20000226
 80011d8:	20000228 	.word	0x20000228
 80011dc:	2000022a 	.word	0x2000022a
 80011e0:	20000214 	.word	0x20000214
 80011e4:	2000022c 	.word	0x2000022c
 80011e8:	20000216 	.word	0x20000216
 80011ec:	2000022e 	.word	0x2000022e
 80011f0:	20000230 	.word	0x20000230
 80011f4:	20000232 	.word	0x20000232

080011f8 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af04      	add	r7, sp, #16
 80011fe:	4604      	mov	r4, r0
 8001200:	4608      	mov	r0, r1
 8001202:	4611      	mov	r1, r2
 8001204:	461a      	mov	r2, r3
 8001206:	4623      	mov	r3, r4
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	4603      	mov	r3, r0
 800120c:	71bb      	strb	r3, [r7, #6]
 800120e:	460b      	mov	r3, r1
 8001210:	717b      	strb	r3, [r7, #5]
 8001212:	4613      	mov	r3, r2
 8001214:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8001216:	f7ff ff0d 	bl	8001034 <TrimRead>


	uint8_t datatowrite = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001222:	23b6      	movs	r3, #182	; 0xb6
 8001224:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	2301      	movs	r3, #1
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	f107 030f 	add.w	r3, r7, #15
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	22e0      	movs	r2, #224	; 0xe0
 800123a:	21ec      	movs	r1, #236	; 0xec
 800123c:	4858      	ldr	r0, [pc, #352]	; (80013a0 <BME280_Config+0x1a8>)
 800123e:	f002 fe7f 	bl	8003f40 <HAL_I2C_Mem_Write>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <BME280_Config+0x56>
	{
		return -1;
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	e0a3      	b.n	8001396 <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 800124e:	2064      	movs	r0, #100	; 0x64
 8001250:	f001 fd52 	bl	8002cf8 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001254:	797b      	ldrb	r3, [r7, #5]
 8001256:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125c:	9302      	str	r3, [sp, #8]
 800125e:	2301      	movs	r3, #1
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	f107 030f 	add.w	r3, r7, #15
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	22f2      	movs	r2, #242	; 0xf2
 800126c:	21ec      	movs	r1, #236	; 0xec
 800126e:	484c      	ldr	r0, [pc, #304]	; (80013a0 <BME280_Config+0x1a8>)
 8001270:	f002 fe66 	bl	8003f40 <HAL_I2C_Mem_Write>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <BME280_Config+0x88>
	{
		return -1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	e08a      	b.n	8001396 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001280:	2064      	movs	r0, #100	; 0x64
 8001282:	f001 fd39 	bl	8002cf8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2301      	movs	r3, #1
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	f107 030e 	add.w	r3, r7, #14
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	22f2      	movs	r2, #242	; 0xf2
 800129a:	21ec      	movs	r1, #236	; 0xec
 800129c:	4840      	ldr	r0, [pc, #256]	; (80013a0 <BME280_Config+0x1a8>)
 800129e:	f002 ff49 	bl	8004134 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012a2:	7bba      	ldrb	r2, [r7, #14]
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d002      	beq.n	80012b0 <BME280_Config+0xb8>
	{
		return -1;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	e072      	b.n	8001396 <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 80012b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012b4:	015b      	lsls	r3, r3, #5
 80012b6:	b25a      	sxtb	r2, r3
 80012b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012cc:	9302      	str	r3, [sp, #8]
 80012ce:	2301      	movs	r3, #1
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	f107 030f 	add.w	r3, r7, #15
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2301      	movs	r3, #1
 80012da:	22f5      	movs	r2, #245	; 0xf5
 80012dc:	21ec      	movs	r1, #236	; 0xec
 80012de:	4830      	ldr	r0, [pc, #192]	; (80013a0 <BME280_Config+0x1a8>)
 80012e0:	f002 fe2e 	bl	8003f40 <HAL_I2C_Mem_Write>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <BME280_Config+0xf8>
	{
		return -1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	e052      	b.n	8001396 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012f0:	2064      	movs	r0, #100	; 0x64
 80012f2:	f001 fd01 	bl	8002cf8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	2301      	movs	r3, #1
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	f107 030e 	add.w	r3, r7, #14
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	22f5      	movs	r2, #245	; 0xf5
 800130a:	21ec      	movs	r1, #236	; 0xec
 800130c:	4824      	ldr	r0, [pc, #144]	; (80013a0 <BME280_Config+0x1a8>)
 800130e:	f002 ff11 	bl	8004134 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001312:	7bba      	ldrb	r2, [r7, #14]
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	429a      	cmp	r2, r3
 8001318:	d002      	beq.n	8001320 <BME280_Config+0x128>
	{
		return -1;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	e03a      	b.n	8001396 <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	015b      	lsls	r3, r3, #5
 8001324:	b25a      	sxtb	r2, r3
 8001326:	79bb      	ldrb	r3, [r7, #6]
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	b25b      	sxtb	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b25a      	sxtb	r2, r3
 8001330:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001334:	4313      	orrs	r3, r2
 8001336:	b25b      	sxtb	r3, r3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800133c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2301      	movs	r3, #1
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	f107 030f 	add.w	r3, r7, #15
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	22f4      	movs	r2, #244	; 0xf4
 8001350:	21ec      	movs	r1, #236	; 0xec
 8001352:	4813      	ldr	r0, [pc, #76]	; (80013a0 <BME280_Config+0x1a8>)
 8001354:	f002 fdf4 	bl	8003f40 <HAL_I2C_Mem_Write>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d002      	beq.n	8001364 <BME280_Config+0x16c>
	{
		return -1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e018      	b.n	8001396 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001364:	2064      	movs	r0, #100	; 0x64
 8001366:	f001 fcc7 	bl	8002cf8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	2301      	movs	r3, #1
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	f107 030e 	add.w	r3, r7, #14
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	22f4      	movs	r2, #244	; 0xf4
 800137e:	21ec      	movs	r1, #236	; 0xec
 8001380:	4807      	ldr	r0, [pc, #28]	; (80013a0 <BME280_Config+0x1a8>)
 8001382:	f002 fed7 	bl	8004134 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001386:	7bba      	ldrb	r2, [r7, #14]
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	429a      	cmp	r2, r3
 800138c:	d002      	beq.n	8001394 <BME280_Config+0x19c>
	{
		return -1;
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	e000      	b.n	8001396 <BME280_Config+0x19e>
	}

	return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	bd90      	pop	{r4, r7, pc}
 800139e:	bf00      	nop
 80013a0:	200002e8 	.word	0x200002e8

080013a4 <BMEReadRaw>:


int BMEReadRaw(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	2301      	movs	r3, #1
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <BMEReadRaw+0x8c>)
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2301      	movs	r3, #1
 80013ba:	22d0      	movs	r2, #208	; 0xd0
 80013bc:	21ec      	movs	r1, #236	; 0xec
 80013be:	481d      	ldr	r0, [pc, #116]	; (8001434 <BMEReadRaw+0x90>)
 80013c0:	f002 feb8 	bl	8004134 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <BMEReadRaw+0x8c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b60      	cmp	r3, #96	; 0x60
 80013ca:	d12a      	bne.n	8001422 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
 80013d0:	9302      	str	r3, [sp, #8]
 80013d2:	2308      	movs	r3, #8
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	463b      	mov	r3, r7
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2301      	movs	r3, #1
 80013dc:	22f7      	movs	r2, #247	; 0xf7
 80013de:	21ec      	movs	r1, #236	; 0xec
 80013e0:	4814      	ldr	r0, [pc, #80]	; (8001434 <BMEReadRaw+0x90>)
 80013e2:	f002 fea7 	bl	8004134 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80013e6:	783b      	ldrb	r3, [r7, #0]
 80013e8:	031a      	lsls	r2, r3, #12
 80013ea:	787b      	ldrb	r3, [r7, #1]
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	4313      	orrs	r3, r2
 80013f0:	78ba      	ldrb	r2, [r7, #2]
 80013f2:	0912      	lsrs	r2, r2, #4
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	4313      	orrs	r3, r2
 80013f8:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <BMEReadRaw+0x94>)
 80013fa:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	031a      	lsls	r2, r3, #12
 8001400:	793b      	ldrb	r3, [r7, #4]
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	4313      	orrs	r3, r2
 8001406:	797a      	ldrb	r2, [r7, #5]
 8001408:	0912      	lsrs	r2, r2, #4
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	4313      	orrs	r3, r2
 800140e:	4a0b      	ldr	r2, [pc, #44]	; (800143c <BMEReadRaw+0x98>)
 8001410:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	79fa      	ldrb	r2, [r7, #7]
 8001418:	4313      	orrs	r3, r2
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <BMEReadRaw+0x9c>)
 800141c:	6013      	str	r3, [r2, #0]

		return 0;
 800141e:	2300      	movs	r3, #0
 8001420:	e001      	b.n	8001426 <BMEReadRaw+0x82>
	}

	else return -1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000200 	.word	0x20000200
 8001434:	200002e8 	.word	0x200002e8
 8001438:	20000208 	.word	0x20000208
 800143c:	20000204 	.word	0x20000204
 8001440:	2000020c 	.word	0x2000020c

08001444 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	10da      	asrs	r2, r3, #3
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <BME280_compensate_T_int32+0x70>)
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <BME280_compensate_T_int32+0x74>)
 800145a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	12db      	asrs	r3, r3, #11
 8001464:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	111b      	asrs	r3, r3, #4
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <BME280_compensate_T_int32+0x70>)
 800146c:	8812      	ldrh	r2, [r2, #0]
 800146e:	1a9b      	subs	r3, r3, r2
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	1112      	asrs	r2, r2, #4
 8001474:	490f      	ldr	r1, [pc, #60]	; (80014b4 <BME280_compensate_T_int32+0x70>)
 8001476:	8809      	ldrh	r1, [r1, #0]
 8001478:	1a52      	subs	r2, r2, r1
 800147a:	fb02 f303 	mul.w	r3, r2, r3
 800147e:	131b      	asrs	r3, r3, #12
 8001480:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <BME280_compensate_T_int32+0x78>)
 8001482:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001486:	fb02 f303 	mul.w	r3, r2, r3
 800148a:	139b      	asrs	r3, r3, #14
 800148c:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4413      	add	r3, r2
 8001494:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <BME280_compensate_T_int32+0x7c>)
 8001496:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <BME280_compensate_T_int32+0x7c>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	3380      	adds	r3, #128	; 0x80
 80014a4:	121b      	asrs	r3, r3, #8
 80014a6:	60fb      	str	r3, [r7, #12]
	return T;
 80014a8:	68fb      	ldr	r3, [r7, #12]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	371c      	adds	r7, #28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	20000210 	.word	0x20000210
 80014b8:	20000218 	.word	0x20000218
 80014bc:	2000021a 	.word	0x2000021a
 80014c0:	20000234 	.word	0x20000234

080014c4 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 80014c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014c8:	b0ca      	sub	sp, #296	; 0x128
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80014d0:	4bae      	ldr	r3, [pc, #696]	; (800178c <BME280_compensate_P_int64+0x2c8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	17da      	asrs	r2, r3, #31
 80014d6:	461c      	mov	r4, r3
 80014d8:	4615      	mov	r5, r2
 80014da:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80014de:	f145 3bff 	adc.w	fp, r5, #4294967295
 80014e2:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80014e6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014ee:	fb03 f102 	mul.w	r1, r3, r2
 80014f2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80014f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	18ca      	adds	r2, r1, r3
 8001500:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001504:	fba3 8903 	umull	r8, r9, r3, r3
 8001508:	eb02 0309 	add.w	r3, r2, r9
 800150c:	4699      	mov	r9, r3
 800150e:	4ba0      	ldr	r3, [pc, #640]	; (8001790 <BME280_compensate_P_int64+0x2cc>)
 8001510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001514:	b21b      	sxth	r3, r3
 8001516:	17da      	asrs	r2, r3, #31
 8001518:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800151c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001520:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001524:	4603      	mov	r3, r0
 8001526:	fb03 f209 	mul.w	r2, r3, r9
 800152a:	460b      	mov	r3, r1
 800152c:	fb08 f303 	mul.w	r3, r8, r3
 8001530:	4413      	add	r3, r2
 8001532:	4602      	mov	r2, r0
 8001534:	fba8 2102 	umull	r2, r1, r8, r2
 8001538:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 800153c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001540:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001544:	4413      	add	r3, r2
 8001546:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800154a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 800154e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001552:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001556:	4b8f      	ldr	r3, [pc, #572]	; (8001794 <BME280_compensate_P_int64+0x2d0>)
 8001558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155c:	b21b      	sxth	r3, r3
 800155e:	17da      	asrs	r2, r3, #31
 8001560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001564:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001568:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800156c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001570:	462a      	mov	r2, r5
 8001572:	fb02 f203 	mul.w	r2, r2, r3
 8001576:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800157a:	4621      	mov	r1, r4
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	441a      	add	r2, r3
 8001582:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001586:	4621      	mov	r1, r4
 8001588:	fba3 3101 	umull	r3, r1, r3, r1
 800158c:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8001590:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001598:	18d3      	adds	r3, r2, r3
 800159a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800159e:	f04f 0000 	mov.w	r0, #0
 80015a2:	f04f 0100 	mov.w	r1, #0
 80015a6:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80015aa:	462b      	mov	r3, r5
 80015ac:	0459      	lsls	r1, r3, #17
 80015ae:	4622      	mov	r2, r4
 80015b0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80015b4:	4623      	mov	r3, r4
 80015b6:	0458      	lsls	r0, r3, #17
 80015b8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80015bc:	1814      	adds	r4, r2, r0
 80015be:	643c      	str	r4, [r7, #64]	; 0x40
 80015c0:	414b      	adcs	r3, r1
 80015c2:	647b      	str	r3, [r7, #68]	; 0x44
 80015c4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80015c8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 80015cc:	4b72      	ldr	r3, [pc, #456]	; (8001798 <BME280_compensate_P_int64+0x2d4>)
 80015ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	17da      	asrs	r2, r3, #31
 80015d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80015da:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80015de:	f04f 0000 	mov.w	r0, #0
 80015e2:	f04f 0100 	mov.w	r1, #0
 80015e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80015ea:	00d9      	lsls	r1, r3, #3
 80015ec:	2000      	movs	r0, #0
 80015ee:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80015f2:	1814      	adds	r4, r2, r0
 80015f4:	63bc      	str	r4, [r7, #56]	; 0x38
 80015f6:	414b      	adcs	r3, r1
 80015f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015fa:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80015fe:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001602:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001606:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800160a:	fb03 f102 	mul.w	r1, r3, r2
 800160e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001612:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001616:	fb02 f303 	mul.w	r3, r2, r3
 800161a:	18ca      	adds	r2, r1, r3
 800161c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001620:	fba3 3103 	umull	r3, r1, r3, r3
 8001624:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8001628:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800162c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001630:	18d3      	adds	r3, r2, r3
 8001632:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001636:	4b59      	ldr	r3, [pc, #356]	; (800179c <BME280_compensate_P_int64+0x2d8>)
 8001638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163c:	b21b      	sxth	r3, r3
 800163e:	17da      	asrs	r2, r3, #31
 8001640:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001644:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001648:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 800164c:	4622      	mov	r2, r4
 800164e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001652:	4641      	mov	r1, r8
 8001654:	fb01 f202 	mul.w	r2, r1, r2
 8001658:	464d      	mov	r5, r9
 800165a:	4618      	mov	r0, r3
 800165c:	4621      	mov	r1, r4
 800165e:	4603      	mov	r3, r0
 8001660:	fb03 f305 	mul.w	r3, r3, r5
 8001664:	4413      	add	r3, r2
 8001666:	4602      	mov	r2, r0
 8001668:	4641      	mov	r1, r8
 800166a:	fba2 2101 	umull	r2, r1, r2, r1
 800166e:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001672:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001676:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800167a:	4413      	add	r3, r2
 800167c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001680:	f04f 0000 	mov.w	r0, #0
 8001684:	f04f 0100 	mov.w	r1, #0
 8001688:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800168c:	4623      	mov	r3, r4
 800168e:	0a18      	lsrs	r0, r3, #8
 8001690:	462a      	mov	r2, r5
 8001692:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001696:	462b      	mov	r3, r5
 8001698:	1219      	asrs	r1, r3, #8
 800169a:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <BME280_compensate_P_int64+0x2dc>)
 800169c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	17da      	asrs	r2, r3, #31
 80016a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016a8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016b0:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80016b4:	464a      	mov	r2, r9
 80016b6:	fb02 f203 	mul.w	r2, r2, r3
 80016ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016be:	4644      	mov	r4, r8
 80016c0:	fb04 f303 	mul.w	r3, r4, r3
 80016c4:	441a      	add	r2, r3
 80016c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016ca:	4644      	mov	r4, r8
 80016cc:	fba3 3404 	umull	r3, r4, r3, r4
 80016d0:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
 80016d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80016d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016dc:	18d3      	adds	r3, r2, r3
 80016de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80016ee:	464c      	mov	r4, r9
 80016f0:	0323      	lsls	r3, r4, #12
 80016f2:	46c4      	mov	ip, r8
 80016f4:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 80016f8:	4644      	mov	r4, r8
 80016fa:	0322      	lsls	r2, r4, #12
 80016fc:	1884      	adds	r4, r0, r2
 80016fe:	633c      	str	r4, [r7, #48]	; 0x30
 8001700:	eb41 0303 	adc.w	r3, r1, r3
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
 8001706:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800170a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800170e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001712:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001716:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800171a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <BME280_compensate_P_int64+0x2e0>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	b29b      	uxth	r3, r3
 8001724:	2200      	movs	r2, #0
 8001726:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800172a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800172e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8001732:	4622      	mov	r2, r4
 8001734:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001738:	4641      	mov	r1, r8
 800173a:	fb01 f202 	mul.w	r2, r1, r2
 800173e:	464d      	mov	r5, r9
 8001740:	4618      	mov	r0, r3
 8001742:	4621      	mov	r1, r4
 8001744:	4603      	mov	r3, r0
 8001746:	fb03 f305 	mul.w	r3, r3, r5
 800174a:	4413      	add	r3, r2
 800174c:	4602      	mov	r2, r0
 800174e:	4641      	mov	r1, r8
 8001750:	fba2 2101 	umull	r2, r1, r2, r1
 8001754:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001758:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800175c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001760:	4413      	add	r3, r2
 8001762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001772:	4629      	mov	r1, r5
 8001774:	104a      	asrs	r2, r1, #1
 8001776:	4629      	mov	r1, r5
 8001778:	17cb      	asrs	r3, r1, #31
 800177a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800177e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001782:	4313      	orrs	r3, r2
 8001784:	d110      	bne.n	80017a8 <BME280_compensate_P_int64+0x2e4>
	{
		return 0; // avoid exception caused by division by zero
 8001786:	2300      	movs	r3, #0
 8001788:	e152      	b.n	8001a30 <BME280_compensate_P_int64+0x56c>
 800178a:	bf00      	nop
 800178c:	20000234 	.word	0x20000234
 8001790:	20000224 	.word	0x20000224
 8001794:	20000222 	.word	0x20000222
 8001798:	20000220 	.word	0x20000220
 800179c:	2000021e 	.word	0x2000021e
 80017a0:	2000021c 	.word	0x2000021c
 80017a4:	20000212 	.word	0x20000212
	}
	p = 1048576-adc_P;
 80017a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017ac:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80017b0:	17da      	asrs	r2, r3, #31
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80017b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017b6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80017ba:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 80017be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017c2:	105b      	asrs	r3, r3, #1
 80017c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017cc:	07db      	lsls	r3, r3, #31
 80017ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017d2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80017d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80017da:	4604      	mov	r4, r0
 80017dc:	1aa4      	subs	r4, r4, r2
 80017de:	67bc      	str	r4, [r7, #120]	; 0x78
 80017e0:	eb61 0303 	sbc.w	r3, r1, r3
 80017e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017ea:	4622      	mov	r2, r4
 80017ec:	462b      	mov	r3, r5
 80017ee:	1891      	adds	r1, r2, r2
 80017f0:	6239      	str	r1, [r7, #32]
 80017f2:	415b      	adcs	r3, r3
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
 80017f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017fa:	4621      	mov	r1, r4
 80017fc:	1851      	adds	r1, r2, r1
 80017fe:	61b9      	str	r1, [r7, #24]
 8001800:	4629      	mov	r1, r5
 8001802:	414b      	adcs	r3, r1
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001812:	4649      	mov	r1, r9
 8001814:	018b      	lsls	r3, r1, #6
 8001816:	4641      	mov	r1, r8
 8001818:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800181c:	4641      	mov	r1, r8
 800181e:	018a      	lsls	r2, r1, #6
 8001820:	4641      	mov	r1, r8
 8001822:	1889      	adds	r1, r1, r2
 8001824:	6139      	str	r1, [r7, #16]
 8001826:	4649      	mov	r1, r9
 8001828:	eb43 0101 	adc.w	r1, r3, r1
 800182c:	6179      	str	r1, [r7, #20]
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800183a:	4649      	mov	r1, r9
 800183c:	008b      	lsls	r3, r1, #2
 800183e:	46c4      	mov	ip, r8
 8001840:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001844:	4641      	mov	r1, r8
 8001846:	008a      	lsls	r2, r1, #2
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	4603      	mov	r3, r0
 800184e:	4622      	mov	r2, r4
 8001850:	189b      	adds	r3, r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	460b      	mov	r3, r1
 8001856:	462a      	mov	r2, r5
 8001858:	eb42 0303 	adc.w	r3, r2, r3
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800186a:	4649      	mov	r1, r9
 800186c:	008b      	lsls	r3, r1, #2
 800186e:	46c4      	mov	ip, r8
 8001870:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001874:	4641      	mov	r1, r8
 8001876:	008a      	lsls	r2, r1, #2
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	4603      	mov	r3, r0
 800187e:	4622      	mov	r2, r4
 8001880:	189b      	adds	r3, r3, r2
 8001882:	673b      	str	r3, [r7, #112]	; 0x70
 8001884:	462b      	mov	r3, r5
 8001886:	460a      	mov	r2, r1
 8001888:	eb42 0303 	adc.w	r3, r2, r3
 800188c:	677b      	str	r3, [r7, #116]	; 0x74
 800188e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001892:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001896:	f7ff f9dd 	bl	8000c54 <__aeabi_ldivmod>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80018a2:	4b66      	ldr	r3, [pc, #408]	; (8001a3c <BME280_compensate_P_int64+0x578>)
 80018a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	17da      	asrs	r2, r3, #31
 80018ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80018ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018b0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80018b4:	f04f 0000 	mov.w	r0, #0
 80018b8:	f04f 0100 	mov.w	r1, #0
 80018bc:	0b50      	lsrs	r0, r2, #13
 80018be:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018c2:	1359      	asrs	r1, r3, #13
 80018c4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80018c8:	462b      	mov	r3, r5
 80018ca:	fb00 f203 	mul.w	r2, r0, r3
 80018ce:	4623      	mov	r3, r4
 80018d0:	fb03 f301 	mul.w	r3, r3, r1
 80018d4:	4413      	add	r3, r2
 80018d6:	4622      	mov	r2, r4
 80018d8:	fba2 2100 	umull	r2, r1, r2, r0
 80018dc:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80018e0:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80018e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80018e8:	4413      	add	r3, r2
 80018ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80018ee:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80018f2:	f04f 0000 	mov.w	r0, #0
 80018f6:	f04f 0100 	mov.w	r1, #0
 80018fa:	0b50      	lsrs	r0, r2, #13
 80018fc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001900:	1359      	asrs	r1, r3, #13
 8001902:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001906:	462b      	mov	r3, r5
 8001908:	fb00 f203 	mul.w	r2, r0, r3
 800190c:	4623      	mov	r3, r4
 800190e:	fb03 f301 	mul.w	r3, r3, r1
 8001912:	4413      	add	r3, r2
 8001914:	4622      	mov	r2, r4
 8001916:	fba2 2100 	umull	r2, r1, r2, r0
 800191a:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 800191e:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001922:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001926:	4413      	add	r3, r2
 8001928:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001938:	4621      	mov	r1, r4
 800193a:	0e4a      	lsrs	r2, r1, #25
 800193c:	4620      	mov	r0, r4
 800193e:	4629      	mov	r1, r5
 8001940:	460c      	mov	r4, r1
 8001942:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001946:	164b      	asrs	r3, r1, #25
 8001948:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 800194c:	4b3c      	ldr	r3, [pc, #240]	; (8001a40 <BME280_compensate_P_int64+0x57c>)
 800194e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001952:	b21b      	sxth	r3, r3
 8001954:	17da      	asrs	r2, r3, #31
 8001956:	663b      	str	r3, [r7, #96]	; 0x60
 8001958:	667a      	str	r2, [r7, #100]	; 0x64
 800195a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800195e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001962:	462a      	mov	r2, r5
 8001964:	fb02 f203 	mul.w	r2, r2, r3
 8001968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800196c:	4621      	mov	r1, r4
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	4413      	add	r3, r2
 8001974:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001978:	4621      	mov	r1, r4
 800197a:	fba2 2101 	umull	r2, r1, r2, r1
 800197e:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8001982:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001986:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800198a:	4413      	add	r3, r2
 800198c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800199c:	4621      	mov	r1, r4
 800199e:	0cca      	lsrs	r2, r1, #19
 80019a0:	4620      	mov	r0, r4
 80019a2:	4629      	mov	r1, r5
 80019a4:	460c      	mov	r4, r1
 80019a6:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 80019aa:	14cb      	asrs	r3, r1, #19
 80019ac:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 80019b0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80019b4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80019b8:	1884      	adds	r4, r0, r2
 80019ba:	65bc      	str	r4, [r7, #88]	; 0x58
 80019bc:	eb41 0303 	adc.w	r3, r1, r3
 80019c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019c2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80019c6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80019ca:	4621      	mov	r1, r4
 80019cc:	1889      	adds	r1, r1, r2
 80019ce:	6539      	str	r1, [r7, #80]	; 0x50
 80019d0:	4629      	mov	r1, r5
 80019d2:	eb43 0101 	adc.w	r1, r3, r1
 80019d6:	6579      	str	r1, [r7, #84]	; 0x54
 80019d8:	f04f 0000 	mov.w	r0, #0
 80019dc:	f04f 0100 	mov.w	r1, #0
 80019e0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80019e4:	4623      	mov	r3, r4
 80019e6:	0a18      	lsrs	r0, r3, #8
 80019e8:	462a      	mov	r2, r5
 80019ea:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80019ee:	462b      	mov	r3, r5
 80019f0:	1219      	asrs	r1, r3, #8
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <BME280_compensate_P_int64+0x580>)
 80019f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	17da      	asrs	r2, r3, #31
 80019fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80019fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001a0c:	464c      	mov	r4, r9
 8001a0e:	0123      	lsls	r3, r4, #4
 8001a10:	46c4      	mov	ip, r8
 8001a12:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001a16:	4644      	mov	r4, r8
 8001a18:	0122      	lsls	r2, r4, #4
 8001a1a:	1884      	adds	r4, r0, r2
 8001a1c:	603c      	str	r4, [r7, #0]
 8001a1e:	eb41 0303 	adc.w	r3, r1, r3
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a28:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001a2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001a36:	46bd      	mov	sp, r7
 8001a38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a3c:	2000022a 	.word	0x2000022a
 8001a40:	20000228 	.word	0x20000228
 8001a44:	20000226 	.word	0x20000226

08001a48 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001a50:	4b2c      	ldr	r3, [pc, #176]	; (8001b04 <bme280_compensate_H_int32+0xbc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001a58:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	039a      	lsls	r2, r3, #14
 8001a5e:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <bme280_compensate_H_int32+0xc0>)
 8001a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a64:	051b      	lsls	r3, r3, #20
 8001a66:	1ad2      	subs	r2, r2, r3
 8001a68:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <bme280_compensate_H_int32+0xc4>)
 8001a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	fb01 f303 	mul.w	r3, r1, r3
 8001a76:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001a7c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a7e:	4a24      	ldr	r2, [pc, #144]	; (8001b10 <bme280_compensate_H_int32+0xc8>)
 8001a80:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a84:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a8c:	1292      	asrs	r2, r2, #10
 8001a8e:	4921      	ldr	r1, [pc, #132]	; (8001b14 <bme280_compensate_H_int32+0xcc>)
 8001a90:	8809      	ldrh	r1, [r1, #0]
 8001a92:	4608      	mov	r0, r1
 8001a94:	68f9      	ldr	r1, [r7, #12]
 8001a96:	fb00 f101 	mul.w	r1, r0, r1
 8001a9a:	12c9      	asrs	r1, r1, #11
 8001a9c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001aa0:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001aa4:	1292      	asrs	r2, r2, #10
 8001aa6:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001aaa:	491b      	ldr	r1, [pc, #108]	; (8001b18 <bme280_compensate_H_int32+0xd0>)
 8001aac:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001ab0:	fb01 f202 	mul.w	r2, r1, r2
 8001ab4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001ab8:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001aba:	fb02 f303 	mul.w	r3, r2, r3
 8001abe:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	13db      	asrs	r3, r3, #15
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	13d2      	asrs	r2, r2, #15
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001ace:	4a13      	ldr	r2, [pc, #76]	; (8001b1c <bme280_compensate_H_int32+0xd4>)
 8001ad0:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001ad6:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001ae4:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001aec:	bfa8      	it	ge
 8001aee:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001af2:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	131b      	asrs	r3, r3, #12
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	20000234 	.word	0x20000234
 8001b08:	2000022e 	.word	0x2000022e
 8001b0c:	20000230 	.word	0x20000230
 8001b10:	20000232 	.word	0x20000232
 8001b14:	20000216 	.word	0x20000216
 8001b18:	2000022c 	.word	0x2000022c
 8001b1c:	20000214 	.word	0x20000214

08001b20 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
const char* BME280_Measure(void)
{
 8001b20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af06      	add	r7, sp, #24
    static char measurement[128];

    if (BMEReadRaw() == 0)
 8001b28:	f7ff fc3c 	bl	80013a4 <BMEReadRaw>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 8083 	bne.w	8001c3a <BME280_Measure+0x11a>
    {
        if (tRaw == 0x800000)
 8001b34:	4b43      	ldr	r3, [pc, #268]	; (8001c44 <BME280_Measure+0x124>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b3c:	d104      	bne.n	8001b48 <BME280_Measure+0x28>
        {
            Temperature = 0; // value in case temp measurement was disabled
 8001b3e:	4b42      	ldr	r3, [pc, #264]	; (8001c48 <BME280_Measure+0x128>)
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	e016      	b.n	8001b76 <BME280_Measure+0x56>
        }
        else
        {
            Temperature = (BME280_compensate_T_int32(tRaw)) / 100.0; // as per datasheet, the temp is x100
 8001b48:	4b3e      	ldr	r3, [pc, #248]	; (8001c44 <BME280_Measure+0x124>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fc79 	bl	8001444 <BME280_compensate_T_int32>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fc55 	bl	8000404 <__aeabi_i2d>
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <BME280_Measure+0x12c>)
 8001b60:	f7fe fde4 	bl	800072c <__aeabi_ddiv>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f7fe ffac 	bl	8000ac8 <__aeabi_d2f>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4a35      	ldr	r2, [pc, #212]	; (8001c48 <BME280_Measure+0x128>)
 8001b74:	6013      	str	r3, [r2, #0]
        }

        if (pRaw == 0x800000)
 8001b76:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <BME280_Measure+0x130>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b7e:	d104      	bne.n	8001b8a <BME280_Measure+0x6a>
        {
            Pressure = 0; // value in case temp measurement was disabled
 8001b80:	4b34      	ldr	r3, [pc, #208]	; (8001c54 <BME280_Measure+0x134>)
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	e016      	b.n	8001bb8 <BME280_Measure+0x98>
        }
        else
        {
#if SUPPORT_64BIT
            Pressure = (BME280_compensate_P_int64(pRaw)) / 256.0; // as per datasheet, the pressure is x256
 8001b8a:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <BME280_Measure+0x130>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fc98 	bl	80014c4 <BME280_compensate_P_int64>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fc24 	bl	80003e4 <__aeabi_ui2d>
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <BME280_Measure+0x138>)
 8001ba2:	f7fe fdc3 	bl	800072c <__aeabi_ddiv>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	f7fe ff8b 	bl	8000ac8 <__aeabi_d2f>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <BME280_Measure+0x134>)
 8001bb6:	6013      	str	r3, [r2, #0]
#elif SUPPORT_32BIT
            Pressure = (BME280_compensate_P_int32(pRaw)); // as per datasheet, the pressure is Pa
#endif
        }

        if (hRaw == 0x8000)
 8001bb8:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <BME280_Measure+0x13c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bc0:	d104      	bne.n	8001bcc <BME280_Measure+0xac>
        {
            Humidity = 0; // value in case temp measurement was disabled
 8001bc2:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <BME280_Measure+0x140>)
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	e016      	b.n	8001bfa <BME280_Measure+0xda>
        }
        else
        {
            Humidity = (bme280_compensate_H_int32(hRaw)) / 1024.0; // as per datasheet, the temp is x1024
 8001bcc:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <BME280_Measure+0x13c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff39 	bl	8001a48 <bme280_compensate_H_int32>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fc03 	bl	80003e4 <__aeabi_ui2d>
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <BME280_Measure+0x144>)
 8001be4:	f7fe fda2 	bl	800072c <__aeabi_ddiv>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7fe ff6a 	bl	8000ac8 <__aeabi_d2f>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4a1a      	ldr	r2, [pc, #104]	; (8001c60 <BME280_Measure+0x140>)
 8001bf8:	6013      	str	r3, [r2, #0]
        }

        // Format the measurement as a string
        snprintf(measurement, sizeof(measurement), "Temperature: %.2f C, Pressure: %.2f Pa, Humidity: %.2f%%\r\n", Temperature, Pressure, Humidity);
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <BME280_Measure+0x128>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fc12 	bl	8000428 <__aeabi_f2d>
 8001c04:	4604      	mov	r4, r0
 8001c06:	460d      	mov	r5, r1
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <BME280_Measure+0x134>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fc0b 	bl	8000428 <__aeabi_f2d>
 8001c12:	4680      	mov	r8, r0
 8001c14:	4689      	mov	r9, r1
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <BME280_Measure+0x140>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fc04 	bl	8000428 <__aeabi_f2d>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c28:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c2c:	e9cd 4500 	strd	r4, r5, [sp]
 8001c30:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <BME280_Measure+0x148>)
 8001c32:	2180      	movs	r1, #128	; 0x80
 8001c34:	480d      	ldr	r0, [pc, #52]	; (8001c6c <BME280_Measure+0x14c>)
 8001c36:	f006 f829 	bl	8007c8c <sniprintf>
    }

    return measurement;
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <BME280_Measure+0x14c>)
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c44:	20000204 	.word	0x20000204
 8001c48:	200003cc 	.word	0x200003cc
 8001c4c:	40590000 	.word	0x40590000
 8001c50:	20000208 	.word	0x20000208
 8001c54:	200003d0 	.word	0x200003d0
 8001c58:	40700000 	.word	0x40700000
 8001c5c:	2000020c 	.word	0x2000020c
 8001c60:	200003d4 	.word	0x200003d4
 8001c64:	40900000 	.word	0x40900000
 8001c68:	0800b630 	.word	0x0800b630
 8001c6c:	20000238 	.word	0x20000238

08001c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c74:	b088      	sub	sp, #32
 8001c76:	af06      	add	r7, sp, #24
int main(void)
 8001c78:	f107 0320 	add.w	r3, r7, #32
 8001c7c:	603b      	str	r3, [r7, #0]
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c7e:	f000 ffd9 	bl	8002c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c82:	f000 f901 	bl	8001e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c86:	f000 fa67 	bl	8002158 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001c8a:	f000 f959 	bl	8001f40 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001c8e:	f000 f995 	bl	8001fbc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001c92:	f000 fa37 	bl	8002104 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001c96:	f000 f9bf 	bl	8002018 <MX_TIM2_Init>
  SSD1306_Init();
 8001c9a:	f000 fa91 	bl	80021c0 <SSD1306_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1); //starts ldr sensor
 8001c9e:	484b      	ldr	r0, [pc, #300]	; (8001dcc <main+0x15c>)
 8001ca0:	f001 f926 	bl	8002ef0 <HAL_ADC_Start>
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2303      	movs	r3, #3
 8001cae:	2201      	movs	r2, #1
 8001cb0:	2105      	movs	r1, #5
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	f7ff faa0 	bl	80011f8 <BME280_Config>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4845      	ldr	r0, [pc, #276]	; (8001dd0 <main+0x160>)
 8001cbc:	f004 f87c 	bl	8005db8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001cc0:	4843      	ldr	r0, [pc, #268]	; (8001dd0 <main+0x160>)
 8001cc2:	f003 ffcf 	bl	8005c64 <HAL_TIM_Base_Start_IT>
	         // Linear interpolation
	         // Adjust the formula based on your calibration data and curve fitting
		  float lux = (adcValue - adcValues[0]) * (luxValues[1] - luxValues[0]) / (adcValues[1] - adcValues[0]) + luxValues[0];
		  return lux;
	  	  }
  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); //starts converting adc values
 8001cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8001cca:	4840      	ldr	r0, [pc, #256]	; (8001dcc <main+0x15c>)
 8001ccc:	f001 f9be 	bl	800304c <HAL_ADC_PollForConversion>
  	  raw_ldr=HAL_ADC_GetValue(&hadc1); //receives ldr values and store in raw_ldr
 8001cd0:	483e      	ldr	r0, [pc, #248]	; (8001dcc <main+0x15c>)
 8001cd2:	f001 fac1 	bl	8003258 <HAL_ADC_GetValue>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	4b3e      	ldr	r3, [pc, #248]	; (8001dd4 <main+0x164>)
 8001cdc:	801a      	strh	r2, [r3, #0]

  	  //-----------------------------------BME-------------------------------//
  	  const char* measurement = BME280_Measure();
 8001cde:	f7ff ff1f 	bl	8001b20 <BME280_Measure>
 8001ce2:	6078      	str	r0, [r7, #4]
  	  strcpy(bme, measurement);
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	483c      	ldr	r0, [pc, #240]	; (8001dd8 <main+0x168>)
 8001ce8:	f006 f8e7 	bl	8007eba <strcpy>
//----------------------------------OLED------------------------------------------------//
  	sprintf(ldr_string, "LDR %.2f LUX ", lux);
 8001cec:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <main+0x16c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fb99 	bl	8000428 <__aeabi_f2d>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4939      	ldr	r1, [pc, #228]	; (8001de0 <main+0x170>)
 8001cfc:	4839      	ldr	r0, [pc, #228]	; (8001de4 <main+0x174>)
 8001cfe:	f005 fff9 	bl	8007cf4 <siprintf>
  	sprintf(temp_string, "Temperature %.2f C ", Temperature);
 8001d02:	4b39      	ldr	r3, [pc, #228]	; (8001de8 <main+0x178>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fb8e 	bl	8000428 <__aeabi_f2d>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4936      	ldr	r1, [pc, #216]	; (8001dec <main+0x17c>)
 8001d12:	4837      	ldr	r0, [pc, #220]	; (8001df0 <main+0x180>)
 8001d14:	f005 ffee 	bl	8007cf4 <siprintf>
  	sprintf(humidity_string, "Humidity %.2f", Humidity);
 8001d18:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <main+0x184>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fb83 	bl	8000428 <__aeabi_f2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4934      	ldr	r1, [pc, #208]	; (8001df8 <main+0x188>)
 8001d28:	4834      	ldr	r0, [pc, #208]	; (8001dfc <main+0x18c>)
 8001d2a:	f005 ffe3 	bl	8007cf4 <siprintf>

  	  SSD1306_GotoXY (0, 0);
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2000      	movs	r0, #0
 8001d32:	f000 fbad 	bl	8002490 <SSD1306_GotoXY>
  	  SSD1306_Puts (ldr_string, &Font_7x10, 1);
 8001d36:	2201      	movs	r2, #1
 8001d38:	4931      	ldr	r1, [pc, #196]	; (8001e00 <main+0x190>)
 8001d3a:	482a      	ldr	r0, [pc, #168]	; (8001de4 <main+0x174>)
 8001d3c:	f000 fc3e 	bl	80025bc <SSD1306_Puts>
  	  SSD1306_GotoXY (0, 20);
 8001d40:	2114      	movs	r1, #20
 8001d42:	2000      	movs	r0, #0
 8001d44:	f000 fba4 	bl	8002490 <SSD1306_GotoXY>
  	  SSD1306_Puts (temp_string, &Font_7x10, 1);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	492d      	ldr	r1, [pc, #180]	; (8001e00 <main+0x190>)
 8001d4c:	4828      	ldr	r0, [pc, #160]	; (8001df0 <main+0x180>)
 8001d4e:	f000 fc35 	bl	80025bc <SSD1306_Puts>
  	  SSD1306_GotoXY (0, 40);
 8001d52:	2128      	movs	r1, #40	; 0x28
 8001d54:	2000      	movs	r0, #0
 8001d56:	f000 fb9b 	bl	8002490 <SSD1306_GotoXY>
  	  SSD1306_Puts (humidity_string, &Font_7x10, 1);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4928      	ldr	r1, [pc, #160]	; (8001e00 <main+0x190>)
 8001d5e:	4827      	ldr	r0, [pc, #156]	; (8001dfc <main+0x18c>)
 8001d60:	f000 fc2c 	bl	80025bc <SSD1306_Puts>
  	  SSD1306_UpdateScreen();
 8001d64:	f000 faf0 	bl	8002348 <SSD1306_UpdateScreen>
//--------------------------UART-FINAL-CSV-----------------------------//
  	sprintf(msg_tx, "%.2f,%.2f,%.2f,%s\r\n", lux, Temperature, Humidity, channel_id);//converting values into a string (CSV) format
 8001d68:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <main+0x16c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fb5b 	bl	8000428 <__aeabi_f2d>
 8001d72:	4680      	mov	r8, r0
 8001d74:	4689      	mov	r9, r1
 8001d76:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <main+0x178>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fb54 	bl	8000428 <__aeabi_f2d>
 8001d80:	4604      	mov	r4, r0
 8001d82:	460d      	mov	r5, r1
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <main+0x184>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fb4d 	bl	8000428 <__aeabi_f2d>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	491c      	ldr	r1, [pc, #112]	; (8001e04 <main+0x194>)
 8001d94:	9104      	str	r1, [sp, #16]
 8001d96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d9a:	e9cd 4500 	strd	r4, r5, [sp]
 8001d9e:	4642      	mov	r2, r8
 8001da0:	464b      	mov	r3, r9
 8001da2:	4919      	ldr	r1, [pc, #100]	; (8001e08 <main+0x198>)
 8001da4:	4819      	ldr	r0, [pc, #100]	; (8001e0c <main+0x19c>)
 8001da6:	f005 ffa5 	bl	8007cf4 <siprintf>
  	  HAL_UART_Transmit(&huart2, (uint8_t*)msg_tx, strlen(msg_tx), HAL_MAX_DELAY);
 8001daa:	4818      	ldr	r0, [pc, #96]	; (8001e0c <main+0x19c>)
 8001dac:	f7fe f9d0 	bl	8000150 <strlen>
 8001db0:	4603      	mov	r3, r0
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
 8001db8:	4914      	ldr	r1, [pc, #80]	; (8001e0c <main+0x19c>)
 8001dba:	4815      	ldr	r0, [pc, #84]	; (8001e10 <main+0x1a0>)
 8001dbc:	f004 feb8 	bl	8006b30 <HAL_UART_Transmit>
  	  HAL_Delay(3000);
 8001dc0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001dc4:	f000 ff98 	bl	8002cf8 <HAL_Delay>
  {
 8001dc8:	e77d      	b.n	8001cc6 <main+0x56>
 8001dca:	bf00      	nop
 8001dcc:	200002b8 	.word	0x200002b8
 8001dd0:	2000033c 	.word	0x2000033c
 8001dd4:	200003dc 	.word	0x200003dc
 8001dd8:	200003e0 	.word	0x200003e0
 8001ddc:	200003d8 	.word	0x200003d8
 8001de0:	0800b66c 	.word	0x0800b66c
 8001de4:	200004b0 	.word	0x200004b0
 8001de8:	200003cc 	.word	0x200003cc
 8001dec:	0800b67c 	.word	0x0800b67c
 8001df0:	200004c4 	.word	0x200004c4
 8001df4:	200003d4 	.word	0x200003d4
 8001df8:	0800b690 	.word	0x0800b690
 8001dfc:	200004d8 	.word	0x200004d8
 8001e00:	20000000 	.word	0x20000000
 8001e04:	20000008 	.word	0x20000008
 8001e08:	0800b6a0 	.word	0x0800b6a0
 8001e0c:	20000460 	.word	0x20000460
 8001e10:	20000384 	.word	0x20000384

08001e14 <HAL_TIM_PeriodElapsedCallback>:
    }
  /* USER CODE END 3 */
}
//-------------------------------TIMER INTERRUPT-BUZZER----------------------------//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e24:	d124      	bne.n	8001e70 <HAL_TIM_PeriodElapsedCallback+0x5c>
  {
    /* Check if the temperature is above 30 degrees */
    if (Temperature > 30)
 8001e26:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4914      	ldr	r1, [pc, #80]	; (8001e7c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe ff07 	bl	8000c40 <__aeabi_fcmpgt>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d012      	beq.n	8001e5e <HAL_TIM_PeriodElapsedCallback+0x4a>
    {
      /* Gradually increase the duty cycle */
      if (buzzerDutyCycle < 255)
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2bff      	cmp	r3, #255	; 0xff
 8001e40:	d016      	beq.n	8001e70 <HAL_TIM_PeriodElapsedCallback+0x5c>
      {
        buzzerDutyCycle += 20;  // Increase the duty cycle by 20
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	3314      	adds	r3, #20
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001e4e:	701a      	strb	r2, [r3, #0]
        htim2.Instance->CCR1 = buzzerDutyCycle;  // Set the duty cycle
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	635a      	str	r2, [r3, #52]	; 0x34
      /* Reset the duty cycle when temperature is below 30 */
      buzzerDutyCycle = 0;
      htim2.Instance->CCR1 = buzzerDutyCycle;  // Set the duty cycle to 0
    }
  }
}
 8001e5c:	e008      	b.n	8001e70 <HAL_TIM_PeriodElapsedCallback+0x5c>
      buzzerDutyCycle = 0;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
      htim2.Instance->CCR1 = buzzerDutyCycle;  // Set the duty cycle to 0
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200003cc 	.word	0x200003cc
 8001e7c:	41f00000 	.word	0x41f00000
 8001e80:	200003de 	.word	0x200003de
 8001e84:	2000033c 	.word	0x2000033c

08001e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b094      	sub	sp, #80	; 0x50
 8001e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e92:	2228      	movs	r2, #40	; 0x28
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f005 ff8f 	bl	8007dba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ebc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ed2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ed4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f003 f8f4 	bl	80050cc <HAL_RCC_OscConfig>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001eea:	f000 f963 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eee:	230f      	movs	r3, #15
 8001ef0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001efe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	2102      	movs	r1, #2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f003 fb60 	bl	80055d0 <HAL_RCC_ClockConfig>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001f16:	f000 f94d 	bl	80021b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f22:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	4618      	mov	r0, r3
 8001f28:	f003 fce0 	bl	80058ec <HAL_RCCEx_PeriphCLKConfig>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001f32:	f000 f93f 	bl	80021b4 <Error_Handler>
  }
}
 8001f36:	bf00      	nop
 8001f38:	3750      	adds	r7, #80	; 0x50
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <MX_ADC1_Init+0x74>)
 8001f52:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <MX_ADC1_Init+0x78>)
 8001f54:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <MX_ADC1_Init+0x74>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f5c:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <MX_ADC1_Init+0x74>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f62:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <MX_ADC1_Init+0x74>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <MX_ADC1_Init+0x74>)
 8001f6a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f70:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <MX_ADC1_Init+0x74>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <MX_ADC1_Init+0x74>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f7c:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <MX_ADC1_Init+0x74>)
 8001f7e:	f000 fedf 	bl	8002d40 <HAL_ADC_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001f88:	f000 f914 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f90:	2301      	movs	r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <MX_ADC1_Init+0x74>)
 8001f9e:	f001 f967 	bl	8003270 <HAL_ADC_ConfigChannel>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001fa8:	f000 f904 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200002b8 	.word	0x200002b8
 8001fb8:	40012400 	.word	0x40012400

08001fbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <MX_I2C1_Init+0x50>)
 8001fc2:	4a13      	ldr	r2, [pc, #76]	; (8002010 <MX_I2C1_Init+0x54>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <MX_I2C1_Init+0x50>)
 8001fc8:	4a12      	ldr	r2, [pc, #72]	; (8002014 <MX_I2C1_Init+0x58>)
 8001fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <MX_I2C1_Init+0x50>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <MX_I2C1_Init+0x50>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <MX_I2C1_Init+0x50>)
 8001fda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <MX_I2C1_Init+0x50>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <MX_I2C1_Init+0x50>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <MX_I2C1_Init+0x50>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <MX_I2C1_Init+0x50>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff8:	4804      	ldr	r0, [pc, #16]	; (800200c <MX_I2C1_Init+0x50>)
 8001ffa:	f001 fd5f 	bl	8003abc <HAL_I2C_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002004:	f000 f8d6 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}
 800200c:	200002e8 	.word	0x200002e8
 8002010:	40005400 	.word	0x40005400
 8002014:	00061a80 	.word	0x00061a80

08002018 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08e      	sub	sp, #56	; 0x38
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202c:	f107 0320 	add.w	r3, r7, #32
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
 8002044:	615a      	str	r2, [r3, #20]
 8002046:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002048:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <MX_TIM2_Init+0xe8>)
 800204a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800204e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1107-1;
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <MX_TIM2_Init+0xe8>)
 8002052:	f240 4252 	movw	r2, #1106	; 0x452
 8002056:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002058:	4b29      	ldr	r3, [pc, #164]	; (8002100 <MX_TIM2_Init+0xe8>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255-1;
 800205e:	4b28      	ldr	r3, [pc, #160]	; (8002100 <MX_TIM2_Init+0xe8>)
 8002060:	22fe      	movs	r2, #254	; 0xfe
 8002062:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002064:	4b26      	ldr	r3, [pc, #152]	; (8002100 <MX_TIM2_Init+0xe8>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206a:	4b25      	ldr	r3, [pc, #148]	; (8002100 <MX_TIM2_Init+0xe8>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002070:	4823      	ldr	r0, [pc, #140]	; (8002100 <MX_TIM2_Init+0xe8>)
 8002072:	f003 fda7 	bl	8005bc4 <HAL_TIM_Base_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800207c:	f000 f89a 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002086:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800208a:	4619      	mov	r1, r3
 800208c:	481c      	ldr	r0, [pc, #112]	; (8002100 <MX_TIM2_Init+0xe8>)
 800208e:	f004 f8ff 	bl	8006290 <HAL_TIM_ConfigClockSource>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002098:	f000 f88c 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800209c:	4818      	ldr	r0, [pc, #96]	; (8002100 <MX_TIM2_Init+0xe8>)
 800209e:	f003 fe33 	bl	8005d08 <HAL_TIM_PWM_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80020a8:	f000 f884 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020b4:	f107 0320 	add.w	r3, r7, #32
 80020b8:	4619      	mov	r1, r3
 80020ba:	4811      	ldr	r0, [pc, #68]	; (8002100 <MX_TIM2_Init+0xe8>)
 80020bc:	f004 fc78 	bl	80069b0 <HAL_TIMEx_MasterConfigSynchronization>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80020c6:	f000 f875 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ca:	2360      	movs	r3, #96	; 0x60
 80020cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	2200      	movs	r2, #0
 80020de:	4619      	mov	r1, r3
 80020e0:	4807      	ldr	r0, [pc, #28]	; (8002100 <MX_TIM2_Init+0xe8>)
 80020e2:	f004 f813 	bl	800610c <HAL_TIM_PWM_ConfigChannel>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80020ec:	f000 f862 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020f0:	4803      	ldr	r0, [pc, #12]	; (8002100 <MX_TIM2_Init+0xe8>)
 80020f2:	f000 fbf1 	bl	80028d8 <HAL_TIM_MspPostInit>

}
 80020f6:	bf00      	nop
 80020f8:	3738      	adds	r7, #56	; 0x38
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	2000033c 	.word	0x2000033c

08002104 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <MX_USART2_UART_Init+0x4c>)
 800210a:	4a12      	ldr	r2, [pc, #72]	; (8002154 <MX_USART2_UART_Init+0x50>)
 800210c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <MX_USART2_UART_Init+0x4c>)
 8002110:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002114:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <MX_USART2_UART_Init+0x4c>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <MX_USART2_UART_Init+0x4c>)
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <MX_USART2_UART_Init+0x4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <MX_USART2_UART_Init+0x4c>)
 800212a:	220c      	movs	r2, #12
 800212c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <MX_USART2_UART_Init+0x4c>)
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <MX_USART2_UART_Init+0x4c>)
 8002136:	2200      	movs	r2, #0
 8002138:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800213a:	4805      	ldr	r0, [pc, #20]	; (8002150 <MX_USART2_UART_Init+0x4c>)
 800213c:	f004 fca8 	bl	8006a90 <HAL_UART_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002146:	f000 f835 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000384 	.word	0x20000384
 8002154:	40004400 	.word	0x40004400

08002158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <MX_GPIO_Init+0x58>)
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <MX_GPIO_Init+0x58>)
 8002164:	f043 0320 	orr.w	r3, r3, #32
 8002168:	6193      	str	r3, [r2, #24]
 800216a:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <MX_GPIO_Init+0x58>)
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <MX_GPIO_Init+0x58>)
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	4a0d      	ldr	r2, [pc, #52]	; (80021b0 <MX_GPIO_Init+0x58>)
 800217c:	f043 0304 	orr.w	r3, r3, #4
 8002180:	6193      	str	r3, [r2, #24]
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <MX_GPIO_Init+0x58>)
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <MX_GPIO_Init+0x58>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <MX_GPIO_Init+0x58>)
 8002194:	f043 0308 	orr.w	r3, r3, #8
 8002198:	6193      	str	r3, [r2, #24]
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <MX_GPIO_Init+0x58>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	40021000 	.word	0x40021000

080021b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021bc:	e7fe      	b.n	80021bc <Error_Handler+0x8>
	...

080021c0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80021c6:	f000 fa1f 	bl	8002608 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80021ca:	f644 6320 	movw	r3, #20000	; 0x4e20
 80021ce:	2201      	movs	r2, #1
 80021d0:	2178      	movs	r1, #120	; 0x78
 80021d2:	485b      	ldr	r0, [pc, #364]	; (8002340 <SSD1306_Init+0x180>)
 80021d4:	f002 fa16 	bl	8004604 <HAL_I2C_IsDeviceReady>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	e0a9      	b.n	8002336 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80021e2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80021e6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021e8:	e002      	b.n	80021f0 <SSD1306_Init+0x30>
		p--;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f9      	bne.n	80021ea <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80021f6:	22ae      	movs	r2, #174	; 0xae
 80021f8:	2100      	movs	r1, #0
 80021fa:	2078      	movs	r0, #120	; 0x78
 80021fc:	f000 fa7e 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002200:	2220      	movs	r2, #32
 8002202:	2100      	movs	r1, #0
 8002204:	2078      	movs	r0, #120	; 0x78
 8002206:	f000 fa79 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800220a:	2210      	movs	r2, #16
 800220c:	2100      	movs	r1, #0
 800220e:	2078      	movs	r0, #120	; 0x78
 8002210:	f000 fa74 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002214:	22b0      	movs	r2, #176	; 0xb0
 8002216:	2100      	movs	r1, #0
 8002218:	2078      	movs	r0, #120	; 0x78
 800221a:	f000 fa6f 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800221e:	22c8      	movs	r2, #200	; 0xc8
 8002220:	2100      	movs	r1, #0
 8002222:	2078      	movs	r0, #120	; 0x78
 8002224:	f000 fa6a 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002228:	2200      	movs	r2, #0
 800222a:	2100      	movs	r1, #0
 800222c:	2078      	movs	r0, #120	; 0x78
 800222e:	f000 fa65 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002232:	2210      	movs	r2, #16
 8002234:	2100      	movs	r1, #0
 8002236:	2078      	movs	r0, #120	; 0x78
 8002238:	f000 fa60 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800223c:	2240      	movs	r2, #64	; 0x40
 800223e:	2100      	movs	r1, #0
 8002240:	2078      	movs	r0, #120	; 0x78
 8002242:	f000 fa5b 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002246:	2281      	movs	r2, #129	; 0x81
 8002248:	2100      	movs	r1, #0
 800224a:	2078      	movs	r0, #120	; 0x78
 800224c:	f000 fa56 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002250:	22ff      	movs	r2, #255	; 0xff
 8002252:	2100      	movs	r1, #0
 8002254:	2078      	movs	r0, #120	; 0x78
 8002256:	f000 fa51 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800225a:	22a1      	movs	r2, #161	; 0xa1
 800225c:	2100      	movs	r1, #0
 800225e:	2078      	movs	r0, #120	; 0x78
 8002260:	f000 fa4c 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002264:	22a6      	movs	r2, #166	; 0xa6
 8002266:	2100      	movs	r1, #0
 8002268:	2078      	movs	r0, #120	; 0x78
 800226a:	f000 fa47 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800226e:	22a8      	movs	r2, #168	; 0xa8
 8002270:	2100      	movs	r1, #0
 8002272:	2078      	movs	r0, #120	; 0x78
 8002274:	f000 fa42 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002278:	223f      	movs	r2, #63	; 0x3f
 800227a:	2100      	movs	r1, #0
 800227c:	2078      	movs	r0, #120	; 0x78
 800227e:	f000 fa3d 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002282:	22a4      	movs	r2, #164	; 0xa4
 8002284:	2100      	movs	r1, #0
 8002286:	2078      	movs	r0, #120	; 0x78
 8002288:	f000 fa38 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800228c:	22d3      	movs	r2, #211	; 0xd3
 800228e:	2100      	movs	r1, #0
 8002290:	2078      	movs	r0, #120	; 0x78
 8002292:	f000 fa33 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002296:	2200      	movs	r2, #0
 8002298:	2100      	movs	r1, #0
 800229a:	2078      	movs	r0, #120	; 0x78
 800229c:	f000 fa2e 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80022a0:	22d5      	movs	r2, #213	; 0xd5
 80022a2:	2100      	movs	r1, #0
 80022a4:	2078      	movs	r0, #120	; 0x78
 80022a6:	f000 fa29 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80022aa:	22f0      	movs	r2, #240	; 0xf0
 80022ac:	2100      	movs	r1, #0
 80022ae:	2078      	movs	r0, #120	; 0x78
 80022b0:	f000 fa24 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80022b4:	22d9      	movs	r2, #217	; 0xd9
 80022b6:	2100      	movs	r1, #0
 80022b8:	2078      	movs	r0, #120	; 0x78
 80022ba:	f000 fa1f 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80022be:	2222      	movs	r2, #34	; 0x22
 80022c0:	2100      	movs	r1, #0
 80022c2:	2078      	movs	r0, #120	; 0x78
 80022c4:	f000 fa1a 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80022c8:	22da      	movs	r2, #218	; 0xda
 80022ca:	2100      	movs	r1, #0
 80022cc:	2078      	movs	r0, #120	; 0x78
 80022ce:	f000 fa15 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80022d2:	2212      	movs	r2, #18
 80022d4:	2100      	movs	r1, #0
 80022d6:	2078      	movs	r0, #120	; 0x78
 80022d8:	f000 fa10 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80022dc:	22db      	movs	r2, #219	; 0xdb
 80022de:	2100      	movs	r1, #0
 80022e0:	2078      	movs	r0, #120	; 0x78
 80022e2:	f000 fa0b 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80022e6:	2220      	movs	r2, #32
 80022e8:	2100      	movs	r1, #0
 80022ea:	2078      	movs	r0, #120	; 0x78
 80022ec:	f000 fa06 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80022f0:	228d      	movs	r2, #141	; 0x8d
 80022f2:	2100      	movs	r1, #0
 80022f4:	2078      	movs	r0, #120	; 0x78
 80022f6:	f000 fa01 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80022fa:	2214      	movs	r2, #20
 80022fc:	2100      	movs	r1, #0
 80022fe:	2078      	movs	r0, #120	; 0x78
 8002300:	f000 f9fc 	bl	80026fc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002304:	22af      	movs	r2, #175	; 0xaf
 8002306:	2100      	movs	r1, #0
 8002308:	2078      	movs	r0, #120	; 0x78
 800230a:	f000 f9f7 	bl	80026fc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800230e:	222e      	movs	r2, #46	; 0x2e
 8002310:	2100      	movs	r1, #0
 8002312:	2078      	movs	r0, #120	; 0x78
 8002314:	f000 f9f2 	bl	80026fc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002318:	2000      	movs	r0, #0
 800231a:	f000 f843 	bl	80023a4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800231e:	f000 f813 	bl	8002348 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <SSD1306_Init+0x184>)
 8002324:	2200      	movs	r2, #0
 8002326:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <SSD1306_Init+0x184>)
 800232a:	2200      	movs	r2, #0
 800232c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <SSD1306_Init+0x184>)
 8002330:	2201      	movs	r2, #1
 8002332:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002334:	2301      	movs	r3, #1
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	200002e8 	.word	0x200002e8
 8002344:	200008ec 	.word	0x200008ec

08002348 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800234e:	2300      	movs	r3, #0
 8002350:	71fb      	strb	r3, [r7, #7]
 8002352:	e01d      	b.n	8002390 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	3b50      	subs	r3, #80	; 0x50
 8002358:	b2db      	uxtb	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	2100      	movs	r1, #0
 800235e:	2078      	movs	r0, #120	; 0x78
 8002360:	f000 f9cc 	bl	80026fc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002364:	2200      	movs	r2, #0
 8002366:	2100      	movs	r1, #0
 8002368:	2078      	movs	r0, #120	; 0x78
 800236a:	f000 f9c7 	bl	80026fc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800236e:	2210      	movs	r2, #16
 8002370:	2100      	movs	r1, #0
 8002372:	2078      	movs	r0, #120	; 0x78
 8002374:	f000 f9c2 	bl	80026fc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	01db      	lsls	r3, r3, #7
 800237c:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <SSD1306_UpdateScreen+0x58>)
 800237e:	441a      	add	r2, r3
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	2140      	movs	r1, #64	; 0x40
 8002384:	2078      	movs	r0, #120	; 0x78
 8002386:	f000 f953 	bl	8002630 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	3301      	adds	r3, #1
 800238e:	71fb      	strb	r3, [r7, #7]
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	2b07      	cmp	r3, #7
 8002394:	d9de      	bls.n	8002354 <SSD1306_UpdateScreen+0xc>
	}
}
 8002396:	bf00      	nop
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	200004ec 	.word	0x200004ec

080023a4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <SSD1306_Fill+0x14>
 80023b4:	2300      	movs	r3, #0
 80023b6:	e000      	b.n	80023ba <SSD1306_Fill+0x16>
 80023b8:	23ff      	movs	r3, #255	; 0xff
 80023ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023be:	4619      	mov	r1, r3
 80023c0:	4803      	ldr	r0, [pc, #12]	; (80023d0 <SSD1306_Fill+0x2c>)
 80023c2:	f005 fcfa 	bl	8007dba <memset>
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200004ec 	.word	0x200004ec

080023d4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	80fb      	strh	r3, [r7, #6]
 80023de:	460b      	mov	r3, r1
 80023e0:	80bb      	strh	r3, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	70fb      	strb	r3, [r7, #3]
	if (
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	2b7f      	cmp	r3, #127	; 0x7f
 80023ea:	d848      	bhi.n	800247e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80023ec:	88bb      	ldrh	r3, [r7, #4]
 80023ee:	2b3f      	cmp	r3, #63	; 0x3f
 80023f0:	d845      	bhi.n	800247e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80023f2:	4b25      	ldr	r3, [pc, #148]	; (8002488 <SSD1306_DrawPixel+0xb4>)
 80023f4:	791b      	ldrb	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d11a      	bne.n	8002444 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800240e:	88fa      	ldrh	r2, [r7, #6]
 8002410:	88bb      	ldrh	r3, [r7, #4]
 8002412:	08db      	lsrs	r3, r3, #3
 8002414:	b298      	uxth	r0, r3
 8002416:	4603      	mov	r3, r0
 8002418:	01db      	lsls	r3, r3, #7
 800241a:	4413      	add	r3, r2
 800241c:	4a1b      	ldr	r2, [pc, #108]	; (800248c <SSD1306_DrawPixel+0xb8>)
 800241e:	5cd3      	ldrb	r3, [r2, r3]
 8002420:	b25a      	sxtb	r2, r3
 8002422:	88bb      	ldrh	r3, [r7, #4]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	2101      	movs	r1, #1
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	b25b      	sxtb	r3, r3
 8002430:	4313      	orrs	r3, r2
 8002432:	b259      	sxtb	r1, r3
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	4603      	mov	r3, r0
 8002438:	01db      	lsls	r3, r3, #7
 800243a:	4413      	add	r3, r2
 800243c:	b2c9      	uxtb	r1, r1
 800243e:	4a13      	ldr	r2, [pc, #76]	; (800248c <SSD1306_DrawPixel+0xb8>)
 8002440:	54d1      	strb	r1, [r2, r3]
 8002442:	e01d      	b.n	8002480 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002444:	88fa      	ldrh	r2, [r7, #6]
 8002446:	88bb      	ldrh	r3, [r7, #4]
 8002448:	08db      	lsrs	r3, r3, #3
 800244a:	b298      	uxth	r0, r3
 800244c:	4603      	mov	r3, r0
 800244e:	01db      	lsls	r3, r3, #7
 8002450:	4413      	add	r3, r2
 8002452:	4a0e      	ldr	r2, [pc, #56]	; (800248c <SSD1306_DrawPixel+0xb8>)
 8002454:	5cd3      	ldrb	r3, [r2, r3]
 8002456:	b25a      	sxtb	r2, r3
 8002458:	88bb      	ldrh	r3, [r7, #4]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	2101      	movs	r1, #1
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	b25b      	sxtb	r3, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	b25b      	sxtb	r3, r3
 800246a:	4013      	ands	r3, r2
 800246c:	b259      	sxtb	r1, r3
 800246e:	88fa      	ldrh	r2, [r7, #6]
 8002470:	4603      	mov	r3, r0
 8002472:	01db      	lsls	r3, r3, #7
 8002474:	4413      	add	r3, r2
 8002476:	b2c9      	uxtb	r1, r1
 8002478:	4a04      	ldr	r2, [pc, #16]	; (800248c <SSD1306_DrawPixel+0xb8>)
 800247a:	54d1      	strb	r1, [r2, r3]
 800247c:	e000      	b.n	8002480 <SSD1306_DrawPixel+0xac>
		return;
 800247e:	bf00      	nop
	}
}
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	200008ec 	.word	0x200008ec
 800248c:	200004ec 	.word	0x200004ec

08002490 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	460a      	mov	r2, r1
 800249a:	80fb      	strh	r3, [r7, #6]
 800249c:	4613      	mov	r3, r2
 800249e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80024a0:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <SSD1306_GotoXY+0x28>)
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80024a6:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <SSD1306_GotoXY+0x28>)
 80024a8:	88bb      	ldrh	r3, [r7, #4]
 80024aa:	8053      	strh	r3, [r2, #2]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	200008ec 	.word	0x200008ec

080024bc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	71fb      	strb	r3, [r7, #7]
 80024c8:	4613      	mov	r3, r2
 80024ca:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80024cc:	4b3a      	ldr	r3, [pc, #232]	; (80025b8 <SSD1306_Putc+0xfc>)
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	4413      	add	r3, r2
	if (
 80024d8:	2b7f      	cmp	r3, #127	; 0x7f
 80024da:	dc07      	bgt.n	80024ec <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80024dc:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <SSD1306_Putc+0xfc>)
 80024de:	885b      	ldrh	r3, [r3, #2]
 80024e0:	461a      	mov	r2, r3
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	785b      	ldrb	r3, [r3, #1]
 80024e6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80024e8:	2b3f      	cmp	r3, #63	; 0x3f
 80024ea:	dd01      	ble.n	80024f0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e05e      	b.n	80025ae <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	e04b      	b.n	800258e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	3b20      	subs	r3, #32
 80024fe:	6839      	ldr	r1, [r7, #0]
 8002500:	7849      	ldrb	r1, [r1, #1]
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4619      	mov	r1, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	440b      	add	r3, r1
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	881b      	ldrh	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	e030      	b.n	800257c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d010      	beq.n	800254c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800252a:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <SSD1306_Putc+0xfc>)
 800252c:	881a      	ldrh	r2, [r3, #0]
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	b29b      	uxth	r3, r3
 8002532:	4413      	add	r3, r2
 8002534:	b298      	uxth	r0, r3
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <SSD1306_Putc+0xfc>)
 8002538:	885a      	ldrh	r2, [r3, #2]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	b29b      	uxth	r3, r3
 800253e:	4413      	add	r3, r2
 8002540:	b29b      	uxth	r3, r3
 8002542:	79ba      	ldrb	r2, [r7, #6]
 8002544:	4619      	mov	r1, r3
 8002546:	f7ff ff45 	bl	80023d4 <SSD1306_DrawPixel>
 800254a:	e014      	b.n	8002576 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800254c:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <SSD1306_Putc+0xfc>)
 800254e:	881a      	ldrh	r2, [r3, #0]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	b29b      	uxth	r3, r3
 8002554:	4413      	add	r3, r2
 8002556:	b298      	uxth	r0, r3
 8002558:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <SSD1306_Putc+0xfc>)
 800255a:	885a      	ldrh	r2, [r3, #2]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	b29b      	uxth	r3, r3
 8002560:	4413      	add	r3, r2
 8002562:	b299      	uxth	r1, r3
 8002564:	79bb      	ldrb	r3, [r7, #6]
 8002566:	2b00      	cmp	r3, #0
 8002568:	bf0c      	ite	eq
 800256a:	2301      	moveq	r3, #1
 800256c:	2300      	movne	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	f7ff ff2f 	bl	80023d4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	3301      	adds	r3, #1
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4293      	cmp	r3, r2
 8002586:	d3c8      	bcc.n	800251a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3301      	adds	r3, #1
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	785b      	ldrb	r3, [r3, #1]
 8002592:	461a      	mov	r2, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	4293      	cmp	r3, r2
 8002598:	d3ad      	bcc.n	80024f6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <SSD1306_Putc+0xfc>)
 800259c:	881a      	ldrh	r2, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <SSD1306_Putc+0xfc>)
 80025aa:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80025ac:	79fb      	ldrb	r3, [r7, #7]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200008ec 	.word	0x200008ec

080025bc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	4613      	mov	r3, r2
 80025c8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80025ca:	e012      	b.n	80025f2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	79fa      	ldrb	r2, [r7, #7]
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff71 	bl	80024bc <SSD1306_Putc>
 80025da:	4603      	mov	r3, r0
 80025dc:	461a      	mov	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d002      	beq.n	80025ec <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	e008      	b.n	80025fe <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3301      	adds	r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1e8      	bne.n	80025cc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	781b      	ldrb	r3, [r3, #0]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800260e:	4b07      	ldr	r3, [pc, #28]	; (800262c <ssd1306_I2C_Init+0x24>)
 8002610:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002612:	e002      	b.n	800261a <ssd1306_I2C_Init+0x12>
		p--;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3b01      	subs	r3, #1
 8002618:	607b      	str	r3, [r7, #4]
	while(p>0)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f9      	bne.n	8002614 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	0003d090 	.word	0x0003d090

08002630 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b0c7      	sub	sp, #284	; 0x11c
 8002634:	af02      	add	r7, sp, #8
 8002636:	4604      	mov	r4, r0
 8002638:	4608      	mov	r0, r1
 800263a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800263e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8002642:	600a      	str	r2, [r1, #0]
 8002644:	4619      	mov	r1, r3
 8002646:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800264a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800264e:	4622      	mov	r2, r4
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002656:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800265a:	4602      	mov	r2, r0
 800265c:	701a      	strb	r2, [r3, #0]
 800265e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002662:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002666:	460a      	mov	r2, r1
 8002668:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800266a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800266e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002672:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002676:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800267a:	7812      	ldrb	r2, [r2, #0]
 800267c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800267e:	2300      	movs	r3, #0
 8002680:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002684:	e015      	b.n	80026b2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002686:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800268a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800268e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	441a      	add	r2, r3
 8002696:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800269a:	3301      	adds	r3, #1
 800269c:	7811      	ldrb	r1, [r2, #0]
 800269e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80026a2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80026a6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80026a8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026ac:	3301      	adds	r3, #1
 80026ae:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80026b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80026bc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80026c0:	8812      	ldrh	r2, [r2, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d8df      	bhi.n	8002686 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80026c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026ca:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	b299      	uxth	r1, r3
 80026d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	3301      	adds	r3, #1
 80026de:	b29b      	uxth	r3, r3
 80026e0:	f107 020c 	add.w	r2, r7, #12
 80026e4:	200a      	movs	r0, #10
 80026e6:	9000      	str	r0, [sp, #0]
 80026e8:	4803      	ldr	r0, [pc, #12]	; (80026f8 <ssd1306_I2C_WriteMulti+0xc8>)
 80026ea:	f001 fb2b 	bl	8003d44 <HAL_I2C_Master_Transmit>
}
 80026ee:	bf00      	nop
 80026f0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd90      	pop	{r4, r7, pc}
 80026f8:	200002e8 	.word	0x200002e8

080026fc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af02      	add	r7, sp, #8
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
 8002706:	460b      	mov	r3, r1
 8002708:	71bb      	strb	r3, [r7, #6]
 800270a:	4613      	mov	r3, r2
 800270c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800270e:	79bb      	ldrb	r3, [r7, #6]
 8002710:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002712:	797b      	ldrb	r3, [r7, #5]
 8002714:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	b299      	uxth	r1, r3
 800271a:	f107 020c 	add.w	r2, r7, #12
 800271e:	230a      	movs	r3, #10
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	2302      	movs	r3, #2
 8002724:	4803      	ldr	r0, [pc, #12]	; (8002734 <ssd1306_I2C_Write+0x38>)
 8002726:	f001 fb0d 	bl	8003d44 <HAL_I2C_Master_Transmit>
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200002e8 	.word	0x200002e8

08002738 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <HAL_MspInit+0x5c>)
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	4a14      	ldr	r2, [pc, #80]	; (8002794 <HAL_MspInit+0x5c>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6193      	str	r3, [r2, #24]
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_MspInit+0x5c>)
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <HAL_MspInit+0x5c>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	4a0e      	ldr	r2, [pc, #56]	; (8002794 <HAL_MspInit+0x5c>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002760:	61d3      	str	r3, [r2, #28]
 8002762:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <HAL_MspInit+0x5c>)
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_MspInit+0x60>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	4a04      	ldr	r2, [pc, #16]	; (8002798 <HAL_MspInit+0x60>)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800278a:	bf00      	nop
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr
 8002794:	40021000 	.word	0x40021000
 8002798:	40010000 	.word	0x40010000

0800279c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 0310 	add.w	r3, r7, #16
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a14      	ldr	r2, [pc, #80]	; (8002808 <HAL_ADC_MspInit+0x6c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d121      	bne.n	8002800 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <HAL_ADC_MspInit+0x70>)
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	4a12      	ldr	r2, [pc, #72]	; (800280c <HAL_ADC_MspInit+0x70>)
 80027c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027c6:	6193      	str	r3, [r2, #24]
 80027c8:	4b10      	ldr	r3, [pc, #64]	; (800280c <HAL_ADC_MspInit+0x70>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d4:	4b0d      	ldr	r3, [pc, #52]	; (800280c <HAL_ADC_MspInit+0x70>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	4a0c      	ldr	r2, [pc, #48]	; (800280c <HAL_ADC_MspInit+0x70>)
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	6193      	str	r3, [r2, #24]
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <HAL_ADC_MspInit+0x70>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027ec:	2301      	movs	r3, #1
 80027ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027f0:	2303      	movs	r3, #3
 80027f2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f4:	f107 0310 	add.w	r3, r7, #16
 80027f8:	4619      	mov	r1, r3
 80027fa:	4805      	ldr	r0, [pc, #20]	; (8002810 <HAL_ADC_MspInit+0x74>)
 80027fc:	f000 ffda 	bl	80037b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002800:	bf00      	nop
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40012400 	.word	0x40012400
 800280c:	40021000 	.word	0x40021000
 8002810:	40010800 	.word	0x40010800

08002814 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 0310 	add.w	r3, r7, #16
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a15      	ldr	r2, [pc, #84]	; (8002884 <HAL_I2C_MspInit+0x70>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d123      	bne.n	800287c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002834:	4b14      	ldr	r3, [pc, #80]	; (8002888 <HAL_I2C_MspInit+0x74>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	4a13      	ldr	r2, [pc, #76]	; (8002888 <HAL_I2C_MspInit+0x74>)
 800283a:	f043 0308 	orr.w	r3, r3, #8
 800283e:	6193      	str	r3, [r2, #24]
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_I2C_MspInit+0x74>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800284c:	23c0      	movs	r3, #192	; 0xc0
 800284e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002850:	2312      	movs	r3, #18
 8002852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002854:	2303      	movs	r3, #3
 8002856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002858:	f107 0310 	add.w	r3, r7, #16
 800285c:	4619      	mov	r1, r3
 800285e:	480b      	ldr	r0, [pc, #44]	; (800288c <HAL_I2C_MspInit+0x78>)
 8002860:	f000 ffa8 	bl	80037b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_I2C_MspInit+0x74>)
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	4a07      	ldr	r2, [pc, #28]	; (8002888 <HAL_I2C_MspInit+0x74>)
 800286a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800286e:	61d3      	str	r3, [r2, #28]
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_I2C_MspInit+0x74>)
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800287c:	bf00      	nop
 800287e:	3720      	adds	r7, #32
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40005400 	.word	0x40005400
 8002888:	40021000 	.word	0x40021000
 800288c:	40010c00 	.word	0x40010c00

08002890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a0:	d113      	bne.n	80028ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <HAL_TIM_Base_MspInit+0x44>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	4a0b      	ldr	r2, [pc, #44]	; (80028d4 <HAL_TIM_Base_MspInit+0x44>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	61d3      	str	r3, [r2, #28]
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_TIM_Base_MspInit+0x44>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028ba:	2200      	movs	r2, #0
 80028bc:	2100      	movs	r1, #0
 80028be:	201c      	movs	r0, #28
 80028c0:	f000 ff41 	bl	8003746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028c4:	201c      	movs	r0, #28
 80028c6:	f000 ff5a 	bl	800377e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000

080028d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	f107 030c 	add.w	r3, r7, #12
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f6:	d12a      	bne.n	800294e <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f8:	4b17      	ldr	r3, [pc, #92]	; (8002958 <HAL_TIM_MspPostInit+0x80>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	4a16      	ldr	r2, [pc, #88]	; (8002958 <HAL_TIM_MspPostInit+0x80>)
 80028fe:	f043 0304 	orr.w	r3, r3, #4
 8002902:	6193      	str	r3, [r2, #24]
 8002904:	4b14      	ldr	r3, [pc, #80]	; (8002958 <HAL_TIM_MspPostInit+0x80>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002910:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002914:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002916:	2302      	movs	r3, #2
 8002918:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2302      	movs	r3, #2
 800291c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	4619      	mov	r1, r3
 8002924:	480d      	ldr	r0, [pc, #52]	; (800295c <HAL_TIM_MspPostInit+0x84>)
 8002926:	f000 ff45 	bl	80037b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800292a:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <HAL_TIM_MspPostInit+0x88>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61fb      	str	r3, [r7, #28]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002936:	61fb      	str	r3, [r7, #28]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800293e:	61fb      	str	r3, [r7, #28]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	4a05      	ldr	r2, [pc, #20]	; (8002960 <HAL_TIM_MspPostInit+0x88>)
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800294e:	bf00      	nop
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	40010800 	.word	0x40010800
 8002960:	40010000 	.word	0x40010000

08002964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 0310 	add.w	r3, r7, #16
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a1b      	ldr	r2, [pc, #108]	; (80029ec <HAL_UART_MspInit+0x88>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d12f      	bne.n	80029e4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002984:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <HAL_UART_MspInit+0x8c>)
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	4a19      	ldr	r2, [pc, #100]	; (80029f0 <HAL_UART_MspInit+0x8c>)
 800298a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298e:	61d3      	str	r3, [r2, #28]
 8002990:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <HAL_UART_MspInit+0x8c>)
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299c:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <HAL_UART_MspInit+0x8c>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <HAL_UART_MspInit+0x8c>)
 80029a2:	f043 0304 	orr.w	r3, r3, #4
 80029a6:	6193      	str	r3, [r2, #24]
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <HAL_UART_MspInit+0x8c>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029b4:	2304      	movs	r3, #4
 80029b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029bc:	2303      	movs	r3, #3
 80029be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	4619      	mov	r1, r3
 80029c6:	480b      	ldr	r0, [pc, #44]	; (80029f4 <HAL_UART_MspInit+0x90>)
 80029c8:	f000 fef4 	bl	80037b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029cc:	2308      	movs	r3, #8
 80029ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d8:	f107 0310 	add.w	r3, r7, #16
 80029dc:	4619      	mov	r1, r3
 80029de:	4805      	ldr	r0, [pc, #20]	; (80029f4 <HAL_UART_MspInit+0x90>)
 80029e0:	f000 fee8 	bl	80037b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029e4:	bf00      	nop
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40004400 	.word	0x40004400
 80029f0:	40021000 	.word	0x40021000
 80029f4:	40010800 	.word	0x40010800

080029f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029fc:	e7fe      	b.n	80029fc <NMI_Handler+0x4>

080029fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a02:	e7fe      	b.n	8002a02 <HardFault_Handler+0x4>

08002a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <MemManage_Handler+0x4>

08002a0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a0e:	e7fe      	b.n	8002a0e <BusFault_Handler+0x4>

08002a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <UsageFault_Handler+0x4>

08002a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a3e:	f000 f93f 	bl	8002cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a4c:	4802      	ldr	r0, [pc, #8]	; (8002a58 <TIM2_IRQHandler+0x10>)
 8002a4e:	f003 fa55 	bl	8005efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	2000033c 	.word	0x2000033c

08002a5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return 1;
 8002a60:	2301      	movs	r3, #1
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <_kill>:

int _kill(int pid, int sig)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a74:	f005 f9f4 	bl	8007e60 <__errno>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2216      	movs	r2, #22
 8002a7c:	601a      	str	r2, [r3, #0]
  return -1;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <_exit>:

void _exit (int status)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a92:	f04f 31ff 	mov.w	r1, #4294967295
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ffe7 	bl	8002a6a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a9c:	e7fe      	b.n	8002a9c <_exit+0x12>

08002a9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b086      	sub	sp, #24
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e00a      	b.n	8002ac6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ab0:	f3af 8000 	nop.w
 8002ab4:	4601      	mov	r1, r0
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	60ba      	str	r2, [r7, #8]
 8002abc:	b2ca      	uxtb	r2, r1
 8002abe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	dbf0      	blt.n	8002ab0 <_read+0x12>
  }

  return len;
 8002ace:	687b      	ldr	r3, [r7, #4]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	e009      	b.n	8002afe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	60ba      	str	r2, [r7, #8]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	3301      	adds	r3, #1
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	dbf1      	blt.n	8002aea <_write+0x12>
  }
  return len;
 8002b06:	687b      	ldr	r3, [r7, #4]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <_close>:

int _close(int file)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b36:	605a      	str	r2, [r3, #4]
  return 0;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <_isatty>:

int _isatty(int file)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b4c:	2301      	movs	r3, #1
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b78:	4a14      	ldr	r2, [pc, #80]	; (8002bcc <_sbrk+0x5c>)
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <_sbrk+0x60>)
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b84:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <_sbrk+0x64>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d102      	bne.n	8002b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <_sbrk+0x64>)
 8002b8e:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <_sbrk+0x68>)
 8002b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <_sbrk+0x64>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d207      	bcs.n	8002bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ba0:	f005 f95e 	bl	8007e60 <__errno>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	220c      	movs	r2, #12
 8002ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002baa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bae:	e009      	b.n	8002bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bb0:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <_sbrk+0x64>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bb6:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <_sbrk+0x64>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	4a05      	ldr	r2, [pc, #20]	; (8002bd4 <_sbrk+0x64>)
 8002bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20005000 	.word	0x20005000
 8002bd0:	00000400 	.word	0x00000400
 8002bd4:	200008f4 	.word	0x200008f4
 8002bd8:	20000a48 	.word	0x20000a48

08002bdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002be8:	f7ff fff8 	bl	8002bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bec:	480b      	ldr	r0, [pc, #44]	; (8002c1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002bee:	490c      	ldr	r1, [pc, #48]	; (8002c20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002bf0:	4a0c      	ldr	r2, [pc, #48]	; (8002c24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf4:	e002      	b.n	8002bfc <LoopCopyDataInit>

08002bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfa:	3304      	adds	r3, #4

08002bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c00:	d3f9      	bcc.n	8002bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c02:	4a09      	ldr	r2, [pc, #36]	; (8002c28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c04:	4c09      	ldr	r4, [pc, #36]	; (8002c2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c08:	e001      	b.n	8002c0e <LoopFillZerobss>

08002c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c0c:	3204      	adds	r2, #4

08002c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c10:	d3fb      	bcc.n	8002c0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c12:	f005 f92b 	bl	8007e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c16:	f7ff f82b 	bl	8001c70 <main>
  bx lr
 8002c1a:	4770      	bx	lr
  ldr r0, =_sdata
 8002c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c20:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002c24:	0800c298 	.word	0x0800c298
  ldr r2, =_sbss
 8002c28:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002c2c:	20000a48 	.word	0x20000a48

08002c30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c30:	e7fe      	b.n	8002c30 <ADC1_2_IRQHandler>
	...

08002c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c38:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <HAL_Init+0x28>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a07      	ldr	r2, [pc, #28]	; (8002c5c <HAL_Init+0x28>)
 8002c3e:	f043 0310 	orr.w	r3, r3, #16
 8002c42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c44:	2003      	movs	r0, #3
 8002c46:	f000 fd73 	bl	8003730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c4a:	200f      	movs	r0, #15
 8002c4c:	f000 f808 	bl	8002c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c50:	f7ff fd72 	bl	8002738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40022000 	.word	0x40022000

08002c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c68:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <HAL_InitTick+0x54>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_InitTick+0x58>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	4619      	mov	r1, r3
 8002c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 fd8b 	bl	800379a <HAL_SYSTICK_Config>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e00e      	b.n	8002cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b0f      	cmp	r3, #15
 8002c92:	d80a      	bhi.n	8002caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c94:	2200      	movs	r2, #0
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9c:	f000 fd53 	bl	8003746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca0:	4a06      	ldr	r2, [pc, #24]	; (8002cbc <HAL_InitTick+0x5c>)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e000      	b.n	8002cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000010 	.word	0x20000010
 8002cb8:	20000018 	.word	0x20000018
 8002cbc:	20000014 	.word	0x20000014

08002cc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_IncTick+0x1c>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_IncTick+0x20>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4413      	add	r3, r2
 8002cd0:	4a03      	ldr	r2, [pc, #12]	; (8002ce0 <HAL_IncTick+0x20>)
 8002cd2:	6013      	str	r3, [r2, #0]
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	20000018 	.word	0x20000018
 8002ce0:	200008f8 	.word	0x200008f8

08002ce4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce8:	4b02      	ldr	r3, [pc, #8]	; (8002cf4 <HAL_GetTick+0x10>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	200008f8 	.word	0x200008f8

08002cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d00:	f7ff fff0 	bl	8002ce4 <HAL_GetTick>
 8002d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d005      	beq.n	8002d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <HAL_Delay+0x44>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d1e:	bf00      	nop
 8002d20:	f7ff ffe0 	bl	8002ce4 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d8f7      	bhi.n	8002d20 <HAL_Delay+0x28>
  {
  }
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000018 	.word	0x20000018

08002d40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e0be      	b.n	8002ee0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff fd0c 	bl	800279c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fbc5 	bl	8003514 <ADC_ConversionStop_Disable>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 8099 	bne.w	8002ece <HAL_ADC_Init+0x18e>
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f040 8095 	bne.w	8002ece <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dac:	f023 0302 	bic.w	r3, r3, #2
 8002db0:	f043 0202 	orr.w	r2, r3, #2
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dc0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7b1b      	ldrb	r3, [r3, #12]
 8002dc6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002dc8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd8:	d003      	beq.n	8002de2 <HAL_ADC_Init+0xa2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d102      	bne.n	8002de8 <HAL_ADC_Init+0xa8>
 8002de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002de6:	e000      	b.n	8002dea <HAL_ADC_Init+0xaa>
 8002de8:	2300      	movs	r3, #0
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	7d1b      	ldrb	r3, [r3, #20]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d119      	bne.n	8002e2c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7b1b      	ldrb	r3, [r3, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d109      	bne.n	8002e14 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	3b01      	subs	r3, #1
 8002e06:	035a      	lsls	r2, r3, #13
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	e00b      	b.n	8002e2c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	f043 0220 	orr.w	r2, r3, #32
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	f043 0201 	orr.w	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	4b28      	ldr	r3, [pc, #160]	; (8002ee8 <HAL_ADC_Init+0x1a8>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	68b9      	ldr	r1, [r7, #8]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5c:	d003      	beq.n	8002e66 <HAL_ADC_Init+0x126>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d104      	bne.n	8002e70 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	051b      	lsls	r3, r3, #20
 8002e6e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	4b18      	ldr	r3, [pc, #96]	; (8002eec <HAL_ADC_Init+0x1ac>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d10b      	bne.n	8002eac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	f023 0303 	bic.w	r3, r3, #3
 8002ea2:	f043 0201 	orr.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002eaa:	e018      	b.n	8002ede <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	f023 0312 	bic.w	r3, r3, #18
 8002eb4:	f043 0210 	orr.w	r2, r3, #16
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	f043 0201 	orr.w	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ecc:	e007      	b.n	8002ede <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	f043 0210 	orr.w	r2, r3, #16
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	ffe1f7fd 	.word	0xffe1f7fd
 8002eec:	ff1f0efe 	.word	0xff1f0efe

08002ef0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_Start+0x1a>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e098      	b.n	800303c <HAL_ADC_Start+0x14c>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 faa4 	bl	8003460 <ADC_Enable>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f040 8087 	bne.w	8003032 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a41      	ldr	r2, [pc, #260]	; (8003044 <HAL_ADC_Start+0x154>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d105      	bne.n	8002f4e <HAL_ADC_Start+0x5e>
 8002f42:	4b41      	ldr	r3, [pc, #260]	; (8003048 <HAL_ADC_Start+0x158>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d115      	bne.n	8002f7a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d026      	beq.n	8002fb6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f78:	e01d      	b.n	8002fb6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a2f      	ldr	r2, [pc, #188]	; (8003048 <HAL_ADC_Start+0x158>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d004      	beq.n	8002f9a <HAL_ADC_Start+0xaa>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a2b      	ldr	r2, [pc, #172]	; (8003044 <HAL_ADC_Start+0x154>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d10d      	bne.n	8002fb6 <HAL_ADC_Start+0xc6>
 8002f9a:	4b2b      	ldr	r3, [pc, #172]	; (8003048 <HAL_ADC_Start+0x158>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	f023 0206 	bic.w	r2, r3, #6
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fce:	e002      	b.n	8002fd6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f06f 0202 	mvn.w	r2, #2
 8002fe6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ff2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ff6:	d113      	bne.n	8003020 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ffc:	4a11      	ldr	r2, [pc, #68]	; (8003044 <HAL_ADC_Start+0x154>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d105      	bne.n	800300e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003002:	4b11      	ldr	r3, [pc, #68]	; (8003048 <HAL_ADC_Start+0x158>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800300a:	2b00      	cmp	r3, #0
 800300c:	d108      	bne.n	8003020 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800301c:	609a      	str	r2, [r3, #8]
 800301e:	e00c      	b.n	800303a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	e003      	b.n	800303a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800303a:	7bfb      	ldrb	r3, [r7, #15]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40012800 	.word	0x40012800
 8003048:	40012400 	.word	0x40012400

0800304c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800304c:	b590      	push	{r4, r7, lr}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003062:	f7ff fe3f 	bl	8002ce4 <HAL_GetTick>
 8003066:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00b      	beq.n	800308e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	f043 0220 	orr.w	r2, r3, #32
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e0d3      	b.n	8003236 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d131      	bne.n	8003100 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d12a      	bne.n	8003100 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80030aa:	e021      	b.n	80030f0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b2:	d01d      	beq.n	80030f0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d007      	beq.n	80030ca <HAL_ADC_PollForConversion+0x7e>
 80030ba:	f7ff fe13 	bl	8002ce4 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d212      	bcs.n	80030f0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10b      	bne.n	80030f0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	f043 0204 	orr.w	r2, r3, #4
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e0a2      	b.n	8003236 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0d6      	beq.n	80030ac <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80030fe:	e070      	b.n	80031e2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003100:	4b4f      	ldr	r3, [pc, #316]	; (8003240 <HAL_ADC_PollForConversion+0x1f4>)
 8003102:	681c      	ldr	r4, [r3, #0]
 8003104:	2002      	movs	r0, #2
 8003106:	f002 fca7 	bl	8005a58 <HAL_RCCEx_GetPeriphCLKFreq>
 800310a:	4603      	mov	r3, r0
 800310c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6919      	ldr	r1, [r3, #16]
 8003116:	4b4b      	ldr	r3, [pc, #300]	; (8003244 <HAL_ADC_PollForConversion+0x1f8>)
 8003118:	400b      	ands	r3, r1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d118      	bne.n	8003150 <HAL_ADC_PollForConversion+0x104>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68d9      	ldr	r1, [r3, #12]
 8003124:	4b48      	ldr	r3, [pc, #288]	; (8003248 <HAL_ADC_PollForConversion+0x1fc>)
 8003126:	400b      	ands	r3, r1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d111      	bne.n	8003150 <HAL_ADC_PollForConversion+0x104>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6919      	ldr	r1, [r3, #16]
 8003132:	4b46      	ldr	r3, [pc, #280]	; (800324c <HAL_ADC_PollForConversion+0x200>)
 8003134:	400b      	ands	r3, r1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d108      	bne.n	800314c <HAL_ADC_PollForConversion+0x100>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68d9      	ldr	r1, [r3, #12]
 8003140:	4b43      	ldr	r3, [pc, #268]	; (8003250 <HAL_ADC_PollForConversion+0x204>)
 8003142:	400b      	ands	r3, r1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_ADC_PollForConversion+0x100>
 8003148:	2314      	movs	r3, #20
 800314a:	e020      	b.n	800318e <HAL_ADC_PollForConversion+0x142>
 800314c:	2329      	movs	r3, #41	; 0x29
 800314e:	e01e      	b.n	800318e <HAL_ADC_PollForConversion+0x142>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6919      	ldr	r1, [r3, #16]
 8003156:	4b3d      	ldr	r3, [pc, #244]	; (800324c <HAL_ADC_PollForConversion+0x200>)
 8003158:	400b      	ands	r3, r1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_ADC_PollForConversion+0x120>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68d9      	ldr	r1, [r3, #12]
 8003164:	4b3a      	ldr	r3, [pc, #232]	; (8003250 <HAL_ADC_PollForConversion+0x204>)
 8003166:	400b      	ands	r3, r1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00d      	beq.n	8003188 <HAL_ADC_PollForConversion+0x13c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6919      	ldr	r1, [r3, #16]
 8003172:	4b38      	ldr	r3, [pc, #224]	; (8003254 <HAL_ADC_PollForConversion+0x208>)
 8003174:	400b      	ands	r3, r1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d108      	bne.n	800318c <HAL_ADC_PollForConversion+0x140>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68d9      	ldr	r1, [r3, #12]
 8003180:	4b34      	ldr	r3, [pc, #208]	; (8003254 <HAL_ADC_PollForConversion+0x208>)
 8003182:	400b      	ands	r3, r1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_ADC_PollForConversion+0x140>
 8003188:	2354      	movs	r3, #84	; 0x54
 800318a:	e000      	b.n	800318e <HAL_ADC_PollForConversion+0x142>
 800318c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800318e:	fb02 f303 	mul.w	r3, r2, r3
 8003192:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003194:	e021      	b.n	80031da <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d01a      	beq.n	80031d4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <HAL_ADC_PollForConversion+0x168>
 80031a4:	f7ff fd9e 	bl	8002ce4 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d20f      	bcs.n	80031d4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d90b      	bls.n	80031d4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	f043 0204 	orr.w	r2, r3, #4
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e030      	b.n	8003236 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3301      	adds	r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d8d9      	bhi.n	8003196 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f06f 0212 	mvn.w	r2, #18
 80031ea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003202:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003206:	d115      	bne.n	8003234 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800320c:	2b00      	cmp	r3, #0
 800320e:	d111      	bne.n	8003234 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d105      	bne.n	8003234 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	f043 0201 	orr.w	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	bd90      	pop	{r4, r7, pc}
 800323e:	bf00      	nop
 8003240:	20000010 	.word	0x20000010
 8003244:	24924924 	.word	0x24924924
 8003248:	00924924 	.word	0x00924924
 800324c:	12492492 	.word	0x12492492
 8003250:	00492492 	.word	0x00492492
 8003254:	00249249 	.word	0x00249249

08003258 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr

08003270 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x20>
 800328c:	2302      	movs	r3, #2
 800328e:	e0dc      	b.n	800344a <HAL_ADC_ConfigChannel+0x1da>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b06      	cmp	r3, #6
 800329e:	d81c      	bhi.n	80032da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	3b05      	subs	r3, #5
 80032b2:	221f      	movs	r2, #31
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	4019      	ands	r1, r3
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	3b05      	subs	r3, #5
 80032cc:	fa00 f203 	lsl.w	r2, r0, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	635a      	str	r2, [r3, #52]	; 0x34
 80032d8:	e03c      	b.n	8003354 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b0c      	cmp	r3, #12
 80032e0:	d81c      	bhi.n	800331c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	3b23      	subs	r3, #35	; 0x23
 80032f4:	221f      	movs	r2, #31
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	4019      	ands	r1, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	3b23      	subs	r3, #35	; 0x23
 800330e:	fa00 f203 	lsl.w	r2, r0, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
 800331a:	e01b      	b.n	8003354 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	3b41      	subs	r3, #65	; 0x41
 800332e:	221f      	movs	r2, #31
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	4019      	ands	r1, r3
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	3b41      	subs	r3, #65	; 0x41
 8003348:	fa00 f203 	lsl.w	r2, r0, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b09      	cmp	r3, #9
 800335a:	d91c      	bls.n	8003396 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68d9      	ldr	r1, [r3, #12]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4613      	mov	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	3b1e      	subs	r3, #30
 800336e:	2207      	movs	r2, #7
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	4019      	ands	r1, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	6898      	ldr	r0, [r3, #8]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	3b1e      	subs	r3, #30
 8003388:	fa00 f203 	lsl.w	r2, r0, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	60da      	str	r2, [r3, #12]
 8003394:	e019      	b.n	80033ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6919      	ldr	r1, [r3, #16]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4613      	mov	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	2207      	movs	r2, #7
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	4019      	ands	r1, r3
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6898      	ldr	r0, [r3, #8]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4613      	mov	r3, r2
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	4413      	add	r3, r2
 80033be:	fa00 f203 	lsl.w	r2, r0, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b10      	cmp	r3, #16
 80033d0:	d003      	beq.n	80033da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033d6:	2b11      	cmp	r3, #17
 80033d8:	d132      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1d      	ldr	r2, [pc, #116]	; (8003454 <HAL_ADC_ConfigChannel+0x1e4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d125      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d126      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003400:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b10      	cmp	r3, #16
 8003408:	d11a      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800340a:	4b13      	ldr	r3, [pc, #76]	; (8003458 <HAL_ADC_ConfigChannel+0x1e8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a13      	ldr	r2, [pc, #76]	; (800345c <HAL_ADC_ConfigChannel+0x1ec>)
 8003410:	fba2 2303 	umull	r2, r3, r2, r3
 8003414:	0c9a      	lsrs	r2, r3, #18
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003420:	e002      	b.n	8003428 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	3b01      	subs	r3, #1
 8003426:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f9      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x1b2>
 800342e:	e007      	b.n	8003440 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003448:	7bfb      	ldrb	r3, [r7, #15]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr
 8003454:	40012400 	.word	0x40012400
 8003458:	20000010 	.word	0x20000010
 800345c:	431bde83 	.word	0x431bde83

08003460 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b01      	cmp	r3, #1
 800347c:	d040      	beq.n	8003500 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0201 	orr.w	r2, r2, #1
 800348c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800348e:	4b1f      	ldr	r3, [pc, #124]	; (800350c <ADC_Enable+0xac>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1f      	ldr	r2, [pc, #124]	; (8003510 <ADC_Enable+0xb0>)
 8003494:	fba2 2303 	umull	r2, r3, r2, r3
 8003498:	0c9b      	lsrs	r3, r3, #18
 800349a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800349c:	e002      	b.n	80034a4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f9      	bne.n	800349e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034aa:	f7ff fc1b 	bl	8002ce4 <HAL_GetTick>
 80034ae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034b0:	e01f      	b.n	80034f2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034b2:	f7ff fc17 	bl	8002ce4 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d918      	bls.n	80034f2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d011      	beq.n	80034f2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	f043 0210 	orr.w	r2, r3, #16
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034de:	f043 0201 	orr.w	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e007      	b.n	8003502 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d1d8      	bne.n	80034b2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000010 	.word	0x20000010
 8003510:	431bde83 	.word	0x431bde83

08003514 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b01      	cmp	r3, #1
 800352c:	d12e      	bne.n	800358c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800353e:	f7ff fbd1 	bl	8002ce4 <HAL_GetTick>
 8003542:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003544:	e01b      	b.n	800357e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003546:	f7ff fbcd 	bl	8002ce4 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d914      	bls.n	800357e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b01      	cmp	r3, #1
 8003560:	d10d      	bne.n	800357e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	f043 0210 	orr.w	r2, r3, #16
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	f043 0201 	orr.w	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e007      	b.n	800358e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	d0dc      	beq.n	8003546 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <__NVIC_SetPriorityGrouping+0x44>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035b4:	4013      	ands	r3, r2
 80035b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ca:	4a04      	ldr	r2, [pc, #16]	; (80035dc <__NVIC_SetPriorityGrouping+0x44>)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	60d3      	str	r3, [r2, #12]
}
 80035d0:	bf00      	nop
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e4:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <__NVIC_GetPriorityGrouping+0x18>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	f003 0307 	and.w	r3, r3, #7
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360a:	2b00      	cmp	r3, #0
 800360c:	db0b      	blt.n	8003626 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	f003 021f 	and.w	r2, r3, #31
 8003614:	4906      	ldr	r1, [pc, #24]	; (8003630 <__NVIC_EnableIRQ+0x34>)
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	2001      	movs	r0, #1
 800361e:	fa00 f202 	lsl.w	r2, r0, r2
 8003622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	e000e100 	.word	0xe000e100

08003634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	6039      	str	r1, [r7, #0]
 800363e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003644:	2b00      	cmp	r3, #0
 8003646:	db0a      	blt.n	800365e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	b2da      	uxtb	r2, r3
 800364c:	490c      	ldr	r1, [pc, #48]	; (8003680 <__NVIC_SetPriority+0x4c>)
 800364e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003652:	0112      	lsls	r2, r2, #4
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	440b      	add	r3, r1
 8003658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800365c:	e00a      	b.n	8003674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	b2da      	uxtb	r2, r3
 8003662:	4908      	ldr	r1, [pc, #32]	; (8003684 <__NVIC_SetPriority+0x50>)
 8003664:	79fb      	ldrb	r3, [r7, #7]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	3b04      	subs	r3, #4
 800366c:	0112      	lsls	r2, r2, #4
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	440b      	add	r3, r1
 8003672:	761a      	strb	r2, [r3, #24]
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	e000e100 	.word	0xe000e100
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003688:	b480      	push	{r7}
 800368a:	b089      	sub	sp, #36	; 0x24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f1c3 0307 	rsb	r3, r3, #7
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	bf28      	it	cs
 80036a6:	2304      	movcs	r3, #4
 80036a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3304      	adds	r3, #4
 80036ae:	2b06      	cmp	r3, #6
 80036b0:	d902      	bls.n	80036b8 <NVIC_EncodePriority+0x30>
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	3b03      	subs	r3, #3
 80036b6:	e000      	b.n	80036ba <NVIC_EncodePriority+0x32>
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036bc:	f04f 32ff 	mov.w	r2, #4294967295
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43da      	mvns	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	401a      	ands	r2, r3
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036d0:	f04f 31ff 	mov.w	r1, #4294967295
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	fa01 f303 	lsl.w	r3, r1, r3
 80036da:	43d9      	mvns	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e0:	4313      	orrs	r3, r2
         );
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3724      	adds	r7, #36	; 0x24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036fc:	d301      	bcc.n	8003702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036fe:	2301      	movs	r3, #1
 8003700:	e00f      	b.n	8003722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003702:	4a0a      	ldr	r2, [pc, #40]	; (800372c <SysTick_Config+0x40>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3b01      	subs	r3, #1
 8003708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800370a:	210f      	movs	r1, #15
 800370c:	f04f 30ff 	mov.w	r0, #4294967295
 8003710:	f7ff ff90 	bl	8003634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <SysTick_Config+0x40>)
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <SysTick_Config+0x40>)
 800371c:	2207      	movs	r2, #7
 800371e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	e000e010 	.word	0xe000e010

08003730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff ff2d 	bl	8003598 <__NVIC_SetPriorityGrouping>
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	4603      	mov	r3, r0
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003758:	f7ff ff42 	bl	80035e0 <__NVIC_GetPriorityGrouping>
 800375c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	6978      	ldr	r0, [r7, #20]
 8003764:	f7ff ff90 	bl	8003688 <NVIC_EncodePriority>
 8003768:	4602      	mov	r2, r0
 800376a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff ff5f 	bl	8003634 <__NVIC_SetPriority>
}
 8003776:	bf00      	nop
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	4603      	mov	r3, r0
 8003786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff ff35 	bl	80035fc <__NVIC_EnableIRQ>
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff ffa2 	bl	80036ec <SysTick_Config>
 80037a8:	4603      	mov	r3, r0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b08b      	sub	sp, #44	; 0x2c
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037be:	2300      	movs	r3, #0
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80037c2:	2300      	movs	r3, #0
 80037c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c6:	e169      	b.n	8003a9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80037c8:	2201      	movs	r2, #1
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	f040 8158 	bne.w	8003a96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	4a9a      	ldr	r2, [pc, #616]	; (8003a54 <HAL_GPIO_Init+0x2a0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d05e      	beq.n	80038ae <HAL_GPIO_Init+0xfa>
 80037f0:	4a98      	ldr	r2, [pc, #608]	; (8003a54 <HAL_GPIO_Init+0x2a0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d875      	bhi.n	80038e2 <HAL_GPIO_Init+0x12e>
 80037f6:	4a98      	ldr	r2, [pc, #608]	; (8003a58 <HAL_GPIO_Init+0x2a4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d058      	beq.n	80038ae <HAL_GPIO_Init+0xfa>
 80037fc:	4a96      	ldr	r2, [pc, #600]	; (8003a58 <HAL_GPIO_Init+0x2a4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d86f      	bhi.n	80038e2 <HAL_GPIO_Init+0x12e>
 8003802:	4a96      	ldr	r2, [pc, #600]	; (8003a5c <HAL_GPIO_Init+0x2a8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d052      	beq.n	80038ae <HAL_GPIO_Init+0xfa>
 8003808:	4a94      	ldr	r2, [pc, #592]	; (8003a5c <HAL_GPIO_Init+0x2a8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d869      	bhi.n	80038e2 <HAL_GPIO_Init+0x12e>
 800380e:	4a94      	ldr	r2, [pc, #592]	; (8003a60 <HAL_GPIO_Init+0x2ac>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d04c      	beq.n	80038ae <HAL_GPIO_Init+0xfa>
 8003814:	4a92      	ldr	r2, [pc, #584]	; (8003a60 <HAL_GPIO_Init+0x2ac>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d863      	bhi.n	80038e2 <HAL_GPIO_Init+0x12e>
 800381a:	4a92      	ldr	r2, [pc, #584]	; (8003a64 <HAL_GPIO_Init+0x2b0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d046      	beq.n	80038ae <HAL_GPIO_Init+0xfa>
 8003820:	4a90      	ldr	r2, [pc, #576]	; (8003a64 <HAL_GPIO_Init+0x2b0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d85d      	bhi.n	80038e2 <HAL_GPIO_Init+0x12e>
 8003826:	2b12      	cmp	r3, #18
 8003828:	d82a      	bhi.n	8003880 <HAL_GPIO_Init+0xcc>
 800382a:	2b12      	cmp	r3, #18
 800382c:	d859      	bhi.n	80038e2 <HAL_GPIO_Init+0x12e>
 800382e:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <HAL_GPIO_Init+0x80>)
 8003830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003834:	080038af 	.word	0x080038af
 8003838:	08003889 	.word	0x08003889
 800383c:	0800389b 	.word	0x0800389b
 8003840:	080038dd 	.word	0x080038dd
 8003844:	080038e3 	.word	0x080038e3
 8003848:	080038e3 	.word	0x080038e3
 800384c:	080038e3 	.word	0x080038e3
 8003850:	080038e3 	.word	0x080038e3
 8003854:	080038e3 	.word	0x080038e3
 8003858:	080038e3 	.word	0x080038e3
 800385c:	080038e3 	.word	0x080038e3
 8003860:	080038e3 	.word	0x080038e3
 8003864:	080038e3 	.word	0x080038e3
 8003868:	080038e3 	.word	0x080038e3
 800386c:	080038e3 	.word	0x080038e3
 8003870:	080038e3 	.word	0x080038e3
 8003874:	080038e3 	.word	0x080038e3
 8003878:	08003891 	.word	0x08003891
 800387c:	080038a5 	.word	0x080038a5
 8003880:	4a79      	ldr	r2, [pc, #484]	; (8003a68 <HAL_GPIO_Init+0x2b4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d013      	beq.n	80038ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003886:	e02c      	b.n	80038e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	623b      	str	r3, [r7, #32]
          break;
 800388e:	e029      	b.n	80038e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	3304      	adds	r3, #4
 8003896:	623b      	str	r3, [r7, #32]
          break;
 8003898:	e024      	b.n	80038e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	3308      	adds	r3, #8
 80038a0:	623b      	str	r3, [r7, #32]
          break;
 80038a2:	e01f      	b.n	80038e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	330c      	adds	r3, #12
 80038aa:	623b      	str	r3, [r7, #32]
          break;
 80038ac:	e01a      	b.n	80038e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d102      	bne.n	80038bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80038b6:	2304      	movs	r3, #4
 80038b8:	623b      	str	r3, [r7, #32]
          break;
 80038ba:	e013      	b.n	80038e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d105      	bne.n	80038d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038c4:	2308      	movs	r3, #8
 80038c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	611a      	str	r2, [r3, #16]
          break;
 80038ce:	e009      	b.n	80038e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038d0:	2308      	movs	r3, #8
 80038d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	615a      	str	r2, [r3, #20]
          break;
 80038da:	e003      	b.n	80038e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80038dc:	2300      	movs	r3, #0
 80038de:	623b      	str	r3, [r7, #32]
          break;
 80038e0:	e000      	b.n	80038e4 <HAL_GPIO_Init+0x130>
          break;
 80038e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2bff      	cmp	r3, #255	; 0xff
 80038e8:	d801      	bhi.n	80038ee <HAL_GPIO_Init+0x13a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	e001      	b.n	80038f2 <HAL_GPIO_Init+0x13e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3304      	adds	r3, #4
 80038f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2bff      	cmp	r3, #255	; 0xff
 80038f8:	d802      	bhi.n	8003900 <HAL_GPIO_Init+0x14c>
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	e002      	b.n	8003906 <HAL_GPIO_Init+0x152>
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	3b08      	subs	r3, #8
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	210f      	movs	r1, #15
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	fa01 f303 	lsl.w	r3, r1, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	401a      	ands	r2, r3
 8003918:	6a39      	ldr	r1, [r7, #32]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	fa01 f303 	lsl.w	r3, r1, r3
 8003920:	431a      	orrs	r2, r3
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 80b1 	beq.w	8003a96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003934:	4b4d      	ldr	r3, [pc, #308]	; (8003a6c <HAL_GPIO_Init+0x2b8>)
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	4a4c      	ldr	r2, [pc, #304]	; (8003a6c <HAL_GPIO_Init+0x2b8>)
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	6193      	str	r3, [r2, #24]
 8003940:	4b4a      	ldr	r3, [pc, #296]	; (8003a6c <HAL_GPIO_Init+0x2b8>)
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800394c:	4a48      	ldr	r2, [pc, #288]	; (8003a70 <HAL_GPIO_Init+0x2bc>)
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	089b      	lsrs	r3, r3, #2
 8003952:	3302      	adds	r3, #2
 8003954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003958:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	220f      	movs	r2, #15
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4013      	ands	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a40      	ldr	r2, [pc, #256]	; (8003a74 <HAL_GPIO_Init+0x2c0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d013      	beq.n	80039a0 <HAL_GPIO_Init+0x1ec>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a3f      	ldr	r2, [pc, #252]	; (8003a78 <HAL_GPIO_Init+0x2c4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00d      	beq.n	800399c <HAL_GPIO_Init+0x1e8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a3e      	ldr	r2, [pc, #248]	; (8003a7c <HAL_GPIO_Init+0x2c8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d007      	beq.n	8003998 <HAL_GPIO_Init+0x1e4>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a3d      	ldr	r2, [pc, #244]	; (8003a80 <HAL_GPIO_Init+0x2cc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d101      	bne.n	8003994 <HAL_GPIO_Init+0x1e0>
 8003990:	2303      	movs	r3, #3
 8003992:	e006      	b.n	80039a2 <HAL_GPIO_Init+0x1ee>
 8003994:	2304      	movs	r3, #4
 8003996:	e004      	b.n	80039a2 <HAL_GPIO_Init+0x1ee>
 8003998:	2302      	movs	r3, #2
 800399a:	e002      	b.n	80039a2 <HAL_GPIO_Init+0x1ee>
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <HAL_GPIO_Init+0x1ee>
 80039a0:	2300      	movs	r3, #0
 80039a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a4:	f002 0203 	and.w	r2, r2, #3
 80039a8:	0092      	lsls	r2, r2, #2
 80039aa:	4093      	lsls	r3, r2
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80039b2:	492f      	ldr	r1, [pc, #188]	; (8003a70 <HAL_GPIO_Init+0x2bc>)
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	089b      	lsrs	r3, r3, #2
 80039b8:	3302      	adds	r3, #2
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d006      	beq.n	80039da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80039cc:	4b2d      	ldr	r3, [pc, #180]	; (8003a84 <HAL_GPIO_Init+0x2d0>)
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	492c      	ldr	r1, [pc, #176]	; (8003a84 <HAL_GPIO_Init+0x2d0>)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	608b      	str	r3, [r1, #8]
 80039d8:	e006      	b.n	80039e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039da:	4b2a      	ldr	r3, [pc, #168]	; (8003a84 <HAL_GPIO_Init+0x2d0>)
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	43db      	mvns	r3, r3
 80039e2:	4928      	ldr	r1, [pc, #160]	; (8003a84 <HAL_GPIO_Init+0x2d0>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d006      	beq.n	8003a02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80039f4:	4b23      	ldr	r3, [pc, #140]	; (8003a84 <HAL_GPIO_Init+0x2d0>)
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	4922      	ldr	r1, [pc, #136]	; (8003a84 <HAL_GPIO_Init+0x2d0>)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60cb      	str	r3, [r1, #12]
 8003a00:	e006      	b.n	8003a10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <HAL_GPIO_Init+0x2d0>)
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	491e      	ldr	r1, [pc, #120]	; (8003a84 <HAL_GPIO_Init+0x2d0>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d006      	beq.n	8003a2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a1c:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <HAL_GPIO_Init+0x2d0>)
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	4918      	ldr	r1, [pc, #96]	; (8003a84 <HAL_GPIO_Init+0x2d0>)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	604b      	str	r3, [r1, #4]
 8003a28:	e006      	b.n	8003a38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a2a:	4b16      	ldr	r3, [pc, #88]	; (8003a84 <HAL_GPIO_Init+0x2d0>)
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	4914      	ldr	r1, [pc, #80]	; (8003a84 <HAL_GPIO_Init+0x2d0>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d021      	beq.n	8003a88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a44:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <HAL_GPIO_Init+0x2d0>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	490e      	ldr	r1, [pc, #56]	; (8003a84 <HAL_GPIO_Init+0x2d0>)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]
 8003a50:	e021      	b.n	8003a96 <HAL_GPIO_Init+0x2e2>
 8003a52:	bf00      	nop
 8003a54:	10320000 	.word	0x10320000
 8003a58:	10310000 	.word	0x10310000
 8003a5c:	10220000 	.word	0x10220000
 8003a60:	10210000 	.word	0x10210000
 8003a64:	10120000 	.word	0x10120000
 8003a68:	10110000 	.word	0x10110000
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40010000 	.word	0x40010000
 8003a74:	40010800 	.word	0x40010800
 8003a78:	40010c00 	.word	0x40010c00
 8003a7c:	40011000 	.word	0x40011000
 8003a80:	40011400 	.word	0x40011400
 8003a84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <HAL_GPIO_Init+0x304>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	4909      	ldr	r1, [pc, #36]	; (8003ab8 <HAL_GPIO_Init+0x304>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	3301      	adds	r3, #1
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f47f ae8e 	bne.w	80037c8 <HAL_GPIO_Init+0x14>
  }
}
 8003aac:	bf00      	nop
 8003aae:	bf00      	nop
 8003ab0:	372c      	adds	r7, #44	; 0x2c
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	40010400 	.word	0x40010400

08003abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e12b      	b.n	8003d26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fe fe96 	bl	8002814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2224      	movs	r2, #36	; 0x24
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0201 	bic.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b20:	f001 fe9e 	bl	8005860 <HAL_RCC_GetPCLK1Freq>
 8003b24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	4a81      	ldr	r2, [pc, #516]	; (8003d30 <HAL_I2C_Init+0x274>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d807      	bhi.n	8003b40 <HAL_I2C_Init+0x84>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4a80      	ldr	r2, [pc, #512]	; (8003d34 <HAL_I2C_Init+0x278>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	bf94      	ite	ls
 8003b38:	2301      	movls	r3, #1
 8003b3a:	2300      	movhi	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	e006      	b.n	8003b4e <HAL_I2C_Init+0x92>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4a7d      	ldr	r2, [pc, #500]	; (8003d38 <HAL_I2C_Init+0x27c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	bf94      	ite	ls
 8003b48:	2301      	movls	r3, #1
 8003b4a:	2300      	movhi	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e0e7      	b.n	8003d26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a78      	ldr	r2, [pc, #480]	; (8003d3c <HAL_I2C_Init+0x280>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	0c9b      	lsrs	r3, r3, #18
 8003b60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4a6a      	ldr	r2, [pc, #424]	; (8003d30 <HAL_I2C_Init+0x274>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d802      	bhi.n	8003b90 <HAL_I2C_Init+0xd4>
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	e009      	b.n	8003ba4 <HAL_I2C_Init+0xe8>
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	4a69      	ldr	r2, [pc, #420]	; (8003d40 <HAL_I2C_Init+0x284>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	099b      	lsrs	r3, r3, #6
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	495c      	ldr	r1, [pc, #368]	; (8003d30 <HAL_I2C_Init+0x274>)
 8003bc0:	428b      	cmp	r3, r1
 8003bc2:	d819      	bhi.n	8003bf8 <HAL_I2C_Init+0x13c>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1e59      	subs	r1, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bd2:	1c59      	adds	r1, r3, #1
 8003bd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bd8:	400b      	ands	r3, r1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_I2C_Init+0x138>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1e59      	subs	r1, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bec:	3301      	adds	r3, #1
 8003bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf2:	e051      	b.n	8003c98 <HAL_I2C_Init+0x1dc>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	e04f      	b.n	8003c98 <HAL_I2C_Init+0x1dc>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d111      	bne.n	8003c24 <HAL_I2C_Init+0x168>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1e58      	subs	r0, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6859      	ldr	r1, [r3, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	440b      	add	r3, r1
 8003c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c12:	3301      	adds	r3, #1
 8003c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf0c      	ite	eq
 8003c1c:	2301      	moveq	r3, #1
 8003c1e:	2300      	movne	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	e012      	b.n	8003c4a <HAL_I2C_Init+0x18e>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1e58      	subs	r0, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	0099      	lsls	r1, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Init+0x196>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e022      	b.n	8003c98 <HAL_I2C_Init+0x1dc>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10e      	bne.n	8003c78 <HAL_I2C_Init+0x1bc>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1e58      	subs	r0, r3, #1
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6859      	ldr	r1, [r3, #4]
 8003c62:	460b      	mov	r3, r1
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	440b      	add	r3, r1
 8003c68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c76:	e00f      	b.n	8003c98 <HAL_I2C_Init+0x1dc>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1e58      	subs	r0, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6859      	ldr	r1, [r3, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	0099      	lsls	r1, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c8e:	3301      	adds	r3, #1
 8003c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	6809      	ldr	r1, [r1, #0]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69da      	ldr	r2, [r3, #28]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6911      	ldr	r1, [r2, #16]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68d2      	ldr	r2, [r2, #12]
 8003cd2:	4311      	orrs	r1, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	000186a0 	.word	0x000186a0
 8003d34:	001e847f 	.word	0x001e847f
 8003d38:	003d08ff 	.word	0x003d08ff
 8003d3c:	431bde83 	.word	0x431bde83
 8003d40:	10624dd3 	.word	0x10624dd3

08003d44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	607a      	str	r2, [r7, #4]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	460b      	mov	r3, r1
 8003d52:	817b      	strh	r3, [r7, #10]
 8003d54:	4613      	mov	r3, r2
 8003d56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d58:	f7fe ffc4 	bl	8002ce4 <HAL_GetTick>
 8003d5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	f040 80e0 	bne.w	8003f2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	2319      	movs	r3, #25
 8003d72:	2201      	movs	r2, #1
 8003d74:	4970      	ldr	r1, [pc, #448]	; (8003f38 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 ff72 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d82:	2302      	movs	r3, #2
 8003d84:	e0d3      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_I2C_Master_Transmit+0x50>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e0cc      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x1ea>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d007      	beq.n	8003dba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0201 	orr.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2221      	movs	r2, #33	; 0x21
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2210      	movs	r2, #16
 8003dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	893a      	ldrh	r2, [r7, #8]
 8003dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4a50      	ldr	r2, [pc, #320]	; (8003f3c <HAL_I2C_Master_Transmit+0x1f8>)
 8003dfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003dfc:	8979      	ldrh	r1, [r7, #10]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	6a3a      	ldr	r2, [r7, #32]
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 fd2c 	bl	8004860 <I2C_MasterRequestWrite>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e08d      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e28:	e066      	b.n	8003ef8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	6a39      	ldr	r1, [r7, #32]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f001 f830 	bl	8004e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00d      	beq.n	8003e56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d107      	bne.n	8003e52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e06b      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	781a      	ldrb	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d11b      	bne.n	8003ecc <HAL_I2C_Master_Transmit+0x188>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d017      	beq.n	8003ecc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	6a39      	ldr	r1, [r7, #32]
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f001 f827 	bl	8004f24 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00d      	beq.n	8003ef8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d107      	bne.n	8003ef4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e01a      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d194      	bne.n	8003e2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	e000      	b.n	8003f2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
  }
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	00100002 	.word	0x00100002
 8003f3c:	ffff0000 	.word	0xffff0000

08003f40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	4608      	mov	r0, r1
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4603      	mov	r3, r0
 8003f50:	817b      	strh	r3, [r7, #10]
 8003f52:	460b      	mov	r3, r1
 8003f54:	813b      	strh	r3, [r7, #8]
 8003f56:	4613      	mov	r3, r2
 8003f58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f5a:	f7fe fec3 	bl	8002ce4 <HAL_GetTick>
 8003f5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	f040 80d9 	bne.w	8004120 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	2319      	movs	r3, #25
 8003f74:	2201      	movs	r2, #1
 8003f76:	496d      	ldr	r1, [pc, #436]	; (800412c <HAL_I2C_Mem_Write+0x1ec>)
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 fe71 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f84:	2302      	movs	r3, #2
 8003f86:	e0cc      	b.n	8004122 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_I2C_Mem_Write+0x56>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e0c5      	b.n	8004122 <HAL_I2C_Mem_Write+0x1e2>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d007      	beq.n	8003fbc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2221      	movs	r2, #33	; 0x21
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2240      	movs	r2, #64	; 0x40
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a3a      	ldr	r2, [r7, #32]
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4a4d      	ldr	r2, [pc, #308]	; (8004130 <HAL_I2C_Mem_Write+0x1f0>)
 8003ffc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ffe:	88f8      	ldrh	r0, [r7, #6]
 8004000:	893a      	ldrh	r2, [r7, #8]
 8004002:	8979      	ldrh	r1, [r7, #10]
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	9301      	str	r3, [sp, #4]
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	4603      	mov	r3, r0
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 fca8 	bl	8004964 <I2C_RequestMemoryWrite>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d052      	beq.n	80040c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e081      	b.n	8004122 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 ff36 	bl	8004e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00d      	beq.n	800404a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	2b04      	cmp	r3, #4
 8004034:	d107      	bne.n	8004046 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004044:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e06b      	b.n	8004122 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	781a      	ldrb	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b04      	cmp	r3, #4
 8004086:	d11b      	bne.n	80040c0 <HAL_I2C_Mem_Write+0x180>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408c:	2b00      	cmp	r3, #0
 800408e:	d017      	beq.n	80040c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	781a      	ldrb	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1aa      	bne.n	800401e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 ff29 	bl	8004f24 <I2C_WaitOnBTFFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00d      	beq.n	80040f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d107      	bne.n	80040f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e016      	b.n	8004122 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	e000      	b.n	8004122 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004120:	2302      	movs	r3, #2
  }
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	00100002 	.word	0x00100002
 8004130:	ffff0000 	.word	0xffff0000

08004134 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08c      	sub	sp, #48	; 0x30
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	4608      	mov	r0, r1
 800413e:	4611      	mov	r1, r2
 8004140:	461a      	mov	r2, r3
 8004142:	4603      	mov	r3, r0
 8004144:	817b      	strh	r3, [r7, #10]
 8004146:	460b      	mov	r3, r1
 8004148:	813b      	strh	r3, [r7, #8]
 800414a:	4613      	mov	r3, r2
 800414c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004152:	f7fe fdc7 	bl	8002ce4 <HAL_GetTick>
 8004156:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b20      	cmp	r3, #32
 8004162:	f040 8244 	bne.w	80045ee <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	2319      	movs	r3, #25
 800416c:	2201      	movs	r2, #1
 800416e:	4982      	ldr	r1, [pc, #520]	; (8004378 <HAL_I2C_Mem_Read+0x244>)
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 fd75 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800417c:	2302      	movs	r3, #2
 800417e:	e237      	b.n	80045f0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_I2C_Mem_Read+0x5a>
 800418a:	2302      	movs	r3, #2
 800418c:	e230      	b.n	80045f0 <HAL_I2C_Mem_Read+0x4bc>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d007      	beq.n	80041b4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2222      	movs	r2, #34	; 0x22
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2240      	movs	r2, #64	; 0x40
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80041e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4a62      	ldr	r2, [pc, #392]	; (800437c <HAL_I2C_Mem_Read+0x248>)
 80041f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041f6:	88f8      	ldrh	r0, [r7, #6]
 80041f8:	893a      	ldrh	r2, [r7, #8]
 80041fa:	8979      	ldrh	r1, [r7, #10]
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	9301      	str	r3, [sp, #4]
 8004200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	4603      	mov	r3, r0
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 fc42 	bl	8004a90 <I2C_RequestMemoryRead>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e1ec      	b.n	80045f0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421a:	2b00      	cmp	r3, #0
 800421c:	d113      	bne.n	8004246 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	61fb      	str	r3, [r7, #28]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	61fb      	str	r3, [r7, #28]
 8004232:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	e1c0      	b.n	80045c8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424a:	2b01      	cmp	r3, #1
 800424c:	d11e      	bne.n	800428c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800425c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800425e:	b672      	cpsid	i
}
 8004260:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004262:	2300      	movs	r3, #0
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	61bb      	str	r3, [r7, #24]
 8004276:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004286:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004288:	b662      	cpsie	i
}
 800428a:	e035      	b.n	80042f8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004290:	2b02      	cmp	r3, #2
 8004292:	d11e      	bne.n	80042d2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80042a4:	b672      	cpsid	i
}
 80042a6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80042ce:	b662      	cpsie	i
}
 80042d0:	e012      	b.n	80042f8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042e0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e2:	2300      	movs	r3, #0
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80042f8:	e166      	b.n	80045c8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fe:	2b03      	cmp	r3, #3
 8004300:	f200 811f 	bhi.w	8004542 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004308:	2b01      	cmp	r3, #1
 800430a:	d123      	bne.n	8004354 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800430c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fe4f 	bl	8004fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e167      	b.n	80045f0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004352:	e139      	b.n	80045c8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004358:	2b02      	cmp	r3, #2
 800435a:	d152      	bne.n	8004402 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004362:	2200      	movs	r2, #0
 8004364:	4906      	ldr	r1, [pc, #24]	; (8004380 <HAL_I2C_Mem_Read+0x24c>)
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 fc7a 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e13c      	b.n	80045f0 <HAL_I2C_Mem_Read+0x4bc>
 8004376:	bf00      	nop
 8004378:	00100002 	.word	0x00100002
 800437c:	ffff0000 	.word	0xffff0000
 8004380:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004384:	b672      	cpsid	i
}
 8004386:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004396:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80043ca:	b662      	cpsie	i
}
 80043cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004400:	e0e2      	b.n	80045c8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	2200      	movs	r2, #0
 800440a:	497b      	ldr	r1, [pc, #492]	; (80045f8 <HAL_I2C_Mem_Read+0x4c4>)
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fc27 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0e9      	b.n	80045f0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800442c:	b672      	cpsid	i
}
 800442e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004462:	4b66      	ldr	r3, [pc, #408]	; (80045fc <HAL_I2C_Mem_Read+0x4c8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	08db      	lsrs	r3, r3, #3
 8004468:	4a65      	ldr	r2, [pc, #404]	; (8004600 <HAL_I2C_Mem_Read+0x4cc>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	0a1a      	lsrs	r2, r3, #8
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	00da      	lsls	r2, r3, #3
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	3b01      	subs	r3, #1
 8004480:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d118      	bne.n	80044ba <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f043 0220 	orr.w	r2, r3, #32
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80044aa:	b662      	cpsie	i
}
 80044ac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e09a      	b.n	80045f0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d1d9      	bne.n	800447c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	3b01      	subs	r3, #1
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800450a:	b662      	cpsie	i
}
 800450c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004540:	e042      	b.n	80045c8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004544:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fd34 	bl	8004fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e04c      	b.n	80045f0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004572:	3b01      	subs	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b04      	cmp	r3, #4
 8004594:	d118      	bne.n	80045c8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f47f ae94 	bne.w	80042fa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	e000      	b.n	80045f0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80045ee:	2302      	movs	r3, #2
  }
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3728      	adds	r7, #40	; 0x28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	00010004 	.word	0x00010004
 80045fc:	20000010 	.word	0x20000010
 8004600:	14f8b589 	.word	0x14f8b589

08004604 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08a      	sub	sp, #40	; 0x28
 8004608:	af02      	add	r7, sp, #8
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	607a      	str	r2, [r7, #4]
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	460b      	mov	r3, r1
 8004612:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004614:	f7fe fb66 	bl	8002ce4 <HAL_GetTick>
 8004618:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b20      	cmp	r3, #32
 8004628:	f040 8111 	bne.w	800484e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	2319      	movs	r3, #25
 8004632:	2201      	movs	r2, #1
 8004634:	4988      	ldr	r1, [pc, #544]	; (8004858 <HAL_I2C_IsDeviceReady+0x254>)
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 fb12 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004642:	2302      	movs	r3, #2
 8004644:	e104      	b.n	8004850 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_I2C_IsDeviceReady+0x50>
 8004650:	2302      	movs	r3, #2
 8004652:	e0fd      	b.n	8004850 <HAL_I2C_IsDeviceReady+0x24c>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b01      	cmp	r3, #1
 8004668:	d007      	beq.n	800467a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f042 0201 	orr.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004688:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2224      	movs	r2, #36	; 0x24
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4a70      	ldr	r2, [pc, #448]	; (800485c <HAL_I2C_IsDeviceReady+0x258>)
 800469c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 fad0 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00d      	beq.n	80046e2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d4:	d103      	bne.n	80046de <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e0b6      	b.n	8004850 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046e2:	897b      	ldrh	r3, [r7, #10]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80046f2:	f7fe faf7 	bl	8002ce4 <HAL_GetTick>
 80046f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b02      	cmp	r3, #2
 8004704:	bf0c      	ite	eq
 8004706:	2301      	moveq	r3, #1
 8004708:	2300      	movne	r3, #0
 800470a:	b2db      	uxtb	r3, r3
 800470c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471c:	bf0c      	ite	eq
 800471e:	2301      	moveq	r3, #1
 8004720:	2300      	movne	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004726:	e025      	b.n	8004774 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004728:	f7fe fadc 	bl	8002ce4 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d302      	bcc.n	800473e <HAL_I2C_IsDeviceReady+0x13a>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d103      	bne.n	8004746 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	22a0      	movs	r2, #160	; 0xa0
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b02      	cmp	r3, #2
 8004752:	bf0c      	ite	eq
 8004754:	2301      	moveq	r3, #1
 8004756:	2300      	movne	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476a:	bf0c      	ite	eq
 800476c:	2301      	moveq	r3, #1
 800476e:	2300      	movne	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2ba0      	cmp	r3, #160	; 0xa0
 800477e:	d005      	beq.n	800478c <HAL_I2C_IsDeviceReady+0x188>
 8004780:	7dfb      	ldrb	r3, [r7, #23]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <HAL_I2C_IsDeviceReady+0x188>
 8004786:	7dbb      	ldrb	r3, [r7, #22]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0cd      	beq.n	8004728 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d129      	bne.n	80047f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b2:	2300      	movs	r3, #0
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	2319      	movs	r3, #25
 80047ce:	2201      	movs	r2, #1
 80047d0:	4921      	ldr	r1, [pc, #132]	; (8004858 <HAL_I2C_IsDeviceReady+0x254>)
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 fa44 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e036      	b.n	8004850 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	e02c      	b.n	8004850 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004804:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800480e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	2319      	movs	r3, #25
 8004816:	2201      	movs	r2, #1
 8004818:	490f      	ldr	r1, [pc, #60]	; (8004858 <HAL_I2C_IsDeviceReady+0x254>)
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fa20 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e012      	b.n	8004850 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	3301      	adds	r3, #1
 800482e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	f4ff af32 	bcc.w	800469e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
  }
}
 8004850:	4618      	mov	r0, r3
 8004852:	3720      	adds	r7, #32
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	00100002 	.word	0x00100002
 800485c:	ffff0000 	.word	0xffff0000

08004860 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af02      	add	r7, sp, #8
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	607a      	str	r2, [r7, #4]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	460b      	mov	r3, r1
 800486e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b08      	cmp	r3, #8
 800487a:	d006      	beq.n	800488a <I2C_MasterRequestWrite+0x2a>
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d003      	beq.n	800488a <I2C_MasterRequestWrite+0x2a>
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004888:	d108      	bne.n	800489c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	e00b      	b.n	80048b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	2b12      	cmp	r3, #18
 80048a2:	d107      	bne.n	80048b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f9cd 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00d      	beq.n	80048e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048da:	d103      	bne.n	80048e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e035      	b.n	8004954 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048f0:	d108      	bne.n	8004904 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048f2:	897b      	ldrh	r3, [r7, #10]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004900:	611a      	str	r2, [r3, #16]
 8004902:	e01b      	b.n	800493c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004904:	897b      	ldrh	r3, [r7, #10]
 8004906:	11db      	asrs	r3, r3, #7
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f003 0306 	and.w	r3, r3, #6
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f063 030f 	orn	r3, r3, #15
 8004914:	b2da      	uxtb	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	490e      	ldr	r1, [pc, #56]	; (800495c <I2C_MasterRequestWrite+0xfc>)
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fa16 	bl	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e010      	b.n	8004954 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004932:	897b      	ldrh	r3, [r7, #10]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	4907      	ldr	r1, [pc, #28]	; (8004960 <I2C_MasterRequestWrite+0x100>)
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fa06 	bl	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	00010008 	.word	0x00010008
 8004960:	00010002 	.word	0x00010002

08004964 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	4608      	mov	r0, r1
 800496e:	4611      	mov	r1, r2
 8004970:	461a      	mov	r2, r3
 8004972:	4603      	mov	r3, r0
 8004974:	817b      	strh	r3, [r7, #10]
 8004976:	460b      	mov	r3, r1
 8004978:	813b      	strh	r3, [r7, #8]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800498c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	2200      	movs	r2, #0
 8004996:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 f960 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b4:	d103      	bne.n	80049be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e05f      	b.n	8004a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049c2:	897b      	ldrh	r3, [r7, #10]
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	6a3a      	ldr	r2, [r7, #32]
 80049d6:	492d      	ldr	r1, [pc, #180]	; (8004a8c <I2C_RequestMemoryWrite+0x128>)
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f9bb 	bl	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e04c      	b.n	8004a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a00:	6a39      	ldr	r1, [r7, #32]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 fa46 	bl	8004e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00d      	beq.n	8004a2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d107      	bne.n	8004a26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e02b      	b.n	8004a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d105      	bne.n	8004a3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a30:	893b      	ldrh	r3, [r7, #8]
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	611a      	str	r2, [r3, #16]
 8004a3a:	e021      	b.n	8004a80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a3c:	893b      	ldrh	r3, [r7, #8]
 8004a3e:	0a1b      	lsrs	r3, r3, #8
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4c:	6a39      	ldr	r1, [r7, #32]
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 fa20 	bl	8004e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00d      	beq.n	8004a76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d107      	bne.n	8004a72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e005      	b.n	8004a82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a76:	893b      	ldrh	r3, [r7, #8]
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	00010002 	.word	0x00010002

08004a90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	4608      	mov	r0, r1
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	817b      	strh	r3, [r7, #10]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	813b      	strh	r3, [r7, #8]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ab8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ac8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f8c2 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00d      	beq.n	8004afe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af0:	d103      	bne.n	8004afa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e0aa      	b.n	8004c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004afe:	897b      	ldrh	r3, [r7, #10]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	6a3a      	ldr	r2, [r7, #32]
 8004b12:	4952      	ldr	r1, [pc, #328]	; (8004c5c <I2C_RequestMemoryRead+0x1cc>)
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f91d 	bl	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e097      	b.n	8004c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3c:	6a39      	ldr	r1, [r7, #32]
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 f9a8 	bl	8004e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00d      	beq.n	8004b66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d107      	bne.n	8004b62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e076      	b.n	8004c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b66:	88fb      	ldrh	r3, [r7, #6]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d105      	bne.n	8004b78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b6c:	893b      	ldrh	r3, [r7, #8]
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	611a      	str	r2, [r3, #16]
 8004b76:	e021      	b.n	8004bbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b78:	893b      	ldrh	r3, [r7, #8]
 8004b7a:	0a1b      	lsrs	r3, r3, #8
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b88:	6a39      	ldr	r1, [r7, #32]
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f982 	bl	8004e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00d      	beq.n	8004bb2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d107      	bne.n	8004bae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e050      	b.n	8004c54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bb2:	893b      	ldrh	r3, [r7, #8]
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbe:	6a39      	ldr	r1, [r7, #32]
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f967 	bl	8004e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00d      	beq.n	8004be8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d107      	bne.n	8004be4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e035      	b.n	8004c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bf6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f82b 	bl	8004c60 <I2C_WaitOnFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00d      	beq.n	8004c2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1e:	d103      	bne.n	8004c28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e013      	b.n	8004c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c2c:	897b      	ldrh	r3, [r7, #10]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f043 0301 	orr.w	r3, r3, #1
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	6a3a      	ldr	r2, [r7, #32]
 8004c40:	4906      	ldr	r1, [pc, #24]	; (8004c5c <I2C_RequestMemoryRead+0x1cc>)
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 f886 	bl	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	00010002 	.word	0x00010002

08004c60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c70:	e048      	b.n	8004d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c78:	d044      	beq.n	8004d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7a:	f7fe f833 	bl	8002ce4 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d302      	bcc.n	8004c90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d139      	bne.n	8004d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	0c1b      	lsrs	r3, r3, #16
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d10d      	bne.n	8004cb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	43da      	mvns	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	e00c      	b.n	8004cd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	43da      	mvns	r2, r3
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	bf0c      	ite	eq
 8004cc8:	2301      	moveq	r3, #1
 8004cca:	2300      	movne	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	461a      	mov	r2, r3
 8004cd0:	79fb      	ldrb	r3, [r7, #7]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d116      	bne.n	8004d04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	f043 0220 	orr.w	r2, r3, #32
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e023      	b.n	8004d4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	0c1b      	lsrs	r3, r3, #16
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d10d      	bne.n	8004d2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	43da      	mvns	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bf0c      	ite	eq
 8004d20:	2301      	moveq	r3, #1
 8004d22:	2300      	movne	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	e00c      	b.n	8004d44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	43da      	mvns	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4013      	ands	r3, r2
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bf0c      	ite	eq
 8004d3c:	2301      	moveq	r3, #1
 8004d3e:	2300      	movne	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	461a      	mov	r2, r3
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d093      	beq.n	8004c72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d62:	e071      	b.n	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d72:	d123      	bne.n	8004dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	f043 0204 	orr.w	r2, r3, #4
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e067      	b.n	8004e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc2:	d041      	beq.n	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc4:	f7fd ff8e 	bl	8002ce4 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d302      	bcc.n	8004dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d136      	bne.n	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	0c1b      	lsrs	r3, r3, #16
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d10c      	bne.n	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	43da      	mvns	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4013      	ands	r3, r2
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	bf14      	ite	ne
 8004df6:	2301      	movne	r3, #1
 8004df8:	2300      	moveq	r3, #0
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	e00b      	b.n	8004e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	43da      	mvns	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	bf14      	ite	ne
 8004e10:	2301      	movne	r3, #1
 8004e12:	2300      	moveq	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d016      	beq.n	8004e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e021      	b.n	8004e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	0c1b      	lsrs	r3, r3, #16
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d10c      	bne.n	8004e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	43da      	mvns	r2, r3
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bf14      	ite	ne
 8004e64:	2301      	movne	r3, #1
 8004e66:	2300      	moveq	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	e00b      	b.n	8004e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	43da      	mvns	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	4013      	ands	r3, r2
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	bf14      	ite	ne
 8004e7e:	2301      	movne	r3, #1
 8004e80:	2300      	moveq	r3, #0
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f47f af6d 	bne.w	8004d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ea0:	e034      	b.n	8004f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f8e3 	bl	800506e <I2C_IsAcknowledgeFailed>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e034      	b.n	8004f1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb8:	d028      	beq.n	8004f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eba:	f7fd ff13 	bl	8002ce4 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d302      	bcc.n	8004ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d11d      	bne.n	8004f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eda:	2b80      	cmp	r3, #128	; 0x80
 8004edc:	d016      	beq.n	8004f0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	f043 0220 	orr.w	r2, r3, #32
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e007      	b.n	8004f1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f16:	2b80      	cmp	r3, #128	; 0x80
 8004f18:	d1c3      	bne.n	8004ea2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f30:	e034      	b.n	8004f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f89b 	bl	800506e <I2C_IsAcknowledgeFailed>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e034      	b.n	8004fac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d028      	beq.n	8004f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4a:	f7fd fecb 	bl	8002ce4 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d302      	bcc.n	8004f60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d11d      	bne.n	8004f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d016      	beq.n	8004f9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	f043 0220 	orr.w	r2, r3, #32
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e007      	b.n	8004fac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d1c3      	bne.n	8004f32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fc0:	e049      	b.n	8005056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d119      	bne.n	8005004 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0210 	mvn.w	r2, #16
 8004fd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e030      	b.n	8005066 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005004:	f7fd fe6e 	bl	8002ce4 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	429a      	cmp	r2, r3
 8005012:	d302      	bcc.n	800501a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d11d      	bne.n	8005056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d016      	beq.n	8005056 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f043 0220 	orr.w	r2, r3, #32
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e007      	b.n	8005066 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005060:	2b40      	cmp	r3, #64	; 0x40
 8005062:	d1ae      	bne.n	8004fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005084:	d11b      	bne.n	80050be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800508e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f043 0204 	orr.w	r2, r3, #4
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr
	...

080050cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e272      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 8087 	beq.w	80051fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050ec:	4b92      	ldr	r3, [pc, #584]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f003 030c 	and.w	r3, r3, #12
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d00c      	beq.n	8005112 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80050f8:	4b8f      	ldr	r3, [pc, #572]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f003 030c 	and.w	r3, r3, #12
 8005100:	2b08      	cmp	r3, #8
 8005102:	d112      	bne.n	800512a <HAL_RCC_OscConfig+0x5e>
 8005104:	4b8c      	ldr	r3, [pc, #560]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800510c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005110:	d10b      	bne.n	800512a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005112:	4b89      	ldr	r3, [pc, #548]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d06c      	beq.n	80051f8 <HAL_RCC_OscConfig+0x12c>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d168      	bne.n	80051f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e24c      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005132:	d106      	bne.n	8005142 <HAL_RCC_OscConfig+0x76>
 8005134:	4b80      	ldr	r3, [pc, #512]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a7f      	ldr	r2, [pc, #508]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800513a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	e02e      	b.n	80051a0 <HAL_RCC_OscConfig+0xd4>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10c      	bne.n	8005164 <HAL_RCC_OscConfig+0x98>
 800514a:	4b7b      	ldr	r3, [pc, #492]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a7a      	ldr	r2, [pc, #488]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	4b78      	ldr	r3, [pc, #480]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a77      	ldr	r2, [pc, #476]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800515c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	e01d      	b.n	80051a0 <HAL_RCC_OscConfig+0xd4>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800516c:	d10c      	bne.n	8005188 <HAL_RCC_OscConfig+0xbc>
 800516e:	4b72      	ldr	r3, [pc, #456]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a71      	ldr	r2, [pc, #452]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	4b6f      	ldr	r3, [pc, #444]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a6e      	ldr	r2, [pc, #440]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	e00b      	b.n	80051a0 <HAL_RCC_OscConfig+0xd4>
 8005188:	4b6b      	ldr	r3, [pc, #428]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a6a      	ldr	r2, [pc, #424]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800518e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005192:	6013      	str	r3, [r2, #0]
 8005194:	4b68      	ldr	r3, [pc, #416]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a67      	ldr	r2, [pc, #412]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800519a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800519e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d013      	beq.n	80051d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a8:	f7fd fd9c 	bl	8002ce4 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051b0:	f7fd fd98 	bl	8002ce4 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b64      	cmp	r3, #100	; 0x64
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e200      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051c2:	4b5d      	ldr	r3, [pc, #372]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0f0      	beq.n	80051b0 <HAL_RCC_OscConfig+0xe4>
 80051ce:	e014      	b.n	80051fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d0:	f7fd fd88 	bl	8002ce4 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051d8:	f7fd fd84 	bl	8002ce4 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b64      	cmp	r3, #100	; 0x64
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e1ec      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ea:	4b53      	ldr	r3, [pc, #332]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1f0      	bne.n	80051d8 <HAL_RCC_OscConfig+0x10c>
 80051f6:	e000      	b.n	80051fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d063      	beq.n	80052ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005206:	4b4c      	ldr	r3, [pc, #304]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f003 030c 	and.w	r3, r3, #12
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00b      	beq.n	800522a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005212:	4b49      	ldr	r3, [pc, #292]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f003 030c 	and.w	r3, r3, #12
 800521a:	2b08      	cmp	r3, #8
 800521c:	d11c      	bne.n	8005258 <HAL_RCC_OscConfig+0x18c>
 800521e:	4b46      	ldr	r3, [pc, #280]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d116      	bne.n	8005258 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800522a:	4b43      	ldr	r3, [pc, #268]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <HAL_RCC_OscConfig+0x176>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d001      	beq.n	8005242 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e1c0      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005242:	4b3d      	ldr	r3, [pc, #244]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	4939      	ldr	r1, [pc, #228]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005252:	4313      	orrs	r3, r2
 8005254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005256:	e03a      	b.n	80052ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d020      	beq.n	80052a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005260:	4b36      	ldr	r3, [pc, #216]	; (800533c <HAL_RCC_OscConfig+0x270>)
 8005262:	2201      	movs	r2, #1
 8005264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005266:	f7fd fd3d 	bl	8002ce4 <HAL_GetTick>
 800526a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800526c:	e008      	b.n	8005280 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800526e:	f7fd fd39 	bl	8002ce4 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e1a1      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005280:	4b2d      	ldr	r3, [pc, #180]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0f0      	beq.n	800526e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800528c:	4b2a      	ldr	r3, [pc, #168]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	4927      	ldr	r1, [pc, #156]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 800529c:	4313      	orrs	r3, r2
 800529e:	600b      	str	r3, [r1, #0]
 80052a0:	e015      	b.n	80052ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052a2:	4b26      	ldr	r3, [pc, #152]	; (800533c <HAL_RCC_OscConfig+0x270>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a8:	f7fd fd1c 	bl	8002ce4 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052b0:	f7fd fd18 	bl	8002ce4 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e180      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052c2:	4b1d      	ldr	r3, [pc, #116]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f0      	bne.n	80052b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d03a      	beq.n	8005350 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d019      	beq.n	8005316 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052e2:	4b17      	ldr	r3, [pc, #92]	; (8005340 <HAL_RCC_OscConfig+0x274>)
 80052e4:	2201      	movs	r2, #1
 80052e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052e8:	f7fd fcfc 	bl	8002ce4 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052f0:	f7fd fcf8 	bl	8002ce4 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e160      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005302:	4b0d      	ldr	r3, [pc, #52]	; (8005338 <HAL_RCC_OscConfig+0x26c>)
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800530e:	2001      	movs	r0, #1
 8005310:	f000 face 	bl	80058b0 <RCC_Delay>
 8005314:	e01c      	b.n	8005350 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005316:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <HAL_RCC_OscConfig+0x274>)
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800531c:	f7fd fce2 	bl	8002ce4 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005322:	e00f      	b.n	8005344 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005324:	f7fd fcde 	bl	8002ce4 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d908      	bls.n	8005344 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e146      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
 8005336:	bf00      	nop
 8005338:	40021000 	.word	0x40021000
 800533c:	42420000 	.word	0x42420000
 8005340:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005344:	4b92      	ldr	r3, [pc, #584]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e9      	bne.n	8005324 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 80a6 	beq.w	80054aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800535e:	2300      	movs	r3, #0
 8005360:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005362:	4b8b      	ldr	r3, [pc, #556]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10d      	bne.n	800538a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800536e:	4b88      	ldr	r3, [pc, #544]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	4a87      	ldr	r2, [pc, #540]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005378:	61d3      	str	r3, [r2, #28]
 800537a:	4b85      	ldr	r3, [pc, #532]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005382:	60bb      	str	r3, [r7, #8]
 8005384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005386:	2301      	movs	r3, #1
 8005388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800538a:	4b82      	ldr	r3, [pc, #520]	; (8005594 <HAL_RCC_OscConfig+0x4c8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	2b00      	cmp	r3, #0
 8005394:	d118      	bne.n	80053c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005396:	4b7f      	ldr	r3, [pc, #508]	; (8005594 <HAL_RCC_OscConfig+0x4c8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a7e      	ldr	r2, [pc, #504]	; (8005594 <HAL_RCC_OscConfig+0x4c8>)
 800539c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053a2:	f7fd fc9f 	bl	8002ce4 <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053aa:	f7fd fc9b 	bl	8002ce4 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b64      	cmp	r3, #100	; 0x64
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e103      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053bc:	4b75      	ldr	r3, [pc, #468]	; (8005594 <HAL_RCC_OscConfig+0x4c8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f0      	beq.n	80053aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d106      	bne.n	80053de <HAL_RCC_OscConfig+0x312>
 80053d0:	4b6f      	ldr	r3, [pc, #444]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	4a6e      	ldr	r2, [pc, #440]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80053d6:	f043 0301 	orr.w	r3, r3, #1
 80053da:	6213      	str	r3, [r2, #32]
 80053dc:	e02d      	b.n	800543a <HAL_RCC_OscConfig+0x36e>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10c      	bne.n	8005400 <HAL_RCC_OscConfig+0x334>
 80053e6:	4b6a      	ldr	r3, [pc, #424]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	4a69      	ldr	r2, [pc, #420]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80053ec:	f023 0301 	bic.w	r3, r3, #1
 80053f0:	6213      	str	r3, [r2, #32]
 80053f2:	4b67      	ldr	r3, [pc, #412]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	4a66      	ldr	r2, [pc, #408]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80053f8:	f023 0304 	bic.w	r3, r3, #4
 80053fc:	6213      	str	r3, [r2, #32]
 80053fe:	e01c      	b.n	800543a <HAL_RCC_OscConfig+0x36e>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	2b05      	cmp	r3, #5
 8005406:	d10c      	bne.n	8005422 <HAL_RCC_OscConfig+0x356>
 8005408:	4b61      	ldr	r3, [pc, #388]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	4a60      	ldr	r2, [pc, #384]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 800540e:	f043 0304 	orr.w	r3, r3, #4
 8005412:	6213      	str	r3, [r2, #32]
 8005414:	4b5e      	ldr	r3, [pc, #376]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	4a5d      	ldr	r2, [pc, #372]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 800541a:	f043 0301 	orr.w	r3, r3, #1
 800541e:	6213      	str	r3, [r2, #32]
 8005420:	e00b      	b.n	800543a <HAL_RCC_OscConfig+0x36e>
 8005422:	4b5b      	ldr	r3, [pc, #364]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	4a5a      	ldr	r2, [pc, #360]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005428:	f023 0301 	bic.w	r3, r3, #1
 800542c:	6213      	str	r3, [r2, #32]
 800542e:	4b58      	ldr	r3, [pc, #352]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	4a57      	ldr	r2, [pc, #348]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005434:	f023 0304 	bic.w	r3, r3, #4
 8005438:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d015      	beq.n	800546e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005442:	f7fd fc4f 	bl	8002ce4 <HAL_GetTick>
 8005446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005448:	e00a      	b.n	8005460 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544a:	f7fd fc4b 	bl	8002ce4 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	f241 3288 	movw	r2, #5000	; 0x1388
 8005458:	4293      	cmp	r3, r2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e0b1      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005460:	4b4b      	ldr	r3, [pc, #300]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0ee      	beq.n	800544a <HAL_RCC_OscConfig+0x37e>
 800546c:	e014      	b.n	8005498 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800546e:	f7fd fc39 	bl	8002ce4 <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005474:	e00a      	b.n	800548c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005476:	f7fd fc35 	bl	8002ce4 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	f241 3288 	movw	r2, #5000	; 0x1388
 8005484:	4293      	cmp	r3, r2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e09b      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800548c:	4b40      	ldr	r3, [pc, #256]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1ee      	bne.n	8005476 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005498:	7dfb      	ldrb	r3, [r7, #23]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d105      	bne.n	80054aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800549e:	4b3c      	ldr	r3, [pc, #240]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	4a3b      	ldr	r2, [pc, #236]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80054a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f000 8087 	beq.w	80055c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054b4:	4b36      	ldr	r3, [pc, #216]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f003 030c 	and.w	r3, r3, #12
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d061      	beq.n	8005584 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d146      	bne.n	8005556 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c8:	4b33      	ldr	r3, [pc, #204]	; (8005598 <HAL_RCC_OscConfig+0x4cc>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ce:	f7fd fc09 	bl	8002ce4 <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054d4:	e008      	b.n	80054e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d6:	f7fd fc05 	bl	8002ce4 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e06d      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054e8:	4b29      	ldr	r3, [pc, #164]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1f0      	bne.n	80054d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fc:	d108      	bne.n	8005510 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80054fe:	4b24      	ldr	r3, [pc, #144]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	4921      	ldr	r1, [pc, #132]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 800550c:	4313      	orrs	r3, r2
 800550e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005510:	4b1f      	ldr	r3, [pc, #124]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a19      	ldr	r1, [r3, #32]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	430b      	orrs	r3, r1
 8005522:	491b      	ldr	r1, [pc, #108]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005524:	4313      	orrs	r3, r2
 8005526:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005528:	4b1b      	ldr	r3, [pc, #108]	; (8005598 <HAL_RCC_OscConfig+0x4cc>)
 800552a:	2201      	movs	r2, #1
 800552c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552e:	f7fd fbd9 	bl	8002ce4 <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005536:	f7fd fbd5 	bl	8002ce4 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e03d      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005548:	4b11      	ldr	r3, [pc, #68]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0f0      	beq.n	8005536 <HAL_RCC_OscConfig+0x46a>
 8005554:	e035      	b.n	80055c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005556:	4b10      	ldr	r3, [pc, #64]	; (8005598 <HAL_RCC_OscConfig+0x4cc>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555c:	f7fd fbc2 	bl	8002ce4 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005564:	f7fd fbbe 	bl	8002ce4 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e026      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005576:	4b06      	ldr	r3, [pc, #24]	; (8005590 <HAL_RCC_OscConfig+0x4c4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f0      	bne.n	8005564 <HAL_RCC_OscConfig+0x498>
 8005582:	e01e      	b.n	80055c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d107      	bne.n	800559c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e019      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
 8005590:	40021000 	.word	0x40021000
 8005594:	40007000 	.word	0x40007000
 8005598:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <HAL_RCC_OscConfig+0x500>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d106      	bne.n	80055be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d001      	beq.n	80055c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40021000 	.word	0x40021000

080055d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0d0      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055e4:	4b6a      	ldr	r3, [pc, #424]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d910      	bls.n	8005614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f2:	4b67      	ldr	r3, [pc, #412]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f023 0207 	bic.w	r2, r3, #7
 80055fa:	4965      	ldr	r1, [pc, #404]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	4313      	orrs	r3, r2
 8005600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005602:	4b63      	ldr	r3, [pc, #396]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d001      	beq.n	8005614 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e0b8      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d020      	beq.n	8005662 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800562c:	4b59      	ldr	r3, [pc, #356]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	4a58      	ldr	r2, [pc, #352]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005632:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005636:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005644:	4b53      	ldr	r3, [pc, #332]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	4a52      	ldr	r2, [pc, #328]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 800564a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800564e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005650:	4b50      	ldr	r3, [pc, #320]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	494d      	ldr	r1, [pc, #308]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 800565e:	4313      	orrs	r3, r2
 8005660:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d040      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d107      	bne.n	8005686 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005676:	4b47      	ldr	r3, [pc, #284]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d115      	bne.n	80056ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e07f      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d107      	bne.n	800569e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800568e:	4b41      	ldr	r3, [pc, #260]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d109      	bne.n	80056ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e073      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569e:	4b3d      	ldr	r3, [pc, #244]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e06b      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ae:	4b39      	ldr	r3, [pc, #228]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f023 0203 	bic.w	r2, r3, #3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	4936      	ldr	r1, [pc, #216]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056c0:	f7fd fb10 	bl	8002ce4 <HAL_GetTick>
 80056c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c6:	e00a      	b.n	80056de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c8:	f7fd fb0c 	bl	8002ce4 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e053      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056de:	4b2d      	ldr	r3, [pc, #180]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f003 020c 	and.w	r2, r3, #12
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d1eb      	bne.n	80056c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056f0:	4b27      	ldr	r3, [pc, #156]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d210      	bcs.n	8005720 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fe:	4b24      	ldr	r3, [pc, #144]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f023 0207 	bic.w	r2, r3, #7
 8005706:	4922      	ldr	r1, [pc, #136]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	4313      	orrs	r3, r2
 800570c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800570e:	4b20      	ldr	r3, [pc, #128]	; (8005790 <HAL_RCC_ClockConfig+0x1c0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d001      	beq.n	8005720 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e032      	b.n	8005786 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800572c:	4b19      	ldr	r3, [pc, #100]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	4916      	ldr	r1, [pc, #88]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 800573a:	4313      	orrs	r3, r2
 800573c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d009      	beq.n	800575e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800574a:	4b12      	ldr	r3, [pc, #72]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	490e      	ldr	r1, [pc, #56]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 800575a:	4313      	orrs	r3, r2
 800575c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800575e:	f000 f821 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8005762:	4602      	mov	r2, r0
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <HAL_RCC_ClockConfig+0x1c4>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	091b      	lsrs	r3, r3, #4
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	490a      	ldr	r1, [pc, #40]	; (8005798 <HAL_RCC_ClockConfig+0x1c8>)
 8005770:	5ccb      	ldrb	r3, [r1, r3]
 8005772:	fa22 f303 	lsr.w	r3, r2, r3
 8005776:	4a09      	ldr	r2, [pc, #36]	; (800579c <HAL_RCC_ClockConfig+0x1cc>)
 8005778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800577a:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <HAL_RCC_ClockConfig+0x1d0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f7fd fa6e 	bl	8002c60 <HAL_InitTick>

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40022000 	.word	0x40022000
 8005794:	40021000 	.word	0x40021000
 8005798:	0800be20 	.word	0x0800be20
 800579c:	20000010 	.word	0x20000010
 80057a0:	20000014 	.word	0x20000014

080057a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	2300      	movs	r3, #0
 80057b0:	60bb      	str	r3, [r7, #8]
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	2300      	movs	r3, #0
 80057b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80057be:	4b1e      	ldr	r3, [pc, #120]	; (8005838 <HAL_RCC_GetSysClockFreq+0x94>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f003 030c 	and.w	r3, r3, #12
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d002      	beq.n	80057d4 <HAL_RCC_GetSysClockFreq+0x30>
 80057ce:	2b08      	cmp	r3, #8
 80057d0:	d003      	beq.n	80057da <HAL_RCC_GetSysClockFreq+0x36>
 80057d2:	e027      	b.n	8005824 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80057d4:	4b19      	ldr	r3, [pc, #100]	; (800583c <HAL_RCC_GetSysClockFreq+0x98>)
 80057d6:	613b      	str	r3, [r7, #16]
      break;
 80057d8:	e027      	b.n	800582a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	0c9b      	lsrs	r3, r3, #18
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	4a17      	ldr	r2, [pc, #92]	; (8005840 <HAL_RCC_GetSysClockFreq+0x9c>)
 80057e4:	5cd3      	ldrb	r3, [r2, r3]
 80057e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d010      	beq.n	8005814 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80057f2:	4b11      	ldr	r3, [pc, #68]	; (8005838 <HAL_RCC_GetSysClockFreq+0x94>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	0c5b      	lsrs	r3, r3, #17
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	4a11      	ldr	r2, [pc, #68]	; (8005844 <HAL_RCC_GetSysClockFreq+0xa0>)
 80057fe:	5cd3      	ldrb	r3, [r2, r3]
 8005800:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a0d      	ldr	r2, [pc, #52]	; (800583c <HAL_RCC_GetSysClockFreq+0x98>)
 8005806:	fb03 f202 	mul.w	r2, r3, r2
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	e004      	b.n	800581e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a0c      	ldr	r2, [pc, #48]	; (8005848 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005818:	fb02 f303 	mul.w	r3, r2, r3
 800581c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	613b      	str	r3, [r7, #16]
      break;
 8005822:	e002      	b.n	800582a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005824:	4b05      	ldr	r3, [pc, #20]	; (800583c <HAL_RCC_GetSysClockFreq+0x98>)
 8005826:	613b      	str	r3, [r7, #16]
      break;
 8005828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800582a:	693b      	ldr	r3, [r7, #16]
}
 800582c:	4618      	mov	r0, r3
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40021000 	.word	0x40021000
 800583c:	007a1200 	.word	0x007a1200
 8005840:	0800be38 	.word	0x0800be38
 8005844:	0800be48 	.word	0x0800be48
 8005848:	003d0900 	.word	0x003d0900

0800584c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005850:	4b02      	ldr	r3, [pc, #8]	; (800585c <HAL_RCC_GetHCLKFreq+0x10>)
 8005852:	681b      	ldr	r3, [r3, #0]
}
 8005854:	4618      	mov	r0, r3
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr
 800585c:	20000010 	.word	0x20000010

08005860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005864:	f7ff fff2 	bl	800584c <HAL_RCC_GetHCLKFreq>
 8005868:	4602      	mov	r2, r0
 800586a:	4b05      	ldr	r3, [pc, #20]	; (8005880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	0a1b      	lsrs	r3, r3, #8
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	4903      	ldr	r1, [pc, #12]	; (8005884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005876:	5ccb      	ldrb	r3, [r1, r3]
 8005878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800587c:	4618      	mov	r0, r3
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40021000 	.word	0x40021000
 8005884:	0800be30 	.word	0x0800be30

08005888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800588c:	f7ff ffde 	bl	800584c <HAL_RCC_GetHCLKFreq>
 8005890:	4602      	mov	r2, r0
 8005892:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	0adb      	lsrs	r3, r3, #11
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	4903      	ldr	r1, [pc, #12]	; (80058ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800589e:	5ccb      	ldrb	r3, [r1, r3]
 80058a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40021000 	.word	0x40021000
 80058ac:	0800be30 	.word	0x0800be30

080058b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80058b8:	4b0a      	ldr	r3, [pc, #40]	; (80058e4 <RCC_Delay+0x34>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a0a      	ldr	r2, [pc, #40]	; (80058e8 <RCC_Delay+0x38>)
 80058be:	fba2 2303 	umull	r2, r3, r2, r3
 80058c2:	0a5b      	lsrs	r3, r3, #9
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	fb02 f303 	mul.w	r3, r2, r3
 80058ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80058cc:	bf00      	nop
  }
  while (Delay --);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	1e5a      	subs	r2, r3, #1
 80058d2:	60fa      	str	r2, [r7, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1f9      	bne.n	80058cc <RCC_Delay+0x1c>
}
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	bc80      	pop	{r7}
 80058e2:	4770      	bx	lr
 80058e4:	20000010 	.word	0x20000010
 80058e8:	10624dd3 	.word	0x10624dd3

080058ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	2300      	movs	r3, #0
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d07d      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005908:	2300      	movs	r3, #0
 800590a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800590c:	4b4f      	ldr	r3, [pc, #316]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10d      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005918:	4b4c      	ldr	r3, [pc, #304]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	4a4b      	ldr	r2, [pc, #300]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800591e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005922:	61d3      	str	r3, [r2, #28]
 8005924:	4b49      	ldr	r3, [pc, #292]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005930:	2301      	movs	r3, #1
 8005932:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005934:	4b46      	ldr	r3, [pc, #280]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593c:	2b00      	cmp	r3, #0
 800593e:	d118      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005940:	4b43      	ldr	r3, [pc, #268]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a42      	ldr	r2, [pc, #264]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800594a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800594c:	f7fd f9ca 	bl	8002ce4 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005952:	e008      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005954:	f7fd f9c6 	bl	8002ce4 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b64      	cmp	r3, #100	; 0x64
 8005960:	d901      	bls.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e06d      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005966:	4b3a      	ldr	r3, [pc, #232]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0f0      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005972:	4b36      	ldr	r3, [pc, #216]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d02e      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	429a      	cmp	r2, r3
 800598e:	d027      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005990:	4b2e      	ldr	r3, [pc, #184]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005998:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800599a:	4b2e      	ldr	r3, [pc, #184]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800599c:	2201      	movs	r2, #1
 800599e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059a0:	4b2c      	ldr	r3, [pc, #176]	; (8005a54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80059a6:	4a29      	ldr	r2, [pc, #164]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d014      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b6:	f7fd f995 	bl	8002ce4 <HAL_GetTick>
 80059ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059bc:	e00a      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059be:	f7fd f991 	bl	8002ce4 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d901      	bls.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e036      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d4:	4b1d      	ldr	r3, [pc, #116]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d0ee      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059e0:	4b1a      	ldr	r3, [pc, #104]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	4917      	ldr	r1, [pc, #92]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80059f2:	7dfb      	ldrb	r3, [r7, #23]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d105      	bne.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059f8:	4b14      	ldr	r3, [pc, #80]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	4a13      	ldr	r2, [pc, #76]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d008      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a10:	4b0e      	ldr	r3, [pc, #56]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	490b      	ldr	r1, [pc, #44]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0310 	and.w	r3, r3, #16
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d008      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a2e:	4b07      	ldr	r3, [pc, #28]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	4904      	ldr	r1, [pc, #16]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	40007000 	.word	0x40007000
 8005a54:	42420440 	.word	0x42420440

08005a58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	2300      	movs	r3, #0
 8005a66:	61fb      	str	r3, [r7, #28]
 8005a68:	2300      	movs	r3, #0
 8005a6a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	2300      	movs	r3, #0
 8005a72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b10      	cmp	r3, #16
 8005a78:	d00a      	beq.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b10      	cmp	r3, #16
 8005a7e:	f200 808a 	bhi.w	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d045      	beq.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d075      	beq.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005a8e:	e082      	b.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005a90:	4b46      	ldr	r3, [pc, #280]	; (8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005a96:	4b45      	ldr	r3, [pc, #276]	; (8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d07b      	beq.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	0c9b      	lsrs	r3, r3, #18
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	4a41      	ldr	r2, [pc, #260]	; (8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005aac:	5cd3      	ldrb	r3, [r2, r3]
 8005aae:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d015      	beq.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005aba:	4b3c      	ldr	r3, [pc, #240]	; (8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	0c5b      	lsrs	r3, r3, #17
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	4a3b      	ldr	r2, [pc, #236]	; (8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005ac6:	5cd3      	ldrb	r3, [r2, r3]
 8005ac8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00d      	beq.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005ad4:	4a38      	ldr	r2, [pc, #224]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	fb02 f303 	mul.w	r3, r2, r3
 8005ae2:	61fb      	str	r3, [r7, #28]
 8005ae4:	e004      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	4a34      	ldr	r2, [pc, #208]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005aea:	fb02 f303 	mul.w	r3, r2, r3
 8005aee:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005af0:	4b2e      	ldr	r3, [pc, #184]	; (8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005afc:	d102      	bne.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	61bb      	str	r3, [r7, #24]
      break;
 8005b02:	e04a      	b.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	4a2d      	ldr	r2, [pc, #180]	; (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0e:	085b      	lsrs	r3, r3, #1
 8005b10:	61bb      	str	r3, [r7, #24]
      break;
 8005b12:	e042      	b.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005b14:	4b25      	ldr	r3, [pc, #148]	; (8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b24:	d108      	bne.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005b30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	e01f      	b.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b42:	d109      	bne.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005b44:	4b19      	ldr	r3, [pc, #100]	; (8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005b50:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005b54:	61bb      	str	r3, [r7, #24]
 8005b56:	e00f      	b.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b62:	d11c      	bne.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005b64:	4b11      	ldr	r3, [pc, #68]	; (8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d016      	beq.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005b70:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005b74:	61bb      	str	r3, [r7, #24]
      break;
 8005b76:	e012      	b.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005b78:	e011      	b.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005b7a:	f7ff fe85 	bl	8005888 <HAL_RCC_GetPCLK2Freq>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	0b9b      	lsrs	r3, r3, #14
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b92:	61bb      	str	r3, [r7, #24]
      break;
 8005b94:	e004      	b.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b96:	bf00      	nop
 8005b98:	e002      	b.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b9a:	bf00      	nop
 8005b9c:	e000      	b.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005b9e:	bf00      	nop
    }
  }
  return (frequency);
 8005ba0:	69bb      	ldr	r3, [r7, #24]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	0800be4c 	.word	0x0800be4c
 8005bb4:	0800be5c 	.word	0x0800be5c
 8005bb8:	007a1200 	.word	0x007a1200
 8005bbc:	003d0900 	.word	0x003d0900
 8005bc0:	aaaaaaab 	.word	0xaaaaaaab

08005bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e041      	b.n	8005c5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d106      	bne.n	8005bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fc fe50 	bl	8002890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3304      	adds	r3, #4
 8005c00:	4619      	mov	r1, r3
 8005c02:	4610      	mov	r0, r2
 8005c04:	f000 fc30 	bl	8006468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d001      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e03a      	b.n	8005cf2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0201 	orr.w	r2, r2, #1
 8005c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <HAL_TIM_Base_Start_IT+0x98>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00e      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x58>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca6:	d009      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x58>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a14      	ldr	r2, [pc, #80]	; (8005d00 <HAL_TIM_Base_Start_IT+0x9c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d004      	beq.n	8005cbc <HAL_TIM_Base_Start_IT+0x58>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a13      	ldr	r2, [pc, #76]	; (8005d04 <HAL_TIM_Base_Start_IT+0xa0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d111      	bne.n	8005ce0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b06      	cmp	r3, #6
 8005ccc:	d010      	beq.n	8005cf0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0201 	orr.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cde:	e007      	b.n	8005cf0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bc80      	pop	{r7}
 8005cfa:	4770      	bx	lr
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40000800 	.word	0x40000800

08005d08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e041      	b.n	8005d9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f839 	bl	8005da6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3304      	adds	r3, #4
 8005d44:	4619      	mov	r1, r3
 8005d46:	4610      	mov	r0, r2
 8005d48:	f000 fb8e 	bl	8006468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d109      	bne.n	8005ddc <HAL_TIM_PWM_Start+0x24>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	bf14      	ite	ne
 8005dd4:	2301      	movne	r3, #1
 8005dd6:	2300      	moveq	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	e022      	b.n	8005e22 <HAL_TIM_PWM_Start+0x6a>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d109      	bne.n	8005df6 <HAL_TIM_PWM_Start+0x3e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	bf14      	ite	ne
 8005dee:	2301      	movne	r3, #1
 8005df0:	2300      	moveq	r3, #0
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	e015      	b.n	8005e22 <HAL_TIM_PWM_Start+0x6a>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d109      	bne.n	8005e10 <HAL_TIM_PWM_Start+0x58>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	bf14      	ite	ne
 8005e08:	2301      	movne	r3, #1
 8005e0a:	2300      	moveq	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	e008      	b.n	8005e22 <HAL_TIM_PWM_Start+0x6a>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	bf14      	ite	ne
 8005e1c:	2301      	movne	r3, #1
 8005e1e:	2300      	moveq	r3, #0
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e05e      	b.n	8005ee8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <HAL_TIM_PWM_Start+0x82>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e38:	e013      	b.n	8005e62 <HAL_TIM_PWM_Start+0xaa>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d104      	bne.n	8005e4a <HAL_TIM_PWM_Start+0x92>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e48:	e00b      	b.n	8005e62 <HAL_TIM_PWM_Start+0xaa>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d104      	bne.n	8005e5a <HAL_TIM_PWM_Start+0xa2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e58:	e003      	b.n	8005e62 <HAL_TIM_PWM_Start+0xaa>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2201      	movs	r2, #1
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fd7c 	bl	8006968 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1e      	ldr	r2, [pc, #120]	; (8005ef0 <HAL_TIM_PWM_Start+0x138>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d107      	bne.n	8005e8a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a18      	ldr	r2, [pc, #96]	; (8005ef0 <HAL_TIM_PWM_Start+0x138>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00e      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0xfa>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9c:	d009      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0xfa>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a14      	ldr	r2, [pc, #80]	; (8005ef4 <HAL_TIM_PWM_Start+0x13c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d004      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0xfa>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a12      	ldr	r2, [pc, #72]	; (8005ef8 <HAL_TIM_PWM_Start+0x140>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d111      	bne.n	8005ed6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b06      	cmp	r3, #6
 8005ec2:	d010      	beq.n	8005ee6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed4:	e007      	b.n	8005ee6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0201 	orr.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40012c00 	.word	0x40012c00
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800

08005efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d122      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f003 0302 	and.w	r3, r3, #2
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d11b      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0202 	mvn.w	r2, #2
 8005f28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fa76 	bl	8006430 <HAL_TIM_IC_CaptureCallback>
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fa69 	bl	800641e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fa78 	bl	8006442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	d122      	bne.n	8005fac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b04      	cmp	r3, #4
 8005f72:	d11b      	bne.n	8005fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0204 	mvn.w	r2, #4
 8005f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2202      	movs	r2, #2
 8005f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fa4c 	bl	8006430 <HAL_TIM_IC_CaptureCallback>
 8005f98:	e005      	b.n	8005fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fa3f 	bl	800641e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fa4e 	bl	8006442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d122      	bne.n	8006000 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f003 0308 	and.w	r3, r3, #8
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	d11b      	bne.n	8006000 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0208 	mvn.w	r2, #8
 8005fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2204      	movs	r2, #4
 8005fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fa22 	bl	8006430 <HAL_TIM_IC_CaptureCallback>
 8005fec:	e005      	b.n	8005ffa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fa15 	bl	800641e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fa24 	bl	8006442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f003 0310 	and.w	r3, r3, #16
 800600a:	2b10      	cmp	r3, #16
 800600c:	d122      	bne.n	8006054 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b10      	cmp	r3, #16
 800601a:	d11b      	bne.n	8006054 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0210 	mvn.w	r2, #16
 8006024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2208      	movs	r2, #8
 800602a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f9f8 	bl	8006430 <HAL_TIM_IC_CaptureCallback>
 8006040:	e005      	b.n	800604e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f9eb 	bl	800641e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f9fa 	bl	8006442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b01      	cmp	r3, #1
 8006060:	d10e      	bne.n	8006080 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b01      	cmp	r3, #1
 800606e:	d107      	bne.n	8006080 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0201 	mvn.w	r2, #1
 8006078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fb feca 	bl	8001e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608a:	2b80      	cmp	r3, #128	; 0x80
 800608c:	d10e      	bne.n	80060ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006098:	2b80      	cmp	r3, #128	; 0x80
 800609a:	d107      	bne.n	80060ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fce9 	bl	8006a7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b6:	2b40      	cmp	r3, #64	; 0x40
 80060b8:	d10e      	bne.n	80060d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c4:	2b40      	cmp	r3, #64	; 0x40
 80060c6:	d107      	bne.n	80060d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f9be 	bl	8006454 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f003 0320 	and.w	r3, r3, #32
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d10e      	bne.n	8006104 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f003 0320 	and.w	r3, r3, #32
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	d107      	bne.n	8006104 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f06f 0220 	mvn.w	r2, #32
 80060fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fcb4 	bl	8006a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006104:	bf00      	nop
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006122:	2b01      	cmp	r3, #1
 8006124:	d101      	bne.n	800612a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006126:	2302      	movs	r3, #2
 8006128:	e0ae      	b.n	8006288 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b0c      	cmp	r3, #12
 8006136:	f200 809f 	bhi.w	8006278 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800613a:	a201      	add	r2, pc, #4	; (adr r2, 8006140 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800613c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006140:	08006175 	.word	0x08006175
 8006144:	08006279 	.word	0x08006279
 8006148:	08006279 	.word	0x08006279
 800614c:	08006279 	.word	0x08006279
 8006150:	080061b5 	.word	0x080061b5
 8006154:	08006279 	.word	0x08006279
 8006158:	08006279 	.word	0x08006279
 800615c:	08006279 	.word	0x08006279
 8006160:	080061f7 	.word	0x080061f7
 8006164:	08006279 	.word	0x08006279
 8006168:	08006279 	.word	0x08006279
 800616c:	08006279 	.word	0x08006279
 8006170:	08006237 	.word	0x08006237
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68b9      	ldr	r1, [r7, #8]
 800617a:	4618      	mov	r0, r3
 800617c:	f000 f9d6 	bl	800652c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0208 	orr.w	r2, r2, #8
 800618e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0204 	bic.w	r2, r2, #4
 800619e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6999      	ldr	r1, [r3, #24]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	691a      	ldr	r2, [r3, #16]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	619a      	str	r2, [r3, #24]
      break;
 80061b2:	e064      	b.n	800627e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68b9      	ldr	r1, [r7, #8]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fa1c 	bl	80065f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699a      	ldr	r2, [r3, #24]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6999      	ldr	r1, [r3, #24]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	021a      	lsls	r2, r3, #8
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	619a      	str	r2, [r3, #24]
      break;
 80061f4:	e043      	b.n	800627e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fa65 	bl	80066cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69da      	ldr	r2, [r3, #28]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f042 0208 	orr.w	r2, r2, #8
 8006210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0204 	bic.w	r2, r2, #4
 8006220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69d9      	ldr	r1, [r3, #28]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	691a      	ldr	r2, [r3, #16]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	430a      	orrs	r2, r1
 8006232:	61da      	str	r2, [r3, #28]
      break;
 8006234:	e023      	b.n	800627e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	4618      	mov	r0, r3
 800623e:	f000 faaf 	bl	80067a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69da      	ldr	r2, [r3, #28]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69da      	ldr	r2, [r3, #28]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	69d9      	ldr	r1, [r3, #28]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	021a      	lsls	r2, r3, #8
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	61da      	str	r2, [r3, #28]
      break;
 8006276:	e002      	b.n	800627e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	75fb      	strb	r3, [r7, #23]
      break;
 800627c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006286:	7dfb      	ldrb	r3, [r7, #23]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_TIM_ConfigClockSource+0x1c>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e0b4      	b.n	8006416 <HAL_TIM_ConfigClockSource+0x186>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e4:	d03e      	beq.n	8006364 <HAL_TIM_ConfigClockSource+0xd4>
 80062e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ea:	f200 8087 	bhi.w	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 80062ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f2:	f000 8086 	beq.w	8006402 <HAL_TIM_ConfigClockSource+0x172>
 80062f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fa:	d87f      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 80062fc:	2b70      	cmp	r3, #112	; 0x70
 80062fe:	d01a      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0xa6>
 8006300:	2b70      	cmp	r3, #112	; 0x70
 8006302:	d87b      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 8006304:	2b60      	cmp	r3, #96	; 0x60
 8006306:	d050      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x11a>
 8006308:	2b60      	cmp	r3, #96	; 0x60
 800630a:	d877      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 800630c:	2b50      	cmp	r3, #80	; 0x50
 800630e:	d03c      	beq.n	800638a <HAL_TIM_ConfigClockSource+0xfa>
 8006310:	2b50      	cmp	r3, #80	; 0x50
 8006312:	d873      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 8006314:	2b40      	cmp	r3, #64	; 0x40
 8006316:	d058      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x13a>
 8006318:	2b40      	cmp	r3, #64	; 0x40
 800631a:	d86f      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 800631c:	2b30      	cmp	r3, #48	; 0x30
 800631e:	d064      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15a>
 8006320:	2b30      	cmp	r3, #48	; 0x30
 8006322:	d86b      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 8006324:	2b20      	cmp	r3, #32
 8006326:	d060      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15a>
 8006328:	2b20      	cmp	r3, #32
 800632a:	d867      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
 800632c:	2b00      	cmp	r3, #0
 800632e:	d05c      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15a>
 8006330:	2b10      	cmp	r3, #16
 8006332:	d05a      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x15a>
 8006334:	e062      	b.n	80063fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006346:	f000 faf0 	bl	800692a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	609a      	str	r2, [r3, #8]
      break;
 8006362:	e04f      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006374:	f000 fad9 	bl	800692a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006386:	609a      	str	r2, [r3, #8]
      break;
 8006388:	e03c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006396:	461a      	mov	r2, r3
 8006398:	f000 fa50 	bl	800683c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2150      	movs	r1, #80	; 0x50
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 faa7 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 80063a8:	e02c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063b6:	461a      	mov	r2, r3
 80063b8:	f000 fa6e 	bl	8006898 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2160      	movs	r1, #96	; 0x60
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fa97 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 80063c8:	e01c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063d6:	461a      	mov	r2, r3
 80063d8:	f000 fa30 	bl	800683c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2140      	movs	r1, #64	; 0x40
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fa87 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 80063e8:	e00c      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f000 fa7e 	bl	80068f6 <TIM_ITRx_SetConfig>
      break;
 80063fa:	e003      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006400:	e000      	b.n	8006404 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006414:	7bfb      	ldrb	r3, [r7, #15]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	bc80      	pop	{r7}
 800642e:	4770      	bx	lr

08006430 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	bc80      	pop	{r7}
 8006440:	4770      	bx	lr

08006442 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	bc80      	pop	{r7}
 8006452:	4770      	bx	lr

08006454 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	bc80      	pop	{r7}
 8006464:	4770      	bx	lr
	...

08006468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a29      	ldr	r2, [pc, #164]	; (8006520 <TIM_Base_SetConfig+0xb8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00b      	beq.n	8006498 <TIM_Base_SetConfig+0x30>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006486:	d007      	beq.n	8006498 <TIM_Base_SetConfig+0x30>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a26      	ldr	r2, [pc, #152]	; (8006524 <TIM_Base_SetConfig+0xbc>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d003      	beq.n	8006498 <TIM_Base_SetConfig+0x30>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a25      	ldr	r2, [pc, #148]	; (8006528 <TIM_Base_SetConfig+0xc0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d108      	bne.n	80064aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a1c      	ldr	r2, [pc, #112]	; (8006520 <TIM_Base_SetConfig+0xb8>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d00b      	beq.n	80064ca <TIM_Base_SetConfig+0x62>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b8:	d007      	beq.n	80064ca <TIM_Base_SetConfig+0x62>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a19      	ldr	r2, [pc, #100]	; (8006524 <TIM_Base_SetConfig+0xbc>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d003      	beq.n	80064ca <TIM_Base_SetConfig+0x62>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a18      	ldr	r2, [pc, #96]	; (8006528 <TIM_Base_SetConfig+0xc0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d108      	bne.n	80064dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	4313      	orrs	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a07      	ldr	r2, [pc, #28]	; (8006520 <TIM_Base_SetConfig+0xb8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d103      	bne.n	8006510 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	691a      	ldr	r2, [r3, #16]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	615a      	str	r2, [r3, #20]
}
 8006516:	bf00      	nop
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr
 8006520:	40012c00 	.word	0x40012c00
 8006524:	40000400 	.word	0x40000400
 8006528:	40000800 	.word	0x40000800

0800652c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	f023 0201 	bic.w	r2, r3, #1
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0303 	bic.w	r3, r3, #3
 8006562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f023 0302 	bic.w	r3, r3, #2
 8006574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4313      	orrs	r3, r2
 800657e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a1c      	ldr	r2, [pc, #112]	; (80065f4 <TIM_OC1_SetConfig+0xc8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d10c      	bne.n	80065a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f023 0308 	bic.w	r3, r3, #8
 800658e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f023 0304 	bic.w	r3, r3, #4
 80065a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a13      	ldr	r2, [pc, #76]	; (80065f4 <TIM_OC1_SetConfig+0xc8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d111      	bne.n	80065ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	621a      	str	r2, [r3, #32]
}
 80065e8:	bf00      	nop
 80065ea:	371c      	adds	r7, #28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bc80      	pop	{r7}
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	40012c00 	.word	0x40012c00

080065f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	f023 0210 	bic.w	r2, r3, #16
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800662e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	021b      	lsls	r3, r3, #8
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	4313      	orrs	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f023 0320 	bic.w	r3, r3, #32
 8006642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a1d      	ldr	r2, [pc, #116]	; (80066c8 <TIM_OC2_SetConfig+0xd0>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d10d      	bne.n	8006674 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800665e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	4313      	orrs	r3, r2
 800666a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006672:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a14      	ldr	r2, [pc, #80]	; (80066c8 <TIM_OC2_SetConfig+0xd0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d113      	bne.n	80066a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800668a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	621a      	str	r2, [r3, #32]
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr
 80066c8:	40012c00 	.word	0x40012c00

080066cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0303 	bic.w	r3, r3, #3
 8006702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	021b      	lsls	r3, r3, #8
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a1d      	ldr	r2, [pc, #116]	; (800679c <TIM_OC3_SetConfig+0xd0>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d10d      	bne.n	8006746 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006730:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	021b      	lsls	r3, r3, #8
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	4313      	orrs	r3, r2
 800673c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a14      	ldr	r2, [pc, #80]	; (800679c <TIM_OC3_SetConfig+0xd0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d113      	bne.n	8006776 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800675c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	011b      	lsls	r3, r3, #4
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	4313      	orrs	r3, r2
 8006768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	621a      	str	r2, [r3, #32]
}
 8006790:	bf00      	nop
 8006792:	371c      	adds	r7, #28
 8006794:	46bd      	mov	sp, r7
 8006796:	bc80      	pop	{r7}
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40012c00 	.word	0x40012c00

080067a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	031b      	lsls	r3, r3, #12
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a0f      	ldr	r2, [pc, #60]	; (8006838 <TIM_OC4_SetConfig+0x98>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d109      	bne.n	8006814 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	019b      	lsls	r3, r3, #6
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	621a      	str	r2, [r3, #32]
}
 800682e:	bf00      	nop
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	bc80      	pop	{r7}
 8006836:	4770      	bx	lr
 8006838:	40012c00 	.word	0x40012c00

0800683c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	f023 0201 	bic.w	r2, r3, #1
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4313      	orrs	r3, r2
 8006870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f023 030a 	bic.w	r3, r3, #10
 8006878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	621a      	str	r2, [r3, #32]
}
 800688e:	bf00      	nop
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	bc80      	pop	{r7}
 8006896:	4770      	bx	lr

08006898 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	f023 0210 	bic.w	r2, r3, #16
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	031b      	lsls	r3, r3, #12
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	011b      	lsls	r3, r3, #4
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	621a      	str	r2, [r3, #32]
}
 80068ec:	bf00      	nop
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bc80      	pop	{r7}
 80068f4:	4770      	bx	lr

080068f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b085      	sub	sp, #20
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4313      	orrs	r3, r2
 8006914:	f043 0307 	orr.w	r3, r3, #7
 8006918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	609a      	str	r2, [r3, #8]
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr

0800692a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800692a:	b480      	push	{r7}
 800692c:	b087      	sub	sp, #28
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
 8006936:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006944:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	021a      	lsls	r2, r3, #8
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	431a      	orrs	r2, r3
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4313      	orrs	r3, r2
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	4313      	orrs	r3, r2
 8006956:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	609a      	str	r2, [r3, #8]
}
 800695e:	bf00      	nop
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr

08006968 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	f003 031f 	and.w	r3, r3, #31
 800697a:	2201      	movs	r2, #1
 800697c:	fa02 f303 	lsl.w	r3, r2, r3
 8006980:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6a1a      	ldr	r2, [r3, #32]
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	43db      	mvns	r3, r3
 800698a:	401a      	ands	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a1a      	ldr	r2, [r3, #32]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f003 031f 	and.w	r3, r3, #31
 800699a:	6879      	ldr	r1, [r7, #4]
 800699c:	fa01 f303 	lsl.w	r3, r1, r3
 80069a0:	431a      	orrs	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	621a      	str	r2, [r3, #32]
}
 80069a6:	bf00      	nop
 80069a8:	371c      	adds	r7, #28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bc80      	pop	{r7}
 80069ae:	4770      	bx	lr

080069b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d101      	bne.n	80069c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069c4:	2302      	movs	r3, #2
 80069c6:	e046      	b.n	8006a56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a16      	ldr	r2, [pc, #88]	; (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00e      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a14:	d009      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a12      	ldr	r2, [pc, #72]	; (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d004      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a10      	ldr	r2, [pc, #64]	; (8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d10c      	bne.n	8006a44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bc80      	pop	{r7}
 8006a5e:	4770      	bx	lr
 8006a60:	40012c00 	.word	0x40012c00
 8006a64:	40000400 	.word	0x40000400
 8006a68:	40000800 	.word	0x40000800

08006a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc80      	pop	{r7}
 8006a7c:	4770      	bx	lr

08006a7e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr

08006a90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e042      	b.n	8006b28 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d106      	bne.n	8006abc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7fb ff54 	bl	8002964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2224      	movs	r2, #36	; 0x24
 8006ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ad2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f91d 	bl	8006d14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	691a      	ldr	r2, [r3, #16]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ae8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	695a      	ldr	r2, [r3, #20]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006af8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68da      	ldr	r2, [r3, #12]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b08a      	sub	sp, #40	; 0x28
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	603b      	str	r3, [r7, #0]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b20      	cmp	r3, #32
 8006b4e:	d16d      	bne.n	8006c2c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <HAL_UART_Transmit+0x2c>
 8006b56:	88fb      	ldrh	r3, [r7, #6]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e066      	b.n	8006c2e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2221      	movs	r2, #33	; 0x21
 8006b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b6e:	f7fc f8b9 	bl	8002ce4 <HAL_GetTick>
 8006b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	88fa      	ldrh	r2, [r7, #6]
 8006b78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	88fa      	ldrh	r2, [r7, #6]
 8006b7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b88:	d108      	bne.n	8006b9c <HAL_UART_Transmit+0x6c>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d104      	bne.n	8006b9c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	61bb      	str	r3, [r7, #24]
 8006b9a:	e003      	b.n	8006ba4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ba4:	e02a      	b.n	8006bfc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2200      	movs	r2, #0
 8006bae:	2180      	movs	r1, #128	; 0x80
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f840 	bl	8006c36 <UART_WaitOnFlagUntilTimeout>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e036      	b.n	8006c2e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10b      	bne.n	8006bde <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	3302      	adds	r3, #2
 8006bda:	61bb      	str	r3, [r7, #24]
 8006bdc:	e007      	b.n	8006bee <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	781a      	ldrb	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	3301      	adds	r3, #1
 8006bec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1cf      	bne.n	8006ba6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2140      	movs	r1, #64	; 0x40
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f000 f810 	bl	8006c36 <UART_WaitOnFlagUntilTimeout>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e006      	b.n	8006c2e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	e000      	b.n	8006c2e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006c2c:	2302      	movs	r3, #2
  }
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3720      	adds	r7, #32
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b090      	sub	sp, #64	; 0x40
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	60f8      	str	r0, [r7, #12]
 8006c3e:	60b9      	str	r1, [r7, #8]
 8006c40:	603b      	str	r3, [r7, #0]
 8006c42:	4613      	mov	r3, r2
 8006c44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c46:	e050      	b.n	8006cea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4e:	d04c      	beq.n	8006cea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d007      	beq.n	8006c66 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c56:	f7fc f845 	bl	8002ce4 <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d241      	bcs.n	8006cea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	330c      	adds	r3, #12
 8006c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	330c      	adds	r3, #12
 8006c84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c86:	637a      	str	r2, [r7, #52]	; 0x34
 8006c88:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e5      	bne.n	8006c66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	3314      	adds	r3, #20
 8006ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f023 0301 	bic.w	r3, r3, #1
 8006cb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3314      	adds	r3, #20
 8006cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cba:	623a      	str	r2, [r7, #32]
 8006cbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbe:	69f9      	ldr	r1, [r7, #28]
 8006cc0:	6a3a      	ldr	r2, [r7, #32]
 8006cc2:	e841 2300 	strex	r3, r2, [r1]
 8006cc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e5      	bne.n	8006c9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e00f      	b.n	8006d0a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	bf0c      	ite	eq
 8006cfa:	2301      	moveq	r3, #1
 8006cfc:	2300      	movne	r3, #0
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	461a      	mov	r2, r3
 8006d02:	79fb      	ldrb	r3, [r7, #7]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d09f      	beq.n	8006c48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3740      	adds	r7, #64	; 0x40
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689a      	ldr	r2, [r3, #8]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006d4e:	f023 030c 	bic.w	r3, r3, #12
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	6812      	ldr	r2, [r2, #0]
 8006d56:	68b9      	ldr	r1, [r7, #8]
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699a      	ldr	r2, [r3, #24]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a2c      	ldr	r2, [pc, #176]	; (8006e28 <UART_SetConfig+0x114>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d103      	bne.n	8006d84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006d7c:	f7fe fd84 	bl	8005888 <HAL_RCC_GetPCLK2Freq>
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	e002      	b.n	8006d8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006d84:	f7fe fd6c 	bl	8005860 <HAL_RCC_GetPCLK1Freq>
 8006d88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	009a      	lsls	r2, r3, #2
 8006d94:	441a      	add	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da0:	4a22      	ldr	r2, [pc, #136]	; (8006e2c <UART_SetConfig+0x118>)
 8006da2:	fba2 2303 	umull	r2, r3, r2, r3
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	0119      	lsls	r1, r3, #4
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009a      	lsls	r2, r3, #2
 8006db4:	441a      	add	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006dc0:	4b1a      	ldr	r3, [pc, #104]	; (8006e2c <UART_SetConfig+0x118>)
 8006dc2:	fba3 0302 	umull	r0, r3, r3, r2
 8006dc6:	095b      	lsrs	r3, r3, #5
 8006dc8:	2064      	movs	r0, #100	; 0x64
 8006dca:	fb00 f303 	mul.w	r3, r0, r3
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	011b      	lsls	r3, r3, #4
 8006dd2:	3332      	adds	r3, #50	; 0x32
 8006dd4:	4a15      	ldr	r2, [pc, #84]	; (8006e2c <UART_SetConfig+0x118>)
 8006dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dda:	095b      	lsrs	r3, r3, #5
 8006ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006de0:	4419      	add	r1, r3
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	009a      	lsls	r2, r3, #2
 8006dec:	441a      	add	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006df8:	4b0c      	ldr	r3, [pc, #48]	; (8006e2c <UART_SetConfig+0x118>)
 8006dfa:	fba3 0302 	umull	r0, r3, r3, r2
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	2064      	movs	r0, #100	; 0x64
 8006e02:	fb00 f303 	mul.w	r3, r0, r3
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	3332      	adds	r3, #50	; 0x32
 8006e0c:	4a07      	ldr	r2, [pc, #28]	; (8006e2c <UART_SetConfig+0x118>)
 8006e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e12:	095b      	lsrs	r3, r3, #5
 8006e14:	f003 020f 	and.w	r2, r3, #15
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	440a      	add	r2, r1
 8006e1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006e20:	bf00      	nop
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	40013800 	.word	0x40013800
 8006e2c:	51eb851f 	.word	0x51eb851f

08006e30 <__cvt>:
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e36:	461f      	mov	r7, r3
 8006e38:	bfbb      	ittet	lt
 8006e3a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006e3e:	461f      	movlt	r7, r3
 8006e40:	2300      	movge	r3, #0
 8006e42:	232d      	movlt	r3, #45	; 0x2d
 8006e44:	b088      	sub	sp, #32
 8006e46:	4614      	mov	r4, r2
 8006e48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e4a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006e4c:	7013      	strb	r3, [r2, #0]
 8006e4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e50:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006e54:	f023 0820 	bic.w	r8, r3, #32
 8006e58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e5c:	d005      	beq.n	8006e6a <__cvt+0x3a>
 8006e5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006e62:	d100      	bne.n	8006e66 <__cvt+0x36>
 8006e64:	3501      	adds	r5, #1
 8006e66:	2302      	movs	r3, #2
 8006e68:	e000      	b.n	8006e6c <__cvt+0x3c>
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	aa07      	add	r2, sp, #28
 8006e6e:	9204      	str	r2, [sp, #16]
 8006e70:	aa06      	add	r2, sp, #24
 8006e72:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006e76:	e9cd 3500 	strd	r3, r5, [sp]
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	463b      	mov	r3, r7
 8006e7e:	f001 f8c3 	bl	8008008 <_dtoa_r>
 8006e82:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e86:	4606      	mov	r6, r0
 8006e88:	d102      	bne.n	8006e90 <__cvt+0x60>
 8006e8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e8c:	07db      	lsls	r3, r3, #31
 8006e8e:	d522      	bpl.n	8006ed6 <__cvt+0xa6>
 8006e90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e94:	eb06 0905 	add.w	r9, r6, r5
 8006e98:	d110      	bne.n	8006ebc <__cvt+0x8c>
 8006e9a:	7833      	ldrb	r3, [r6, #0]
 8006e9c:	2b30      	cmp	r3, #48	; 0x30
 8006e9e:	d10a      	bne.n	8006eb6 <__cvt+0x86>
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	4639      	mov	r1, r7
 8006ea8:	f7f9 fd7e 	bl	80009a8 <__aeabi_dcmpeq>
 8006eac:	b918      	cbnz	r0, 8006eb6 <__cvt+0x86>
 8006eae:	f1c5 0501 	rsb	r5, r5, #1
 8006eb2:	f8ca 5000 	str.w	r5, [sl]
 8006eb6:	f8da 3000 	ldr.w	r3, [sl]
 8006eba:	4499      	add	r9, r3
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	4639      	mov	r1, r7
 8006ec4:	f7f9 fd70 	bl	80009a8 <__aeabi_dcmpeq>
 8006ec8:	b108      	cbz	r0, 8006ece <__cvt+0x9e>
 8006eca:	f8cd 901c 	str.w	r9, [sp, #28]
 8006ece:	2230      	movs	r2, #48	; 0x30
 8006ed0:	9b07      	ldr	r3, [sp, #28]
 8006ed2:	454b      	cmp	r3, r9
 8006ed4:	d307      	bcc.n	8006ee6 <__cvt+0xb6>
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	9b07      	ldr	r3, [sp, #28]
 8006eda:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006edc:	1b9b      	subs	r3, r3, r6
 8006ede:	6013      	str	r3, [r2, #0]
 8006ee0:	b008      	add	sp, #32
 8006ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee6:	1c59      	adds	r1, r3, #1
 8006ee8:	9107      	str	r1, [sp, #28]
 8006eea:	701a      	strb	r2, [r3, #0]
 8006eec:	e7f0      	b.n	8006ed0 <__cvt+0xa0>

08006eee <__exponent>:
 8006eee:	4603      	mov	r3, r0
 8006ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ef2:	2900      	cmp	r1, #0
 8006ef4:	f803 2b02 	strb.w	r2, [r3], #2
 8006ef8:	bfb6      	itet	lt
 8006efa:	222d      	movlt	r2, #45	; 0x2d
 8006efc:	222b      	movge	r2, #43	; 0x2b
 8006efe:	4249      	neglt	r1, r1
 8006f00:	2909      	cmp	r1, #9
 8006f02:	7042      	strb	r2, [r0, #1]
 8006f04:	dd2a      	ble.n	8006f5c <__exponent+0x6e>
 8006f06:	f10d 0207 	add.w	r2, sp, #7
 8006f0a:	4617      	mov	r7, r2
 8006f0c:	260a      	movs	r6, #10
 8006f0e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006f12:	4694      	mov	ip, r2
 8006f14:	fb06 1415 	mls	r4, r6, r5, r1
 8006f18:	3430      	adds	r4, #48	; 0x30
 8006f1a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006f1e:	460c      	mov	r4, r1
 8006f20:	2c63      	cmp	r4, #99	; 0x63
 8006f22:	4629      	mov	r1, r5
 8006f24:	f102 32ff 	add.w	r2, r2, #4294967295
 8006f28:	dcf1      	bgt.n	8006f0e <__exponent+0x20>
 8006f2a:	3130      	adds	r1, #48	; 0x30
 8006f2c:	f1ac 0402 	sub.w	r4, ip, #2
 8006f30:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006f34:	4622      	mov	r2, r4
 8006f36:	1c41      	adds	r1, r0, #1
 8006f38:	42ba      	cmp	r2, r7
 8006f3a:	d30a      	bcc.n	8006f52 <__exponent+0x64>
 8006f3c:	f10d 0209 	add.w	r2, sp, #9
 8006f40:	eba2 020c 	sub.w	r2, r2, ip
 8006f44:	42bc      	cmp	r4, r7
 8006f46:	bf88      	it	hi
 8006f48:	2200      	movhi	r2, #0
 8006f4a:	4413      	add	r3, r2
 8006f4c:	1a18      	subs	r0, r3, r0
 8006f4e:	b003      	add	sp, #12
 8006f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f52:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006f56:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006f5a:	e7ed      	b.n	8006f38 <__exponent+0x4a>
 8006f5c:	2330      	movs	r3, #48	; 0x30
 8006f5e:	3130      	adds	r1, #48	; 0x30
 8006f60:	7083      	strb	r3, [r0, #2]
 8006f62:	70c1      	strb	r1, [r0, #3]
 8006f64:	1d03      	adds	r3, r0, #4
 8006f66:	e7f1      	b.n	8006f4c <__exponent+0x5e>

08006f68 <_printf_float>:
 8006f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6c:	b091      	sub	sp, #68	; 0x44
 8006f6e:	460c      	mov	r4, r1
 8006f70:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006f74:	4616      	mov	r6, r2
 8006f76:	461f      	mov	r7, r3
 8006f78:	4605      	mov	r5, r0
 8006f7a:	f000 ff27 	bl	8007dcc <_localeconv_r>
 8006f7e:	6803      	ldr	r3, [r0, #0]
 8006f80:	4618      	mov	r0, r3
 8006f82:	9309      	str	r3, [sp, #36]	; 0x24
 8006f84:	f7f9 f8e4 	bl	8000150 <strlen>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	930e      	str	r3, [sp, #56]	; 0x38
 8006f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f90:	900a      	str	r0, [sp, #40]	; 0x28
 8006f92:	3307      	adds	r3, #7
 8006f94:	f023 0307 	bic.w	r3, r3, #7
 8006f98:	f103 0208 	add.w	r2, r3, #8
 8006f9c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006fa0:	f8d4 b000 	ldr.w	fp, [r4]
 8006fa4:	f8c8 2000 	str.w	r2, [r8]
 8006fa8:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006fac:	4652      	mov	r2, sl
 8006fae:	4643      	mov	r3, r8
 8006fb0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006fb4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006fb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fba:	f04f 32ff 	mov.w	r2, #4294967295
 8006fbe:	4650      	mov	r0, sl
 8006fc0:	4b9c      	ldr	r3, [pc, #624]	; (8007234 <_printf_float+0x2cc>)
 8006fc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fc4:	f7f9 fd22 	bl	8000a0c <__aeabi_dcmpun>
 8006fc8:	bb70      	cbnz	r0, 8007028 <_printf_float+0xc0>
 8006fca:	f04f 32ff 	mov.w	r2, #4294967295
 8006fce:	4650      	mov	r0, sl
 8006fd0:	4b98      	ldr	r3, [pc, #608]	; (8007234 <_printf_float+0x2cc>)
 8006fd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fd4:	f7f9 fcfc 	bl	80009d0 <__aeabi_dcmple>
 8006fd8:	bb30      	cbnz	r0, 8007028 <_printf_float+0xc0>
 8006fda:	2200      	movs	r2, #0
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4650      	mov	r0, sl
 8006fe0:	4641      	mov	r1, r8
 8006fe2:	f7f9 fceb 	bl	80009bc <__aeabi_dcmplt>
 8006fe6:	b110      	cbz	r0, 8006fee <_printf_float+0x86>
 8006fe8:	232d      	movs	r3, #45	; 0x2d
 8006fea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fee:	4a92      	ldr	r2, [pc, #584]	; (8007238 <_printf_float+0x2d0>)
 8006ff0:	4b92      	ldr	r3, [pc, #584]	; (800723c <_printf_float+0x2d4>)
 8006ff2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006ff6:	bf94      	ite	ls
 8006ff8:	4690      	movls	r8, r2
 8006ffa:	4698      	movhi	r8, r3
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	f04f 0a00 	mov.w	sl, #0
 8007002:	6123      	str	r3, [r4, #16]
 8007004:	f02b 0304 	bic.w	r3, fp, #4
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	4633      	mov	r3, r6
 800700c:	4621      	mov	r1, r4
 800700e:	4628      	mov	r0, r5
 8007010:	9700      	str	r7, [sp, #0]
 8007012:	aa0f      	add	r2, sp, #60	; 0x3c
 8007014:	f000 f9d6 	bl	80073c4 <_printf_common>
 8007018:	3001      	adds	r0, #1
 800701a:	f040 8090 	bne.w	800713e <_printf_float+0x1d6>
 800701e:	f04f 30ff 	mov.w	r0, #4294967295
 8007022:	b011      	add	sp, #68	; 0x44
 8007024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007028:	4652      	mov	r2, sl
 800702a:	4643      	mov	r3, r8
 800702c:	4650      	mov	r0, sl
 800702e:	4641      	mov	r1, r8
 8007030:	f7f9 fcec 	bl	8000a0c <__aeabi_dcmpun>
 8007034:	b148      	cbz	r0, 800704a <_printf_float+0xe2>
 8007036:	f1b8 0f00 	cmp.w	r8, #0
 800703a:	bfb8      	it	lt
 800703c:	232d      	movlt	r3, #45	; 0x2d
 800703e:	4a80      	ldr	r2, [pc, #512]	; (8007240 <_printf_float+0x2d8>)
 8007040:	bfb8      	it	lt
 8007042:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007046:	4b7f      	ldr	r3, [pc, #508]	; (8007244 <_printf_float+0x2dc>)
 8007048:	e7d3      	b.n	8006ff2 <_printf_float+0x8a>
 800704a:	6863      	ldr	r3, [r4, #4]
 800704c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	d142      	bne.n	80070da <_printf_float+0x172>
 8007054:	2306      	movs	r3, #6
 8007056:	6063      	str	r3, [r4, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	9206      	str	r2, [sp, #24]
 800705c:	aa0e      	add	r2, sp, #56	; 0x38
 800705e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007062:	aa0d      	add	r2, sp, #52	; 0x34
 8007064:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007068:	9203      	str	r2, [sp, #12]
 800706a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800706e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007072:	6023      	str	r3, [r4, #0]
 8007074:	6863      	ldr	r3, [r4, #4]
 8007076:	4652      	mov	r2, sl
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	4628      	mov	r0, r5
 800707c:	4643      	mov	r3, r8
 800707e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007080:	f7ff fed6 	bl	8006e30 <__cvt>
 8007084:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007086:	4680      	mov	r8, r0
 8007088:	2947      	cmp	r1, #71	; 0x47
 800708a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800708c:	d108      	bne.n	80070a0 <_printf_float+0x138>
 800708e:	1cc8      	adds	r0, r1, #3
 8007090:	db02      	blt.n	8007098 <_printf_float+0x130>
 8007092:	6863      	ldr	r3, [r4, #4]
 8007094:	4299      	cmp	r1, r3
 8007096:	dd40      	ble.n	800711a <_printf_float+0x1b2>
 8007098:	f1a9 0902 	sub.w	r9, r9, #2
 800709c:	fa5f f989 	uxtb.w	r9, r9
 80070a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80070a4:	d81f      	bhi.n	80070e6 <_printf_float+0x17e>
 80070a6:	464a      	mov	r2, r9
 80070a8:	3901      	subs	r1, #1
 80070aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80070ae:	910d      	str	r1, [sp, #52]	; 0x34
 80070b0:	f7ff ff1d 	bl	8006eee <__exponent>
 80070b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070b6:	4682      	mov	sl, r0
 80070b8:	1813      	adds	r3, r2, r0
 80070ba:	2a01      	cmp	r2, #1
 80070bc:	6123      	str	r3, [r4, #16]
 80070be:	dc02      	bgt.n	80070c6 <_printf_float+0x15e>
 80070c0:	6822      	ldr	r2, [r4, #0]
 80070c2:	07d2      	lsls	r2, r2, #31
 80070c4:	d501      	bpl.n	80070ca <_printf_float+0x162>
 80070c6:	3301      	adds	r3, #1
 80070c8:	6123      	str	r3, [r4, #16]
 80070ca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d09b      	beq.n	800700a <_printf_float+0xa2>
 80070d2:	232d      	movs	r3, #45	; 0x2d
 80070d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070d8:	e797      	b.n	800700a <_printf_float+0xa2>
 80070da:	2947      	cmp	r1, #71	; 0x47
 80070dc:	d1bc      	bne.n	8007058 <_printf_float+0xf0>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1ba      	bne.n	8007058 <_printf_float+0xf0>
 80070e2:	2301      	movs	r3, #1
 80070e4:	e7b7      	b.n	8007056 <_printf_float+0xee>
 80070e6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80070ea:	d118      	bne.n	800711e <_printf_float+0x1b6>
 80070ec:	2900      	cmp	r1, #0
 80070ee:	6863      	ldr	r3, [r4, #4]
 80070f0:	dd0b      	ble.n	800710a <_printf_float+0x1a2>
 80070f2:	6121      	str	r1, [r4, #16]
 80070f4:	b913      	cbnz	r3, 80070fc <_printf_float+0x194>
 80070f6:	6822      	ldr	r2, [r4, #0]
 80070f8:	07d0      	lsls	r0, r2, #31
 80070fa:	d502      	bpl.n	8007102 <_printf_float+0x19a>
 80070fc:	3301      	adds	r3, #1
 80070fe:	440b      	add	r3, r1
 8007100:	6123      	str	r3, [r4, #16]
 8007102:	f04f 0a00 	mov.w	sl, #0
 8007106:	65a1      	str	r1, [r4, #88]	; 0x58
 8007108:	e7df      	b.n	80070ca <_printf_float+0x162>
 800710a:	b913      	cbnz	r3, 8007112 <_printf_float+0x1aa>
 800710c:	6822      	ldr	r2, [r4, #0]
 800710e:	07d2      	lsls	r2, r2, #31
 8007110:	d501      	bpl.n	8007116 <_printf_float+0x1ae>
 8007112:	3302      	adds	r3, #2
 8007114:	e7f4      	b.n	8007100 <_printf_float+0x198>
 8007116:	2301      	movs	r3, #1
 8007118:	e7f2      	b.n	8007100 <_printf_float+0x198>
 800711a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800711e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007120:	4299      	cmp	r1, r3
 8007122:	db05      	blt.n	8007130 <_printf_float+0x1c8>
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	6121      	str	r1, [r4, #16]
 8007128:	07d8      	lsls	r0, r3, #31
 800712a:	d5ea      	bpl.n	8007102 <_printf_float+0x19a>
 800712c:	1c4b      	adds	r3, r1, #1
 800712e:	e7e7      	b.n	8007100 <_printf_float+0x198>
 8007130:	2900      	cmp	r1, #0
 8007132:	bfcc      	ite	gt
 8007134:	2201      	movgt	r2, #1
 8007136:	f1c1 0202 	rsble	r2, r1, #2
 800713a:	4413      	add	r3, r2
 800713c:	e7e0      	b.n	8007100 <_printf_float+0x198>
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	055a      	lsls	r2, r3, #21
 8007142:	d407      	bmi.n	8007154 <_printf_float+0x1ec>
 8007144:	6923      	ldr	r3, [r4, #16]
 8007146:	4642      	mov	r2, r8
 8007148:	4631      	mov	r1, r6
 800714a:	4628      	mov	r0, r5
 800714c:	47b8      	blx	r7
 800714e:	3001      	adds	r0, #1
 8007150:	d12b      	bne.n	80071aa <_printf_float+0x242>
 8007152:	e764      	b.n	800701e <_printf_float+0xb6>
 8007154:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007158:	f240 80dd 	bls.w	8007316 <_printf_float+0x3ae>
 800715c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007160:	2200      	movs	r2, #0
 8007162:	2300      	movs	r3, #0
 8007164:	f7f9 fc20 	bl	80009a8 <__aeabi_dcmpeq>
 8007168:	2800      	cmp	r0, #0
 800716a:	d033      	beq.n	80071d4 <_printf_float+0x26c>
 800716c:	2301      	movs	r3, #1
 800716e:	4631      	mov	r1, r6
 8007170:	4628      	mov	r0, r5
 8007172:	4a35      	ldr	r2, [pc, #212]	; (8007248 <_printf_float+0x2e0>)
 8007174:	47b8      	blx	r7
 8007176:	3001      	adds	r0, #1
 8007178:	f43f af51 	beq.w	800701e <_printf_float+0xb6>
 800717c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007180:	429a      	cmp	r2, r3
 8007182:	db02      	blt.n	800718a <_printf_float+0x222>
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	07d8      	lsls	r0, r3, #31
 8007188:	d50f      	bpl.n	80071aa <_printf_float+0x242>
 800718a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800718e:	4631      	mov	r1, r6
 8007190:	4628      	mov	r0, r5
 8007192:	47b8      	blx	r7
 8007194:	3001      	adds	r0, #1
 8007196:	f43f af42 	beq.w	800701e <_printf_float+0xb6>
 800719a:	f04f 0800 	mov.w	r8, #0
 800719e:	f104 091a 	add.w	r9, r4, #26
 80071a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071a4:	3b01      	subs	r3, #1
 80071a6:	4543      	cmp	r3, r8
 80071a8:	dc09      	bgt.n	80071be <_printf_float+0x256>
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	079b      	lsls	r3, r3, #30
 80071ae:	f100 8104 	bmi.w	80073ba <_printf_float+0x452>
 80071b2:	68e0      	ldr	r0, [r4, #12]
 80071b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071b6:	4298      	cmp	r0, r3
 80071b8:	bfb8      	it	lt
 80071ba:	4618      	movlt	r0, r3
 80071bc:	e731      	b.n	8007022 <_printf_float+0xba>
 80071be:	2301      	movs	r3, #1
 80071c0:	464a      	mov	r2, r9
 80071c2:	4631      	mov	r1, r6
 80071c4:	4628      	mov	r0, r5
 80071c6:	47b8      	blx	r7
 80071c8:	3001      	adds	r0, #1
 80071ca:	f43f af28 	beq.w	800701e <_printf_float+0xb6>
 80071ce:	f108 0801 	add.w	r8, r8, #1
 80071d2:	e7e6      	b.n	80071a2 <_printf_float+0x23a>
 80071d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	dc38      	bgt.n	800724c <_printf_float+0x2e4>
 80071da:	2301      	movs	r3, #1
 80071dc:	4631      	mov	r1, r6
 80071de:	4628      	mov	r0, r5
 80071e0:	4a19      	ldr	r2, [pc, #100]	; (8007248 <_printf_float+0x2e0>)
 80071e2:	47b8      	blx	r7
 80071e4:	3001      	adds	r0, #1
 80071e6:	f43f af1a 	beq.w	800701e <_printf_float+0xb6>
 80071ea:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80071ee:	4313      	orrs	r3, r2
 80071f0:	d102      	bne.n	80071f8 <_printf_float+0x290>
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	07d9      	lsls	r1, r3, #31
 80071f6:	d5d8      	bpl.n	80071aa <_printf_float+0x242>
 80071f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071fc:	4631      	mov	r1, r6
 80071fe:	4628      	mov	r0, r5
 8007200:	47b8      	blx	r7
 8007202:	3001      	adds	r0, #1
 8007204:	f43f af0b 	beq.w	800701e <_printf_float+0xb6>
 8007208:	f04f 0900 	mov.w	r9, #0
 800720c:	f104 0a1a 	add.w	sl, r4, #26
 8007210:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007212:	425b      	negs	r3, r3
 8007214:	454b      	cmp	r3, r9
 8007216:	dc01      	bgt.n	800721c <_printf_float+0x2b4>
 8007218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800721a:	e794      	b.n	8007146 <_printf_float+0x1de>
 800721c:	2301      	movs	r3, #1
 800721e:	4652      	mov	r2, sl
 8007220:	4631      	mov	r1, r6
 8007222:	4628      	mov	r0, r5
 8007224:	47b8      	blx	r7
 8007226:	3001      	adds	r0, #1
 8007228:	f43f aef9 	beq.w	800701e <_printf_float+0xb6>
 800722c:	f109 0901 	add.w	r9, r9, #1
 8007230:	e7ee      	b.n	8007210 <_printf_float+0x2a8>
 8007232:	bf00      	nop
 8007234:	7fefffff 	.word	0x7fefffff
 8007238:	0800be5e 	.word	0x0800be5e
 800723c:	0800be62 	.word	0x0800be62
 8007240:	0800be66 	.word	0x0800be66
 8007244:	0800be6a 	.word	0x0800be6a
 8007248:	0800be6e 	.word	0x0800be6e
 800724c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800724e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007250:	429a      	cmp	r2, r3
 8007252:	bfa8      	it	ge
 8007254:	461a      	movge	r2, r3
 8007256:	2a00      	cmp	r2, #0
 8007258:	4691      	mov	r9, r2
 800725a:	dc37      	bgt.n	80072cc <_printf_float+0x364>
 800725c:	f04f 0b00 	mov.w	fp, #0
 8007260:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007264:	f104 021a 	add.w	r2, r4, #26
 8007268:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800726c:	ebaa 0309 	sub.w	r3, sl, r9
 8007270:	455b      	cmp	r3, fp
 8007272:	dc33      	bgt.n	80072dc <_printf_float+0x374>
 8007274:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007278:	429a      	cmp	r2, r3
 800727a:	db3b      	blt.n	80072f4 <_printf_float+0x38c>
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	07da      	lsls	r2, r3, #31
 8007280:	d438      	bmi.n	80072f4 <_printf_float+0x38c>
 8007282:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007286:	eba2 0903 	sub.w	r9, r2, r3
 800728a:	eba2 020a 	sub.w	r2, r2, sl
 800728e:	4591      	cmp	r9, r2
 8007290:	bfa8      	it	ge
 8007292:	4691      	movge	r9, r2
 8007294:	f1b9 0f00 	cmp.w	r9, #0
 8007298:	dc34      	bgt.n	8007304 <_printf_float+0x39c>
 800729a:	f04f 0800 	mov.w	r8, #0
 800729e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072a2:	f104 0a1a 	add.w	sl, r4, #26
 80072a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80072aa:	1a9b      	subs	r3, r3, r2
 80072ac:	eba3 0309 	sub.w	r3, r3, r9
 80072b0:	4543      	cmp	r3, r8
 80072b2:	f77f af7a 	ble.w	80071aa <_printf_float+0x242>
 80072b6:	2301      	movs	r3, #1
 80072b8:	4652      	mov	r2, sl
 80072ba:	4631      	mov	r1, r6
 80072bc:	4628      	mov	r0, r5
 80072be:	47b8      	blx	r7
 80072c0:	3001      	adds	r0, #1
 80072c2:	f43f aeac 	beq.w	800701e <_printf_float+0xb6>
 80072c6:	f108 0801 	add.w	r8, r8, #1
 80072ca:	e7ec      	b.n	80072a6 <_printf_float+0x33e>
 80072cc:	4613      	mov	r3, r2
 80072ce:	4631      	mov	r1, r6
 80072d0:	4642      	mov	r2, r8
 80072d2:	4628      	mov	r0, r5
 80072d4:	47b8      	blx	r7
 80072d6:	3001      	adds	r0, #1
 80072d8:	d1c0      	bne.n	800725c <_printf_float+0x2f4>
 80072da:	e6a0      	b.n	800701e <_printf_float+0xb6>
 80072dc:	2301      	movs	r3, #1
 80072de:	4631      	mov	r1, r6
 80072e0:	4628      	mov	r0, r5
 80072e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80072e4:	47b8      	blx	r7
 80072e6:	3001      	adds	r0, #1
 80072e8:	f43f ae99 	beq.w	800701e <_printf_float+0xb6>
 80072ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072ee:	f10b 0b01 	add.w	fp, fp, #1
 80072f2:	e7b9      	b.n	8007268 <_printf_float+0x300>
 80072f4:	4631      	mov	r1, r6
 80072f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072fa:	4628      	mov	r0, r5
 80072fc:	47b8      	blx	r7
 80072fe:	3001      	adds	r0, #1
 8007300:	d1bf      	bne.n	8007282 <_printf_float+0x31a>
 8007302:	e68c      	b.n	800701e <_printf_float+0xb6>
 8007304:	464b      	mov	r3, r9
 8007306:	4631      	mov	r1, r6
 8007308:	4628      	mov	r0, r5
 800730a:	eb08 020a 	add.w	r2, r8, sl
 800730e:	47b8      	blx	r7
 8007310:	3001      	adds	r0, #1
 8007312:	d1c2      	bne.n	800729a <_printf_float+0x332>
 8007314:	e683      	b.n	800701e <_printf_float+0xb6>
 8007316:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007318:	2a01      	cmp	r2, #1
 800731a:	dc01      	bgt.n	8007320 <_printf_float+0x3b8>
 800731c:	07db      	lsls	r3, r3, #31
 800731e:	d539      	bpl.n	8007394 <_printf_float+0x42c>
 8007320:	2301      	movs	r3, #1
 8007322:	4642      	mov	r2, r8
 8007324:	4631      	mov	r1, r6
 8007326:	4628      	mov	r0, r5
 8007328:	47b8      	blx	r7
 800732a:	3001      	adds	r0, #1
 800732c:	f43f ae77 	beq.w	800701e <_printf_float+0xb6>
 8007330:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007334:	4631      	mov	r1, r6
 8007336:	4628      	mov	r0, r5
 8007338:	47b8      	blx	r7
 800733a:	3001      	adds	r0, #1
 800733c:	f43f ae6f 	beq.w	800701e <_printf_float+0xb6>
 8007340:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007344:	2200      	movs	r2, #0
 8007346:	2300      	movs	r3, #0
 8007348:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800734c:	f7f9 fb2c 	bl	80009a8 <__aeabi_dcmpeq>
 8007350:	b9d8      	cbnz	r0, 800738a <_printf_float+0x422>
 8007352:	f109 33ff 	add.w	r3, r9, #4294967295
 8007356:	f108 0201 	add.w	r2, r8, #1
 800735a:	4631      	mov	r1, r6
 800735c:	4628      	mov	r0, r5
 800735e:	47b8      	blx	r7
 8007360:	3001      	adds	r0, #1
 8007362:	d10e      	bne.n	8007382 <_printf_float+0x41a>
 8007364:	e65b      	b.n	800701e <_printf_float+0xb6>
 8007366:	2301      	movs	r3, #1
 8007368:	464a      	mov	r2, r9
 800736a:	4631      	mov	r1, r6
 800736c:	4628      	mov	r0, r5
 800736e:	47b8      	blx	r7
 8007370:	3001      	adds	r0, #1
 8007372:	f43f ae54 	beq.w	800701e <_printf_float+0xb6>
 8007376:	f108 0801 	add.w	r8, r8, #1
 800737a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800737c:	3b01      	subs	r3, #1
 800737e:	4543      	cmp	r3, r8
 8007380:	dcf1      	bgt.n	8007366 <_printf_float+0x3fe>
 8007382:	4653      	mov	r3, sl
 8007384:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007388:	e6de      	b.n	8007148 <_printf_float+0x1e0>
 800738a:	f04f 0800 	mov.w	r8, #0
 800738e:	f104 091a 	add.w	r9, r4, #26
 8007392:	e7f2      	b.n	800737a <_printf_float+0x412>
 8007394:	2301      	movs	r3, #1
 8007396:	4642      	mov	r2, r8
 8007398:	e7df      	b.n	800735a <_printf_float+0x3f2>
 800739a:	2301      	movs	r3, #1
 800739c:	464a      	mov	r2, r9
 800739e:	4631      	mov	r1, r6
 80073a0:	4628      	mov	r0, r5
 80073a2:	47b8      	blx	r7
 80073a4:	3001      	adds	r0, #1
 80073a6:	f43f ae3a 	beq.w	800701e <_printf_float+0xb6>
 80073aa:	f108 0801 	add.w	r8, r8, #1
 80073ae:	68e3      	ldr	r3, [r4, #12]
 80073b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80073b2:	1a5b      	subs	r3, r3, r1
 80073b4:	4543      	cmp	r3, r8
 80073b6:	dcf0      	bgt.n	800739a <_printf_float+0x432>
 80073b8:	e6fb      	b.n	80071b2 <_printf_float+0x24a>
 80073ba:	f04f 0800 	mov.w	r8, #0
 80073be:	f104 0919 	add.w	r9, r4, #25
 80073c2:	e7f4      	b.n	80073ae <_printf_float+0x446>

080073c4 <_printf_common>:
 80073c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c8:	4616      	mov	r6, r2
 80073ca:	4699      	mov	r9, r3
 80073cc:	688a      	ldr	r2, [r1, #8]
 80073ce:	690b      	ldr	r3, [r1, #16]
 80073d0:	4607      	mov	r7, r0
 80073d2:	4293      	cmp	r3, r2
 80073d4:	bfb8      	it	lt
 80073d6:	4613      	movlt	r3, r2
 80073d8:	6033      	str	r3, [r6, #0]
 80073da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073de:	460c      	mov	r4, r1
 80073e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073e4:	b10a      	cbz	r2, 80073ea <_printf_common+0x26>
 80073e6:	3301      	adds	r3, #1
 80073e8:	6033      	str	r3, [r6, #0]
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	0699      	lsls	r1, r3, #26
 80073ee:	bf42      	ittt	mi
 80073f0:	6833      	ldrmi	r3, [r6, #0]
 80073f2:	3302      	addmi	r3, #2
 80073f4:	6033      	strmi	r3, [r6, #0]
 80073f6:	6825      	ldr	r5, [r4, #0]
 80073f8:	f015 0506 	ands.w	r5, r5, #6
 80073fc:	d106      	bne.n	800740c <_printf_common+0x48>
 80073fe:	f104 0a19 	add.w	sl, r4, #25
 8007402:	68e3      	ldr	r3, [r4, #12]
 8007404:	6832      	ldr	r2, [r6, #0]
 8007406:	1a9b      	subs	r3, r3, r2
 8007408:	42ab      	cmp	r3, r5
 800740a:	dc2b      	bgt.n	8007464 <_printf_common+0xa0>
 800740c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007410:	1e13      	subs	r3, r2, #0
 8007412:	6822      	ldr	r2, [r4, #0]
 8007414:	bf18      	it	ne
 8007416:	2301      	movne	r3, #1
 8007418:	0692      	lsls	r2, r2, #26
 800741a:	d430      	bmi.n	800747e <_printf_common+0xba>
 800741c:	4649      	mov	r1, r9
 800741e:	4638      	mov	r0, r7
 8007420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007424:	47c0      	blx	r8
 8007426:	3001      	adds	r0, #1
 8007428:	d023      	beq.n	8007472 <_printf_common+0xae>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	6922      	ldr	r2, [r4, #16]
 800742e:	f003 0306 	and.w	r3, r3, #6
 8007432:	2b04      	cmp	r3, #4
 8007434:	bf14      	ite	ne
 8007436:	2500      	movne	r5, #0
 8007438:	6833      	ldreq	r3, [r6, #0]
 800743a:	f04f 0600 	mov.w	r6, #0
 800743e:	bf08      	it	eq
 8007440:	68e5      	ldreq	r5, [r4, #12]
 8007442:	f104 041a 	add.w	r4, r4, #26
 8007446:	bf08      	it	eq
 8007448:	1aed      	subeq	r5, r5, r3
 800744a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800744e:	bf08      	it	eq
 8007450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007454:	4293      	cmp	r3, r2
 8007456:	bfc4      	itt	gt
 8007458:	1a9b      	subgt	r3, r3, r2
 800745a:	18ed      	addgt	r5, r5, r3
 800745c:	42b5      	cmp	r5, r6
 800745e:	d11a      	bne.n	8007496 <_printf_common+0xd2>
 8007460:	2000      	movs	r0, #0
 8007462:	e008      	b.n	8007476 <_printf_common+0xb2>
 8007464:	2301      	movs	r3, #1
 8007466:	4652      	mov	r2, sl
 8007468:	4649      	mov	r1, r9
 800746a:	4638      	mov	r0, r7
 800746c:	47c0      	blx	r8
 800746e:	3001      	adds	r0, #1
 8007470:	d103      	bne.n	800747a <_printf_common+0xb6>
 8007472:	f04f 30ff 	mov.w	r0, #4294967295
 8007476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800747a:	3501      	adds	r5, #1
 800747c:	e7c1      	b.n	8007402 <_printf_common+0x3e>
 800747e:	2030      	movs	r0, #48	; 0x30
 8007480:	18e1      	adds	r1, r4, r3
 8007482:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800748c:	4422      	add	r2, r4
 800748e:	3302      	adds	r3, #2
 8007490:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007494:	e7c2      	b.n	800741c <_printf_common+0x58>
 8007496:	2301      	movs	r3, #1
 8007498:	4622      	mov	r2, r4
 800749a:	4649      	mov	r1, r9
 800749c:	4638      	mov	r0, r7
 800749e:	47c0      	blx	r8
 80074a0:	3001      	adds	r0, #1
 80074a2:	d0e6      	beq.n	8007472 <_printf_common+0xae>
 80074a4:	3601      	adds	r6, #1
 80074a6:	e7d9      	b.n	800745c <_printf_common+0x98>

080074a8 <_printf_i>:
 80074a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074ac:	7e0f      	ldrb	r7, [r1, #24]
 80074ae:	4691      	mov	r9, r2
 80074b0:	2f78      	cmp	r7, #120	; 0x78
 80074b2:	4680      	mov	r8, r0
 80074b4:	460c      	mov	r4, r1
 80074b6:	469a      	mov	sl, r3
 80074b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074be:	d807      	bhi.n	80074d0 <_printf_i+0x28>
 80074c0:	2f62      	cmp	r7, #98	; 0x62
 80074c2:	d80a      	bhi.n	80074da <_printf_i+0x32>
 80074c4:	2f00      	cmp	r7, #0
 80074c6:	f000 80d5 	beq.w	8007674 <_printf_i+0x1cc>
 80074ca:	2f58      	cmp	r7, #88	; 0x58
 80074cc:	f000 80c1 	beq.w	8007652 <_printf_i+0x1aa>
 80074d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074d8:	e03a      	b.n	8007550 <_printf_i+0xa8>
 80074da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074de:	2b15      	cmp	r3, #21
 80074e0:	d8f6      	bhi.n	80074d0 <_printf_i+0x28>
 80074e2:	a101      	add	r1, pc, #4	; (adr r1, 80074e8 <_printf_i+0x40>)
 80074e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074e8:	08007541 	.word	0x08007541
 80074ec:	08007555 	.word	0x08007555
 80074f0:	080074d1 	.word	0x080074d1
 80074f4:	080074d1 	.word	0x080074d1
 80074f8:	080074d1 	.word	0x080074d1
 80074fc:	080074d1 	.word	0x080074d1
 8007500:	08007555 	.word	0x08007555
 8007504:	080074d1 	.word	0x080074d1
 8007508:	080074d1 	.word	0x080074d1
 800750c:	080074d1 	.word	0x080074d1
 8007510:	080074d1 	.word	0x080074d1
 8007514:	0800765b 	.word	0x0800765b
 8007518:	08007581 	.word	0x08007581
 800751c:	08007615 	.word	0x08007615
 8007520:	080074d1 	.word	0x080074d1
 8007524:	080074d1 	.word	0x080074d1
 8007528:	0800767d 	.word	0x0800767d
 800752c:	080074d1 	.word	0x080074d1
 8007530:	08007581 	.word	0x08007581
 8007534:	080074d1 	.word	0x080074d1
 8007538:	080074d1 	.word	0x080074d1
 800753c:	0800761d 	.word	0x0800761d
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	1d1a      	adds	r2, r3, #4
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	602a      	str	r2, [r5, #0]
 8007548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800754c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007550:	2301      	movs	r3, #1
 8007552:	e0a0      	b.n	8007696 <_printf_i+0x1ee>
 8007554:	6820      	ldr	r0, [r4, #0]
 8007556:	682b      	ldr	r3, [r5, #0]
 8007558:	0607      	lsls	r7, r0, #24
 800755a:	f103 0104 	add.w	r1, r3, #4
 800755e:	6029      	str	r1, [r5, #0]
 8007560:	d501      	bpl.n	8007566 <_printf_i+0xbe>
 8007562:	681e      	ldr	r6, [r3, #0]
 8007564:	e003      	b.n	800756e <_printf_i+0xc6>
 8007566:	0646      	lsls	r6, r0, #25
 8007568:	d5fb      	bpl.n	8007562 <_printf_i+0xba>
 800756a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800756e:	2e00      	cmp	r6, #0
 8007570:	da03      	bge.n	800757a <_printf_i+0xd2>
 8007572:	232d      	movs	r3, #45	; 0x2d
 8007574:	4276      	negs	r6, r6
 8007576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800757a:	230a      	movs	r3, #10
 800757c:	4859      	ldr	r0, [pc, #356]	; (80076e4 <_printf_i+0x23c>)
 800757e:	e012      	b.n	80075a6 <_printf_i+0xfe>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	6820      	ldr	r0, [r4, #0]
 8007584:	1d19      	adds	r1, r3, #4
 8007586:	6029      	str	r1, [r5, #0]
 8007588:	0605      	lsls	r5, r0, #24
 800758a:	d501      	bpl.n	8007590 <_printf_i+0xe8>
 800758c:	681e      	ldr	r6, [r3, #0]
 800758e:	e002      	b.n	8007596 <_printf_i+0xee>
 8007590:	0641      	lsls	r1, r0, #25
 8007592:	d5fb      	bpl.n	800758c <_printf_i+0xe4>
 8007594:	881e      	ldrh	r6, [r3, #0]
 8007596:	2f6f      	cmp	r7, #111	; 0x6f
 8007598:	bf0c      	ite	eq
 800759a:	2308      	moveq	r3, #8
 800759c:	230a      	movne	r3, #10
 800759e:	4851      	ldr	r0, [pc, #324]	; (80076e4 <_printf_i+0x23c>)
 80075a0:	2100      	movs	r1, #0
 80075a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075a6:	6865      	ldr	r5, [r4, #4]
 80075a8:	2d00      	cmp	r5, #0
 80075aa:	bfa8      	it	ge
 80075ac:	6821      	ldrge	r1, [r4, #0]
 80075ae:	60a5      	str	r5, [r4, #8]
 80075b0:	bfa4      	itt	ge
 80075b2:	f021 0104 	bicge.w	r1, r1, #4
 80075b6:	6021      	strge	r1, [r4, #0]
 80075b8:	b90e      	cbnz	r6, 80075be <_printf_i+0x116>
 80075ba:	2d00      	cmp	r5, #0
 80075bc:	d04b      	beq.n	8007656 <_printf_i+0x1ae>
 80075be:	4615      	mov	r5, r2
 80075c0:	fbb6 f1f3 	udiv	r1, r6, r3
 80075c4:	fb03 6711 	mls	r7, r3, r1, r6
 80075c8:	5dc7      	ldrb	r7, [r0, r7]
 80075ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075ce:	4637      	mov	r7, r6
 80075d0:	42bb      	cmp	r3, r7
 80075d2:	460e      	mov	r6, r1
 80075d4:	d9f4      	bls.n	80075c0 <_printf_i+0x118>
 80075d6:	2b08      	cmp	r3, #8
 80075d8:	d10b      	bne.n	80075f2 <_printf_i+0x14a>
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	07de      	lsls	r6, r3, #31
 80075de:	d508      	bpl.n	80075f2 <_printf_i+0x14a>
 80075e0:	6923      	ldr	r3, [r4, #16]
 80075e2:	6861      	ldr	r1, [r4, #4]
 80075e4:	4299      	cmp	r1, r3
 80075e6:	bfde      	ittt	le
 80075e8:	2330      	movle	r3, #48	; 0x30
 80075ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075f2:	1b52      	subs	r2, r2, r5
 80075f4:	6122      	str	r2, [r4, #16]
 80075f6:	464b      	mov	r3, r9
 80075f8:	4621      	mov	r1, r4
 80075fa:	4640      	mov	r0, r8
 80075fc:	f8cd a000 	str.w	sl, [sp]
 8007600:	aa03      	add	r2, sp, #12
 8007602:	f7ff fedf 	bl	80073c4 <_printf_common>
 8007606:	3001      	adds	r0, #1
 8007608:	d14a      	bne.n	80076a0 <_printf_i+0x1f8>
 800760a:	f04f 30ff 	mov.w	r0, #4294967295
 800760e:	b004      	add	sp, #16
 8007610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	f043 0320 	orr.w	r3, r3, #32
 800761a:	6023      	str	r3, [r4, #0]
 800761c:	2778      	movs	r7, #120	; 0x78
 800761e:	4832      	ldr	r0, [pc, #200]	; (80076e8 <_printf_i+0x240>)
 8007620:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	6829      	ldr	r1, [r5, #0]
 8007628:	061f      	lsls	r7, r3, #24
 800762a:	f851 6b04 	ldr.w	r6, [r1], #4
 800762e:	d402      	bmi.n	8007636 <_printf_i+0x18e>
 8007630:	065f      	lsls	r7, r3, #25
 8007632:	bf48      	it	mi
 8007634:	b2b6      	uxthmi	r6, r6
 8007636:	07df      	lsls	r7, r3, #31
 8007638:	bf48      	it	mi
 800763a:	f043 0320 	orrmi.w	r3, r3, #32
 800763e:	6029      	str	r1, [r5, #0]
 8007640:	bf48      	it	mi
 8007642:	6023      	strmi	r3, [r4, #0]
 8007644:	b91e      	cbnz	r6, 800764e <_printf_i+0x1a6>
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	f023 0320 	bic.w	r3, r3, #32
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	2310      	movs	r3, #16
 8007650:	e7a6      	b.n	80075a0 <_printf_i+0xf8>
 8007652:	4824      	ldr	r0, [pc, #144]	; (80076e4 <_printf_i+0x23c>)
 8007654:	e7e4      	b.n	8007620 <_printf_i+0x178>
 8007656:	4615      	mov	r5, r2
 8007658:	e7bd      	b.n	80075d6 <_printf_i+0x12e>
 800765a:	682b      	ldr	r3, [r5, #0]
 800765c:	6826      	ldr	r6, [r4, #0]
 800765e:	1d18      	adds	r0, r3, #4
 8007660:	6961      	ldr	r1, [r4, #20]
 8007662:	6028      	str	r0, [r5, #0]
 8007664:	0635      	lsls	r5, r6, #24
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	d501      	bpl.n	800766e <_printf_i+0x1c6>
 800766a:	6019      	str	r1, [r3, #0]
 800766c:	e002      	b.n	8007674 <_printf_i+0x1cc>
 800766e:	0670      	lsls	r0, r6, #25
 8007670:	d5fb      	bpl.n	800766a <_printf_i+0x1c2>
 8007672:	8019      	strh	r1, [r3, #0]
 8007674:	2300      	movs	r3, #0
 8007676:	4615      	mov	r5, r2
 8007678:	6123      	str	r3, [r4, #16]
 800767a:	e7bc      	b.n	80075f6 <_printf_i+0x14e>
 800767c:	682b      	ldr	r3, [r5, #0]
 800767e:	2100      	movs	r1, #0
 8007680:	1d1a      	adds	r2, r3, #4
 8007682:	602a      	str	r2, [r5, #0]
 8007684:	681d      	ldr	r5, [r3, #0]
 8007686:	6862      	ldr	r2, [r4, #4]
 8007688:	4628      	mov	r0, r5
 800768a:	f000 fc1e 	bl	8007eca <memchr>
 800768e:	b108      	cbz	r0, 8007694 <_printf_i+0x1ec>
 8007690:	1b40      	subs	r0, r0, r5
 8007692:	6060      	str	r0, [r4, #4]
 8007694:	6863      	ldr	r3, [r4, #4]
 8007696:	6123      	str	r3, [r4, #16]
 8007698:	2300      	movs	r3, #0
 800769a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800769e:	e7aa      	b.n	80075f6 <_printf_i+0x14e>
 80076a0:	462a      	mov	r2, r5
 80076a2:	4649      	mov	r1, r9
 80076a4:	4640      	mov	r0, r8
 80076a6:	6923      	ldr	r3, [r4, #16]
 80076a8:	47d0      	blx	sl
 80076aa:	3001      	adds	r0, #1
 80076ac:	d0ad      	beq.n	800760a <_printf_i+0x162>
 80076ae:	6823      	ldr	r3, [r4, #0]
 80076b0:	079b      	lsls	r3, r3, #30
 80076b2:	d413      	bmi.n	80076dc <_printf_i+0x234>
 80076b4:	68e0      	ldr	r0, [r4, #12]
 80076b6:	9b03      	ldr	r3, [sp, #12]
 80076b8:	4298      	cmp	r0, r3
 80076ba:	bfb8      	it	lt
 80076bc:	4618      	movlt	r0, r3
 80076be:	e7a6      	b.n	800760e <_printf_i+0x166>
 80076c0:	2301      	movs	r3, #1
 80076c2:	4632      	mov	r2, r6
 80076c4:	4649      	mov	r1, r9
 80076c6:	4640      	mov	r0, r8
 80076c8:	47d0      	blx	sl
 80076ca:	3001      	adds	r0, #1
 80076cc:	d09d      	beq.n	800760a <_printf_i+0x162>
 80076ce:	3501      	adds	r5, #1
 80076d0:	68e3      	ldr	r3, [r4, #12]
 80076d2:	9903      	ldr	r1, [sp, #12]
 80076d4:	1a5b      	subs	r3, r3, r1
 80076d6:	42ab      	cmp	r3, r5
 80076d8:	dcf2      	bgt.n	80076c0 <_printf_i+0x218>
 80076da:	e7eb      	b.n	80076b4 <_printf_i+0x20c>
 80076dc:	2500      	movs	r5, #0
 80076de:	f104 0619 	add.w	r6, r4, #25
 80076e2:	e7f5      	b.n	80076d0 <_printf_i+0x228>
 80076e4:	0800be70 	.word	0x0800be70
 80076e8:	0800be81 	.word	0x0800be81

080076ec <_scanf_float>:
 80076ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f0:	b087      	sub	sp, #28
 80076f2:	9303      	str	r3, [sp, #12]
 80076f4:	688b      	ldr	r3, [r1, #8]
 80076f6:	4617      	mov	r7, r2
 80076f8:	1e5a      	subs	r2, r3, #1
 80076fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80076fe:	bf85      	ittet	hi
 8007700:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007704:	195b      	addhi	r3, r3, r5
 8007706:	2300      	movls	r3, #0
 8007708:	9302      	strhi	r3, [sp, #8]
 800770a:	bf88      	it	hi
 800770c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007710:	468b      	mov	fp, r1
 8007712:	f04f 0500 	mov.w	r5, #0
 8007716:	bf8c      	ite	hi
 8007718:	608b      	strhi	r3, [r1, #8]
 800771a:	9302      	strls	r3, [sp, #8]
 800771c:	680b      	ldr	r3, [r1, #0]
 800771e:	4680      	mov	r8, r0
 8007720:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007724:	f84b 3b1c 	str.w	r3, [fp], #28
 8007728:	460c      	mov	r4, r1
 800772a:	465e      	mov	r6, fp
 800772c:	46aa      	mov	sl, r5
 800772e:	46a9      	mov	r9, r5
 8007730:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007734:	9501      	str	r5, [sp, #4]
 8007736:	68a2      	ldr	r2, [r4, #8]
 8007738:	b152      	cbz	r2, 8007750 <_scanf_float+0x64>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	2b4e      	cmp	r3, #78	; 0x4e
 8007740:	d864      	bhi.n	800780c <_scanf_float+0x120>
 8007742:	2b40      	cmp	r3, #64	; 0x40
 8007744:	d83c      	bhi.n	80077c0 <_scanf_float+0xd4>
 8007746:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800774a:	b2c8      	uxtb	r0, r1
 800774c:	280e      	cmp	r0, #14
 800774e:	d93a      	bls.n	80077c6 <_scanf_float+0xda>
 8007750:	f1b9 0f00 	cmp.w	r9, #0
 8007754:	d003      	beq.n	800775e <_scanf_float+0x72>
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007762:	f1ba 0f01 	cmp.w	sl, #1
 8007766:	f200 8113 	bhi.w	8007990 <_scanf_float+0x2a4>
 800776a:	455e      	cmp	r6, fp
 800776c:	f200 8105 	bhi.w	800797a <_scanf_float+0x28e>
 8007770:	2501      	movs	r5, #1
 8007772:	4628      	mov	r0, r5
 8007774:	b007      	add	sp, #28
 8007776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800777e:	2a0d      	cmp	r2, #13
 8007780:	d8e6      	bhi.n	8007750 <_scanf_float+0x64>
 8007782:	a101      	add	r1, pc, #4	; (adr r1, 8007788 <_scanf_float+0x9c>)
 8007784:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007788:	080078c7 	.word	0x080078c7
 800778c:	08007751 	.word	0x08007751
 8007790:	08007751 	.word	0x08007751
 8007794:	08007751 	.word	0x08007751
 8007798:	08007927 	.word	0x08007927
 800779c:	080078ff 	.word	0x080078ff
 80077a0:	08007751 	.word	0x08007751
 80077a4:	08007751 	.word	0x08007751
 80077a8:	080078d5 	.word	0x080078d5
 80077ac:	08007751 	.word	0x08007751
 80077b0:	08007751 	.word	0x08007751
 80077b4:	08007751 	.word	0x08007751
 80077b8:	08007751 	.word	0x08007751
 80077bc:	0800788d 	.word	0x0800788d
 80077c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80077c4:	e7db      	b.n	800777e <_scanf_float+0x92>
 80077c6:	290e      	cmp	r1, #14
 80077c8:	d8c2      	bhi.n	8007750 <_scanf_float+0x64>
 80077ca:	a001      	add	r0, pc, #4	; (adr r0, 80077d0 <_scanf_float+0xe4>)
 80077cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80077d0:	0800787f 	.word	0x0800787f
 80077d4:	08007751 	.word	0x08007751
 80077d8:	0800787f 	.word	0x0800787f
 80077dc:	08007913 	.word	0x08007913
 80077e0:	08007751 	.word	0x08007751
 80077e4:	0800782d 	.word	0x0800782d
 80077e8:	08007869 	.word	0x08007869
 80077ec:	08007869 	.word	0x08007869
 80077f0:	08007869 	.word	0x08007869
 80077f4:	08007869 	.word	0x08007869
 80077f8:	08007869 	.word	0x08007869
 80077fc:	08007869 	.word	0x08007869
 8007800:	08007869 	.word	0x08007869
 8007804:	08007869 	.word	0x08007869
 8007808:	08007869 	.word	0x08007869
 800780c:	2b6e      	cmp	r3, #110	; 0x6e
 800780e:	d809      	bhi.n	8007824 <_scanf_float+0x138>
 8007810:	2b60      	cmp	r3, #96	; 0x60
 8007812:	d8b2      	bhi.n	800777a <_scanf_float+0x8e>
 8007814:	2b54      	cmp	r3, #84	; 0x54
 8007816:	d077      	beq.n	8007908 <_scanf_float+0x21c>
 8007818:	2b59      	cmp	r3, #89	; 0x59
 800781a:	d199      	bne.n	8007750 <_scanf_float+0x64>
 800781c:	2d07      	cmp	r5, #7
 800781e:	d197      	bne.n	8007750 <_scanf_float+0x64>
 8007820:	2508      	movs	r5, #8
 8007822:	e029      	b.n	8007878 <_scanf_float+0x18c>
 8007824:	2b74      	cmp	r3, #116	; 0x74
 8007826:	d06f      	beq.n	8007908 <_scanf_float+0x21c>
 8007828:	2b79      	cmp	r3, #121	; 0x79
 800782a:	e7f6      	b.n	800781a <_scanf_float+0x12e>
 800782c:	6821      	ldr	r1, [r4, #0]
 800782e:	05c8      	lsls	r0, r1, #23
 8007830:	d51a      	bpl.n	8007868 <_scanf_float+0x17c>
 8007832:	9b02      	ldr	r3, [sp, #8]
 8007834:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007838:	6021      	str	r1, [r4, #0]
 800783a:	f109 0901 	add.w	r9, r9, #1
 800783e:	b11b      	cbz	r3, 8007848 <_scanf_float+0x15c>
 8007840:	3b01      	subs	r3, #1
 8007842:	3201      	adds	r2, #1
 8007844:	9302      	str	r3, [sp, #8]
 8007846:	60a2      	str	r2, [r4, #8]
 8007848:	68a3      	ldr	r3, [r4, #8]
 800784a:	3b01      	subs	r3, #1
 800784c:	60a3      	str	r3, [r4, #8]
 800784e:	6923      	ldr	r3, [r4, #16]
 8007850:	3301      	adds	r3, #1
 8007852:	6123      	str	r3, [r4, #16]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3b01      	subs	r3, #1
 8007858:	2b00      	cmp	r3, #0
 800785a:	607b      	str	r3, [r7, #4]
 800785c:	f340 8084 	ble.w	8007968 <_scanf_float+0x27c>
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	3301      	adds	r3, #1
 8007864:	603b      	str	r3, [r7, #0]
 8007866:	e766      	b.n	8007736 <_scanf_float+0x4a>
 8007868:	eb1a 0f05 	cmn.w	sl, r5
 800786c:	f47f af70 	bne.w	8007750 <_scanf_float+0x64>
 8007870:	6822      	ldr	r2, [r4, #0]
 8007872:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007876:	6022      	str	r2, [r4, #0]
 8007878:	f806 3b01 	strb.w	r3, [r6], #1
 800787c:	e7e4      	b.n	8007848 <_scanf_float+0x15c>
 800787e:	6822      	ldr	r2, [r4, #0]
 8007880:	0610      	lsls	r0, r2, #24
 8007882:	f57f af65 	bpl.w	8007750 <_scanf_float+0x64>
 8007886:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800788a:	e7f4      	b.n	8007876 <_scanf_float+0x18a>
 800788c:	f1ba 0f00 	cmp.w	sl, #0
 8007890:	d10e      	bne.n	80078b0 <_scanf_float+0x1c4>
 8007892:	f1b9 0f00 	cmp.w	r9, #0
 8007896:	d10e      	bne.n	80078b6 <_scanf_float+0x1ca>
 8007898:	6822      	ldr	r2, [r4, #0]
 800789a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800789e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80078a2:	d108      	bne.n	80078b6 <_scanf_float+0x1ca>
 80078a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80078a8:	f04f 0a01 	mov.w	sl, #1
 80078ac:	6022      	str	r2, [r4, #0]
 80078ae:	e7e3      	b.n	8007878 <_scanf_float+0x18c>
 80078b0:	f1ba 0f02 	cmp.w	sl, #2
 80078b4:	d055      	beq.n	8007962 <_scanf_float+0x276>
 80078b6:	2d01      	cmp	r5, #1
 80078b8:	d002      	beq.n	80078c0 <_scanf_float+0x1d4>
 80078ba:	2d04      	cmp	r5, #4
 80078bc:	f47f af48 	bne.w	8007750 <_scanf_float+0x64>
 80078c0:	3501      	adds	r5, #1
 80078c2:	b2ed      	uxtb	r5, r5
 80078c4:	e7d8      	b.n	8007878 <_scanf_float+0x18c>
 80078c6:	f1ba 0f01 	cmp.w	sl, #1
 80078ca:	f47f af41 	bne.w	8007750 <_scanf_float+0x64>
 80078ce:	f04f 0a02 	mov.w	sl, #2
 80078d2:	e7d1      	b.n	8007878 <_scanf_float+0x18c>
 80078d4:	b97d      	cbnz	r5, 80078f6 <_scanf_float+0x20a>
 80078d6:	f1b9 0f00 	cmp.w	r9, #0
 80078da:	f47f af3c 	bne.w	8007756 <_scanf_float+0x6a>
 80078de:	6822      	ldr	r2, [r4, #0]
 80078e0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80078e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80078e8:	f47f af39 	bne.w	800775e <_scanf_float+0x72>
 80078ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80078f0:	2501      	movs	r5, #1
 80078f2:	6022      	str	r2, [r4, #0]
 80078f4:	e7c0      	b.n	8007878 <_scanf_float+0x18c>
 80078f6:	2d03      	cmp	r5, #3
 80078f8:	d0e2      	beq.n	80078c0 <_scanf_float+0x1d4>
 80078fa:	2d05      	cmp	r5, #5
 80078fc:	e7de      	b.n	80078bc <_scanf_float+0x1d0>
 80078fe:	2d02      	cmp	r5, #2
 8007900:	f47f af26 	bne.w	8007750 <_scanf_float+0x64>
 8007904:	2503      	movs	r5, #3
 8007906:	e7b7      	b.n	8007878 <_scanf_float+0x18c>
 8007908:	2d06      	cmp	r5, #6
 800790a:	f47f af21 	bne.w	8007750 <_scanf_float+0x64>
 800790e:	2507      	movs	r5, #7
 8007910:	e7b2      	b.n	8007878 <_scanf_float+0x18c>
 8007912:	6822      	ldr	r2, [r4, #0]
 8007914:	0591      	lsls	r1, r2, #22
 8007916:	f57f af1b 	bpl.w	8007750 <_scanf_float+0x64>
 800791a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800791e:	6022      	str	r2, [r4, #0]
 8007920:	f8cd 9004 	str.w	r9, [sp, #4]
 8007924:	e7a8      	b.n	8007878 <_scanf_float+0x18c>
 8007926:	6822      	ldr	r2, [r4, #0]
 8007928:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800792c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007930:	d006      	beq.n	8007940 <_scanf_float+0x254>
 8007932:	0550      	lsls	r0, r2, #21
 8007934:	f57f af0c 	bpl.w	8007750 <_scanf_float+0x64>
 8007938:	f1b9 0f00 	cmp.w	r9, #0
 800793c:	f43f af0f 	beq.w	800775e <_scanf_float+0x72>
 8007940:	0591      	lsls	r1, r2, #22
 8007942:	bf58      	it	pl
 8007944:	9901      	ldrpl	r1, [sp, #4]
 8007946:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800794a:	bf58      	it	pl
 800794c:	eba9 0101 	subpl.w	r1, r9, r1
 8007950:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007954:	f04f 0900 	mov.w	r9, #0
 8007958:	bf58      	it	pl
 800795a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800795e:	6022      	str	r2, [r4, #0]
 8007960:	e78a      	b.n	8007878 <_scanf_float+0x18c>
 8007962:	f04f 0a03 	mov.w	sl, #3
 8007966:	e787      	b.n	8007878 <_scanf_float+0x18c>
 8007968:	4639      	mov	r1, r7
 800796a:	4640      	mov	r0, r8
 800796c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007970:	4798      	blx	r3
 8007972:	2800      	cmp	r0, #0
 8007974:	f43f aedf 	beq.w	8007736 <_scanf_float+0x4a>
 8007978:	e6ea      	b.n	8007750 <_scanf_float+0x64>
 800797a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800797e:	463a      	mov	r2, r7
 8007980:	4640      	mov	r0, r8
 8007982:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007986:	4798      	blx	r3
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	3b01      	subs	r3, #1
 800798c:	6123      	str	r3, [r4, #16]
 800798e:	e6ec      	b.n	800776a <_scanf_float+0x7e>
 8007990:	1e6b      	subs	r3, r5, #1
 8007992:	2b06      	cmp	r3, #6
 8007994:	d825      	bhi.n	80079e2 <_scanf_float+0x2f6>
 8007996:	2d02      	cmp	r5, #2
 8007998:	d836      	bhi.n	8007a08 <_scanf_float+0x31c>
 800799a:	455e      	cmp	r6, fp
 800799c:	f67f aee8 	bls.w	8007770 <_scanf_float+0x84>
 80079a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079a4:	463a      	mov	r2, r7
 80079a6:	4640      	mov	r0, r8
 80079a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80079ac:	4798      	blx	r3
 80079ae:	6923      	ldr	r3, [r4, #16]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	6123      	str	r3, [r4, #16]
 80079b4:	e7f1      	b.n	800799a <_scanf_float+0x2ae>
 80079b6:	9802      	ldr	r0, [sp, #8]
 80079b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80079c0:	463a      	mov	r2, r7
 80079c2:	9002      	str	r0, [sp, #8]
 80079c4:	4640      	mov	r0, r8
 80079c6:	4798      	blx	r3
 80079c8:	6923      	ldr	r3, [r4, #16]
 80079ca:	3b01      	subs	r3, #1
 80079cc:	6123      	str	r3, [r4, #16]
 80079ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079d2:	fa5f fa8a 	uxtb.w	sl, sl
 80079d6:	f1ba 0f02 	cmp.w	sl, #2
 80079da:	d1ec      	bne.n	80079b6 <_scanf_float+0x2ca>
 80079dc:	3d03      	subs	r5, #3
 80079de:	b2ed      	uxtb	r5, r5
 80079e0:	1b76      	subs	r6, r6, r5
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	05da      	lsls	r2, r3, #23
 80079e6:	d52f      	bpl.n	8007a48 <_scanf_float+0x35c>
 80079e8:	055b      	lsls	r3, r3, #21
 80079ea:	d510      	bpl.n	8007a0e <_scanf_float+0x322>
 80079ec:	455e      	cmp	r6, fp
 80079ee:	f67f aebf 	bls.w	8007770 <_scanf_float+0x84>
 80079f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079f6:	463a      	mov	r2, r7
 80079f8:	4640      	mov	r0, r8
 80079fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80079fe:	4798      	blx	r3
 8007a00:	6923      	ldr	r3, [r4, #16]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	6123      	str	r3, [r4, #16]
 8007a06:	e7f1      	b.n	80079ec <_scanf_float+0x300>
 8007a08:	46aa      	mov	sl, r5
 8007a0a:	9602      	str	r6, [sp, #8]
 8007a0c:	e7df      	b.n	80079ce <_scanf_float+0x2e2>
 8007a0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007a12:	6923      	ldr	r3, [r4, #16]
 8007a14:	2965      	cmp	r1, #101	; 0x65
 8007a16:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a1a:	f106 35ff 	add.w	r5, r6, #4294967295
 8007a1e:	6123      	str	r3, [r4, #16]
 8007a20:	d00c      	beq.n	8007a3c <_scanf_float+0x350>
 8007a22:	2945      	cmp	r1, #69	; 0x45
 8007a24:	d00a      	beq.n	8007a3c <_scanf_float+0x350>
 8007a26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a2a:	463a      	mov	r2, r7
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	4798      	blx	r3
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	1eb5      	subs	r5, r6, #2
 8007a3a:	6123      	str	r3, [r4, #16]
 8007a3c:	463a      	mov	r2, r7
 8007a3e:	4640      	mov	r0, r8
 8007a40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a44:	4798      	blx	r3
 8007a46:	462e      	mov	r6, r5
 8007a48:	6825      	ldr	r5, [r4, #0]
 8007a4a:	f015 0510 	ands.w	r5, r5, #16
 8007a4e:	d155      	bne.n	8007afc <_scanf_float+0x410>
 8007a50:	7035      	strb	r5, [r6, #0]
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a5c:	d11d      	bne.n	8007a9a <_scanf_float+0x3ae>
 8007a5e:	9b01      	ldr	r3, [sp, #4]
 8007a60:	454b      	cmp	r3, r9
 8007a62:	eba3 0209 	sub.w	r2, r3, r9
 8007a66:	d125      	bne.n	8007ab4 <_scanf_float+0x3c8>
 8007a68:	2200      	movs	r2, #0
 8007a6a:	4659      	mov	r1, fp
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	f002 fc5f 	bl	800a330 <_strtod_r>
 8007a72:	9b03      	ldr	r3, [sp, #12]
 8007a74:	f8d4 c000 	ldr.w	ip, [r4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f01c 0f02 	tst.w	ip, #2
 8007a7e:	4606      	mov	r6, r0
 8007a80:	460f      	mov	r7, r1
 8007a82:	f103 0204 	add.w	r2, r3, #4
 8007a86:	d020      	beq.n	8007aca <_scanf_float+0x3de>
 8007a88:	9903      	ldr	r1, [sp, #12]
 8007a8a:	600a      	str	r2, [r1, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	e9c3 6700 	strd	r6, r7, [r3]
 8007a92:	68e3      	ldr	r3, [r4, #12]
 8007a94:	3301      	adds	r3, #1
 8007a96:	60e3      	str	r3, [r4, #12]
 8007a98:	e66b      	b.n	8007772 <_scanf_float+0x86>
 8007a9a:	9b04      	ldr	r3, [sp, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0e3      	beq.n	8007a68 <_scanf_float+0x37c>
 8007aa0:	9905      	ldr	r1, [sp, #20]
 8007aa2:	230a      	movs	r3, #10
 8007aa4:	462a      	mov	r2, r5
 8007aa6:	4640      	mov	r0, r8
 8007aa8:	3101      	adds	r1, #1
 8007aaa:	f002 fcc5 	bl	800a438 <_strtol_r>
 8007aae:	9b04      	ldr	r3, [sp, #16]
 8007ab0:	9e05      	ldr	r6, [sp, #20]
 8007ab2:	1ac2      	subs	r2, r0, r3
 8007ab4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007ab8:	429e      	cmp	r6, r3
 8007aba:	bf28      	it	cs
 8007abc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	490f      	ldr	r1, [pc, #60]	; (8007b00 <_scanf_float+0x414>)
 8007ac4:	f000 f916 	bl	8007cf4 <siprintf>
 8007ac8:	e7ce      	b.n	8007a68 <_scanf_float+0x37c>
 8007aca:	f01c 0f04 	tst.w	ip, #4
 8007ace:	d1db      	bne.n	8007a88 <_scanf_float+0x39c>
 8007ad0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007ad4:	f8cc 2000 	str.w	r2, [ip]
 8007ad8:	f8d3 8000 	ldr.w	r8, [r3]
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	f7f8 ff94 	bl	8000a0c <__aeabi_dcmpun>
 8007ae4:	b128      	cbz	r0, 8007af2 <_scanf_float+0x406>
 8007ae6:	4807      	ldr	r0, [pc, #28]	; (8007b04 <_scanf_float+0x418>)
 8007ae8:	f000 f9fe 	bl	8007ee8 <nanf>
 8007aec:	f8c8 0000 	str.w	r0, [r8]
 8007af0:	e7cf      	b.n	8007a92 <_scanf_float+0x3a6>
 8007af2:	4630      	mov	r0, r6
 8007af4:	4639      	mov	r1, r7
 8007af6:	f7f8 ffe7 	bl	8000ac8 <__aeabi_d2f>
 8007afa:	e7f7      	b.n	8007aec <_scanf_float+0x400>
 8007afc:	2500      	movs	r5, #0
 8007afe:	e638      	b.n	8007772 <_scanf_float+0x86>
 8007b00:	0800be92 	.word	0x0800be92
 8007b04:	0800c225 	.word	0x0800c225

08007b08 <std>:
 8007b08:	2300      	movs	r3, #0
 8007b0a:	b510      	push	{r4, lr}
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8007b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b16:	6083      	str	r3, [r0, #8]
 8007b18:	8181      	strh	r1, [r0, #12]
 8007b1a:	6643      	str	r3, [r0, #100]	; 0x64
 8007b1c:	81c2      	strh	r2, [r0, #14]
 8007b1e:	6183      	str	r3, [r0, #24]
 8007b20:	4619      	mov	r1, r3
 8007b22:	2208      	movs	r2, #8
 8007b24:	305c      	adds	r0, #92	; 0x5c
 8007b26:	f000 f948 	bl	8007dba <memset>
 8007b2a:	4b0d      	ldr	r3, [pc, #52]	; (8007b60 <std+0x58>)
 8007b2c:	6224      	str	r4, [r4, #32]
 8007b2e:	6263      	str	r3, [r4, #36]	; 0x24
 8007b30:	4b0c      	ldr	r3, [pc, #48]	; (8007b64 <std+0x5c>)
 8007b32:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b34:	4b0c      	ldr	r3, [pc, #48]	; (8007b68 <std+0x60>)
 8007b36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b38:	4b0c      	ldr	r3, [pc, #48]	; (8007b6c <std+0x64>)
 8007b3a:	6323      	str	r3, [r4, #48]	; 0x30
 8007b3c:	4b0c      	ldr	r3, [pc, #48]	; (8007b70 <std+0x68>)
 8007b3e:	429c      	cmp	r4, r3
 8007b40:	d006      	beq.n	8007b50 <std+0x48>
 8007b42:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007b46:	4294      	cmp	r4, r2
 8007b48:	d002      	beq.n	8007b50 <std+0x48>
 8007b4a:	33d0      	adds	r3, #208	; 0xd0
 8007b4c:	429c      	cmp	r4, r3
 8007b4e:	d105      	bne.n	8007b5c <std+0x54>
 8007b50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b58:	f000 b9ac 	b.w	8007eb4 <__retarget_lock_init_recursive>
 8007b5c:	bd10      	pop	{r4, pc}
 8007b5e:	bf00      	nop
 8007b60:	08007d35 	.word	0x08007d35
 8007b64:	08007d57 	.word	0x08007d57
 8007b68:	08007d8f 	.word	0x08007d8f
 8007b6c:	08007db3 	.word	0x08007db3
 8007b70:	200008fc 	.word	0x200008fc

08007b74 <stdio_exit_handler>:
 8007b74:	4a02      	ldr	r2, [pc, #8]	; (8007b80 <stdio_exit_handler+0xc>)
 8007b76:	4903      	ldr	r1, [pc, #12]	; (8007b84 <stdio_exit_handler+0x10>)
 8007b78:	4803      	ldr	r0, [pc, #12]	; (8007b88 <stdio_exit_handler+0x14>)
 8007b7a:	f000 b869 	b.w	8007c50 <_fwalk_sglue>
 8007b7e:	bf00      	nop
 8007b80:	2000001c 	.word	0x2000001c
 8007b84:	0800a7f1 	.word	0x0800a7f1
 8007b88:	20000028 	.word	0x20000028

08007b8c <cleanup_stdio>:
 8007b8c:	6841      	ldr	r1, [r0, #4]
 8007b8e:	4b0c      	ldr	r3, [pc, #48]	; (8007bc0 <cleanup_stdio+0x34>)
 8007b90:	b510      	push	{r4, lr}
 8007b92:	4299      	cmp	r1, r3
 8007b94:	4604      	mov	r4, r0
 8007b96:	d001      	beq.n	8007b9c <cleanup_stdio+0x10>
 8007b98:	f002 fe2a 	bl	800a7f0 <_fflush_r>
 8007b9c:	68a1      	ldr	r1, [r4, #8]
 8007b9e:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <cleanup_stdio+0x38>)
 8007ba0:	4299      	cmp	r1, r3
 8007ba2:	d002      	beq.n	8007baa <cleanup_stdio+0x1e>
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f002 fe23 	bl	800a7f0 <_fflush_r>
 8007baa:	68e1      	ldr	r1, [r4, #12]
 8007bac:	4b06      	ldr	r3, [pc, #24]	; (8007bc8 <cleanup_stdio+0x3c>)
 8007bae:	4299      	cmp	r1, r3
 8007bb0:	d004      	beq.n	8007bbc <cleanup_stdio+0x30>
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb8:	f002 be1a 	b.w	800a7f0 <_fflush_r>
 8007bbc:	bd10      	pop	{r4, pc}
 8007bbe:	bf00      	nop
 8007bc0:	200008fc 	.word	0x200008fc
 8007bc4:	20000964 	.word	0x20000964
 8007bc8:	200009cc 	.word	0x200009cc

08007bcc <global_stdio_init.part.0>:
 8007bcc:	b510      	push	{r4, lr}
 8007bce:	4b0b      	ldr	r3, [pc, #44]	; (8007bfc <global_stdio_init.part.0+0x30>)
 8007bd0:	4c0b      	ldr	r4, [pc, #44]	; (8007c00 <global_stdio_init.part.0+0x34>)
 8007bd2:	4a0c      	ldr	r2, [pc, #48]	; (8007c04 <global_stdio_init.part.0+0x38>)
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	601a      	str	r2, [r3, #0]
 8007bd8:	2104      	movs	r1, #4
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f7ff ff94 	bl	8007b08 <std>
 8007be0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007be4:	2201      	movs	r2, #1
 8007be6:	2109      	movs	r1, #9
 8007be8:	f7ff ff8e 	bl	8007b08 <std>
 8007bec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bf6:	2112      	movs	r1, #18
 8007bf8:	f7ff bf86 	b.w	8007b08 <std>
 8007bfc:	20000a34 	.word	0x20000a34
 8007c00:	200008fc 	.word	0x200008fc
 8007c04:	08007b75 	.word	0x08007b75

08007c08 <__sfp_lock_acquire>:
 8007c08:	4801      	ldr	r0, [pc, #4]	; (8007c10 <__sfp_lock_acquire+0x8>)
 8007c0a:	f000 b954 	b.w	8007eb6 <__retarget_lock_acquire_recursive>
 8007c0e:	bf00      	nop
 8007c10:	20000a3d 	.word	0x20000a3d

08007c14 <__sfp_lock_release>:
 8007c14:	4801      	ldr	r0, [pc, #4]	; (8007c1c <__sfp_lock_release+0x8>)
 8007c16:	f000 b94f 	b.w	8007eb8 <__retarget_lock_release_recursive>
 8007c1a:	bf00      	nop
 8007c1c:	20000a3d 	.word	0x20000a3d

08007c20 <__sinit>:
 8007c20:	b510      	push	{r4, lr}
 8007c22:	4604      	mov	r4, r0
 8007c24:	f7ff fff0 	bl	8007c08 <__sfp_lock_acquire>
 8007c28:	6a23      	ldr	r3, [r4, #32]
 8007c2a:	b11b      	cbz	r3, 8007c34 <__sinit+0x14>
 8007c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c30:	f7ff bff0 	b.w	8007c14 <__sfp_lock_release>
 8007c34:	4b04      	ldr	r3, [pc, #16]	; (8007c48 <__sinit+0x28>)
 8007c36:	6223      	str	r3, [r4, #32]
 8007c38:	4b04      	ldr	r3, [pc, #16]	; (8007c4c <__sinit+0x2c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1f5      	bne.n	8007c2c <__sinit+0xc>
 8007c40:	f7ff ffc4 	bl	8007bcc <global_stdio_init.part.0>
 8007c44:	e7f2      	b.n	8007c2c <__sinit+0xc>
 8007c46:	bf00      	nop
 8007c48:	08007b8d 	.word	0x08007b8d
 8007c4c:	20000a34 	.word	0x20000a34

08007c50 <_fwalk_sglue>:
 8007c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c54:	4607      	mov	r7, r0
 8007c56:	4688      	mov	r8, r1
 8007c58:	4614      	mov	r4, r2
 8007c5a:	2600      	movs	r6, #0
 8007c5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c60:	f1b9 0901 	subs.w	r9, r9, #1
 8007c64:	d505      	bpl.n	8007c72 <_fwalk_sglue+0x22>
 8007c66:	6824      	ldr	r4, [r4, #0]
 8007c68:	2c00      	cmp	r4, #0
 8007c6a:	d1f7      	bne.n	8007c5c <_fwalk_sglue+0xc>
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c72:	89ab      	ldrh	r3, [r5, #12]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d907      	bls.n	8007c88 <_fwalk_sglue+0x38>
 8007c78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	d003      	beq.n	8007c88 <_fwalk_sglue+0x38>
 8007c80:	4629      	mov	r1, r5
 8007c82:	4638      	mov	r0, r7
 8007c84:	47c0      	blx	r8
 8007c86:	4306      	orrs	r6, r0
 8007c88:	3568      	adds	r5, #104	; 0x68
 8007c8a:	e7e9      	b.n	8007c60 <_fwalk_sglue+0x10>

08007c8c <sniprintf>:
 8007c8c:	b40c      	push	{r2, r3}
 8007c8e:	b530      	push	{r4, r5, lr}
 8007c90:	4b17      	ldr	r3, [pc, #92]	; (8007cf0 <sniprintf+0x64>)
 8007c92:	1e0c      	subs	r4, r1, #0
 8007c94:	681d      	ldr	r5, [r3, #0]
 8007c96:	b09d      	sub	sp, #116	; 0x74
 8007c98:	da08      	bge.n	8007cac <sniprintf+0x20>
 8007c9a:	238b      	movs	r3, #139	; 0x8b
 8007c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca0:	602b      	str	r3, [r5, #0]
 8007ca2:	b01d      	add	sp, #116	; 0x74
 8007ca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ca8:	b002      	add	sp, #8
 8007caa:	4770      	bx	lr
 8007cac:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007cb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007cb4:	bf0c      	ite	eq
 8007cb6:	4623      	moveq	r3, r4
 8007cb8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007cbc:	9304      	str	r3, [sp, #16]
 8007cbe:	9307      	str	r3, [sp, #28]
 8007cc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007cc4:	9002      	str	r0, [sp, #8]
 8007cc6:	9006      	str	r0, [sp, #24]
 8007cc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ccc:	4628      	mov	r0, r5
 8007cce:	ab21      	add	r3, sp, #132	; 0x84
 8007cd0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007cd2:	a902      	add	r1, sp, #8
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	f002 fc0b 	bl	800a4f0 <_svfiprintf_r>
 8007cda:	1c43      	adds	r3, r0, #1
 8007cdc:	bfbc      	itt	lt
 8007cde:	238b      	movlt	r3, #139	; 0x8b
 8007ce0:	602b      	strlt	r3, [r5, #0]
 8007ce2:	2c00      	cmp	r4, #0
 8007ce4:	d0dd      	beq.n	8007ca2 <sniprintf+0x16>
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	9b02      	ldr	r3, [sp, #8]
 8007cea:	701a      	strb	r2, [r3, #0]
 8007cec:	e7d9      	b.n	8007ca2 <sniprintf+0x16>
 8007cee:	bf00      	nop
 8007cf0:	20000074 	.word	0x20000074

08007cf4 <siprintf>:
 8007cf4:	b40e      	push	{r1, r2, r3}
 8007cf6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007cfa:	b500      	push	{lr}
 8007cfc:	b09c      	sub	sp, #112	; 0x70
 8007cfe:	ab1d      	add	r3, sp, #116	; 0x74
 8007d00:	9002      	str	r0, [sp, #8]
 8007d02:	9006      	str	r0, [sp, #24]
 8007d04:	9107      	str	r1, [sp, #28]
 8007d06:	9104      	str	r1, [sp, #16]
 8007d08:	4808      	ldr	r0, [pc, #32]	; (8007d2c <siprintf+0x38>)
 8007d0a:	4909      	ldr	r1, [pc, #36]	; (8007d30 <siprintf+0x3c>)
 8007d0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d10:	9105      	str	r1, [sp, #20]
 8007d12:	6800      	ldr	r0, [r0, #0]
 8007d14:	a902      	add	r1, sp, #8
 8007d16:	9301      	str	r3, [sp, #4]
 8007d18:	f002 fbea 	bl	800a4f0 <_svfiprintf_r>
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	9b02      	ldr	r3, [sp, #8]
 8007d20:	701a      	strb	r2, [r3, #0]
 8007d22:	b01c      	add	sp, #112	; 0x70
 8007d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d28:	b003      	add	sp, #12
 8007d2a:	4770      	bx	lr
 8007d2c:	20000074 	.word	0x20000074
 8007d30:	ffff0208 	.word	0xffff0208

08007d34 <__sread>:
 8007d34:	b510      	push	{r4, lr}
 8007d36:	460c      	mov	r4, r1
 8007d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d3c:	f000 f86c 	bl	8007e18 <_read_r>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	bfab      	itete	ge
 8007d44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d46:	89a3      	ldrhlt	r3, [r4, #12]
 8007d48:	181b      	addge	r3, r3, r0
 8007d4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d4e:	bfac      	ite	ge
 8007d50:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d52:	81a3      	strhlt	r3, [r4, #12]
 8007d54:	bd10      	pop	{r4, pc}

08007d56 <__swrite>:
 8007d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5a:	461f      	mov	r7, r3
 8007d5c:	898b      	ldrh	r3, [r1, #12]
 8007d5e:	4605      	mov	r5, r0
 8007d60:	05db      	lsls	r3, r3, #23
 8007d62:	460c      	mov	r4, r1
 8007d64:	4616      	mov	r6, r2
 8007d66:	d505      	bpl.n	8007d74 <__swrite+0x1e>
 8007d68:	2302      	movs	r3, #2
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d70:	f000 f840 	bl	8007df4 <_lseek_r>
 8007d74:	89a3      	ldrh	r3, [r4, #12]
 8007d76:	4632      	mov	r2, r6
 8007d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d7c:	81a3      	strh	r3, [r4, #12]
 8007d7e:	4628      	mov	r0, r5
 8007d80:	463b      	mov	r3, r7
 8007d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d8a:	f000 b857 	b.w	8007e3c <_write_r>

08007d8e <__sseek>:
 8007d8e:	b510      	push	{r4, lr}
 8007d90:	460c      	mov	r4, r1
 8007d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d96:	f000 f82d 	bl	8007df4 <_lseek_r>
 8007d9a:	1c43      	adds	r3, r0, #1
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	bf15      	itete	ne
 8007da0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007da2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007da6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007daa:	81a3      	strheq	r3, [r4, #12]
 8007dac:	bf18      	it	ne
 8007dae:	81a3      	strhne	r3, [r4, #12]
 8007db0:	bd10      	pop	{r4, pc}

08007db2 <__sclose>:
 8007db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007db6:	f000 b80d 	b.w	8007dd4 <_close_r>

08007dba <memset>:
 8007dba:	4603      	mov	r3, r0
 8007dbc:	4402      	add	r2, r0
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d100      	bne.n	8007dc4 <memset+0xa>
 8007dc2:	4770      	bx	lr
 8007dc4:	f803 1b01 	strb.w	r1, [r3], #1
 8007dc8:	e7f9      	b.n	8007dbe <memset+0x4>
	...

08007dcc <_localeconv_r>:
 8007dcc:	4800      	ldr	r0, [pc, #0]	; (8007dd0 <_localeconv_r+0x4>)
 8007dce:	4770      	bx	lr
 8007dd0:	20000168 	.word	0x20000168

08007dd4 <_close_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	4d05      	ldr	r5, [pc, #20]	; (8007df0 <_close_r+0x1c>)
 8007dda:	4604      	mov	r4, r0
 8007ddc:	4608      	mov	r0, r1
 8007dde:	602b      	str	r3, [r5, #0]
 8007de0:	f7fa fe96 	bl	8002b10 <_close>
 8007de4:	1c43      	adds	r3, r0, #1
 8007de6:	d102      	bne.n	8007dee <_close_r+0x1a>
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	b103      	cbz	r3, 8007dee <_close_r+0x1a>
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	20000a38 	.word	0x20000a38

08007df4 <_lseek_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4604      	mov	r4, r0
 8007df8:	4608      	mov	r0, r1
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	4d05      	ldr	r5, [pc, #20]	; (8007e14 <_lseek_r+0x20>)
 8007e00:	602a      	str	r2, [r5, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	f7fa fea8 	bl	8002b58 <_lseek>
 8007e08:	1c43      	adds	r3, r0, #1
 8007e0a:	d102      	bne.n	8007e12 <_lseek_r+0x1e>
 8007e0c:	682b      	ldr	r3, [r5, #0]
 8007e0e:	b103      	cbz	r3, 8007e12 <_lseek_r+0x1e>
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	bd38      	pop	{r3, r4, r5, pc}
 8007e14:	20000a38 	.word	0x20000a38

08007e18 <_read_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	4608      	mov	r0, r1
 8007e1e:	4611      	mov	r1, r2
 8007e20:	2200      	movs	r2, #0
 8007e22:	4d05      	ldr	r5, [pc, #20]	; (8007e38 <_read_r+0x20>)
 8007e24:	602a      	str	r2, [r5, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	f7fa fe39 	bl	8002a9e <_read>
 8007e2c:	1c43      	adds	r3, r0, #1
 8007e2e:	d102      	bne.n	8007e36 <_read_r+0x1e>
 8007e30:	682b      	ldr	r3, [r5, #0]
 8007e32:	b103      	cbz	r3, 8007e36 <_read_r+0x1e>
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	bd38      	pop	{r3, r4, r5, pc}
 8007e38:	20000a38 	.word	0x20000a38

08007e3c <_write_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	4604      	mov	r4, r0
 8007e40:	4608      	mov	r0, r1
 8007e42:	4611      	mov	r1, r2
 8007e44:	2200      	movs	r2, #0
 8007e46:	4d05      	ldr	r5, [pc, #20]	; (8007e5c <_write_r+0x20>)
 8007e48:	602a      	str	r2, [r5, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f7fa fe44 	bl	8002ad8 <_write>
 8007e50:	1c43      	adds	r3, r0, #1
 8007e52:	d102      	bne.n	8007e5a <_write_r+0x1e>
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	b103      	cbz	r3, 8007e5a <_write_r+0x1e>
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	bd38      	pop	{r3, r4, r5, pc}
 8007e5c:	20000a38 	.word	0x20000a38

08007e60 <__errno>:
 8007e60:	4b01      	ldr	r3, [pc, #4]	; (8007e68 <__errno+0x8>)
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	20000074 	.word	0x20000074

08007e6c <__libc_init_array>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	2600      	movs	r6, #0
 8007e70:	4d0c      	ldr	r5, [pc, #48]	; (8007ea4 <__libc_init_array+0x38>)
 8007e72:	4c0d      	ldr	r4, [pc, #52]	; (8007ea8 <__libc_init_array+0x3c>)
 8007e74:	1b64      	subs	r4, r4, r5
 8007e76:	10a4      	asrs	r4, r4, #2
 8007e78:	42a6      	cmp	r6, r4
 8007e7a:	d109      	bne.n	8007e90 <__libc_init_array+0x24>
 8007e7c:	f003 fbca 	bl	800b614 <_init>
 8007e80:	2600      	movs	r6, #0
 8007e82:	4d0a      	ldr	r5, [pc, #40]	; (8007eac <__libc_init_array+0x40>)
 8007e84:	4c0a      	ldr	r4, [pc, #40]	; (8007eb0 <__libc_init_array+0x44>)
 8007e86:	1b64      	subs	r4, r4, r5
 8007e88:	10a4      	asrs	r4, r4, #2
 8007e8a:	42a6      	cmp	r6, r4
 8007e8c:	d105      	bne.n	8007e9a <__libc_init_array+0x2e>
 8007e8e:	bd70      	pop	{r4, r5, r6, pc}
 8007e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e94:	4798      	blx	r3
 8007e96:	3601      	adds	r6, #1
 8007e98:	e7ee      	b.n	8007e78 <__libc_init_array+0xc>
 8007e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e9e:	4798      	blx	r3
 8007ea0:	3601      	adds	r6, #1
 8007ea2:	e7f2      	b.n	8007e8a <__libc_init_array+0x1e>
 8007ea4:	0800c290 	.word	0x0800c290
 8007ea8:	0800c290 	.word	0x0800c290
 8007eac:	0800c290 	.word	0x0800c290
 8007eb0:	0800c294 	.word	0x0800c294

08007eb4 <__retarget_lock_init_recursive>:
 8007eb4:	4770      	bx	lr

08007eb6 <__retarget_lock_acquire_recursive>:
 8007eb6:	4770      	bx	lr

08007eb8 <__retarget_lock_release_recursive>:
 8007eb8:	4770      	bx	lr

08007eba <strcpy>:
 8007eba:	4603      	mov	r3, r0
 8007ebc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ec0:	f803 2b01 	strb.w	r2, [r3], #1
 8007ec4:	2a00      	cmp	r2, #0
 8007ec6:	d1f9      	bne.n	8007ebc <strcpy+0x2>
 8007ec8:	4770      	bx	lr

08007eca <memchr>:
 8007eca:	4603      	mov	r3, r0
 8007ecc:	b510      	push	{r4, lr}
 8007ece:	b2c9      	uxtb	r1, r1
 8007ed0:	4402      	add	r2, r0
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	d101      	bne.n	8007edc <memchr+0x12>
 8007ed8:	2000      	movs	r0, #0
 8007eda:	e003      	b.n	8007ee4 <memchr+0x1a>
 8007edc:	7804      	ldrb	r4, [r0, #0]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	428c      	cmp	r4, r1
 8007ee2:	d1f6      	bne.n	8007ed2 <memchr+0x8>
 8007ee4:	bd10      	pop	{r4, pc}
	...

08007ee8 <nanf>:
 8007ee8:	4800      	ldr	r0, [pc, #0]	; (8007eec <nanf+0x4>)
 8007eea:	4770      	bx	lr
 8007eec:	7fc00000 	.word	0x7fc00000

08007ef0 <quorem>:
 8007ef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	6903      	ldr	r3, [r0, #16]
 8007ef6:	690c      	ldr	r4, [r1, #16]
 8007ef8:	4607      	mov	r7, r0
 8007efa:	42a3      	cmp	r3, r4
 8007efc:	db7f      	blt.n	8007ffe <quorem+0x10e>
 8007efe:	3c01      	subs	r4, #1
 8007f00:	f100 0514 	add.w	r5, r0, #20
 8007f04:	f101 0814 	add.w	r8, r1, #20
 8007f08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f0c:	9301      	str	r3, [sp, #4]
 8007f0e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f16:	3301      	adds	r3, #1
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f1e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f22:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f26:	d331      	bcc.n	8007f8c <quorem+0x9c>
 8007f28:	f04f 0e00 	mov.w	lr, #0
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	46ac      	mov	ip, r5
 8007f30:	46f2      	mov	sl, lr
 8007f32:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f36:	b293      	uxth	r3, r2
 8007f38:	fb06 e303 	mla	r3, r6, r3, lr
 8007f3c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f40:	0c1a      	lsrs	r2, r3, #16
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	fb06 220e 	mla	r2, r6, lr, r2
 8007f48:	ebaa 0303 	sub.w	r3, sl, r3
 8007f4c:	f8dc a000 	ldr.w	sl, [ip]
 8007f50:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f54:	fa1f fa8a 	uxth.w	sl, sl
 8007f58:	4453      	add	r3, sl
 8007f5a:	f8dc a000 	ldr.w	sl, [ip]
 8007f5e:	b292      	uxth	r2, r2
 8007f60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007f64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f6e:	4581      	cmp	r9, r0
 8007f70:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007f74:	f84c 3b04 	str.w	r3, [ip], #4
 8007f78:	d2db      	bcs.n	8007f32 <quorem+0x42>
 8007f7a:	f855 300b 	ldr.w	r3, [r5, fp]
 8007f7e:	b92b      	cbnz	r3, 8007f8c <quorem+0x9c>
 8007f80:	9b01      	ldr	r3, [sp, #4]
 8007f82:	3b04      	subs	r3, #4
 8007f84:	429d      	cmp	r5, r3
 8007f86:	461a      	mov	r2, r3
 8007f88:	d32d      	bcc.n	8007fe6 <quorem+0xf6>
 8007f8a:	613c      	str	r4, [r7, #16]
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	f001 f9df 	bl	8009350 <__mcmp>
 8007f92:	2800      	cmp	r0, #0
 8007f94:	db23      	blt.n	8007fde <quorem+0xee>
 8007f96:	4629      	mov	r1, r5
 8007f98:	2000      	movs	r0, #0
 8007f9a:	3601      	adds	r6, #1
 8007f9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007fa0:	f8d1 c000 	ldr.w	ip, [r1]
 8007fa4:	b293      	uxth	r3, r2
 8007fa6:	1ac3      	subs	r3, r0, r3
 8007fa8:	0c12      	lsrs	r2, r2, #16
 8007faa:	fa1f f08c 	uxth.w	r0, ip
 8007fae:	4403      	add	r3, r0
 8007fb0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007fb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fbe:	45c1      	cmp	r9, r8
 8007fc0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007fc4:	f841 3b04 	str.w	r3, [r1], #4
 8007fc8:	d2e8      	bcs.n	8007f9c <quorem+0xac>
 8007fca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fd2:	b922      	cbnz	r2, 8007fde <quorem+0xee>
 8007fd4:	3b04      	subs	r3, #4
 8007fd6:	429d      	cmp	r5, r3
 8007fd8:	461a      	mov	r2, r3
 8007fda:	d30a      	bcc.n	8007ff2 <quorem+0x102>
 8007fdc:	613c      	str	r4, [r7, #16]
 8007fde:	4630      	mov	r0, r6
 8007fe0:	b003      	add	sp, #12
 8007fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe6:	6812      	ldr	r2, [r2, #0]
 8007fe8:	3b04      	subs	r3, #4
 8007fea:	2a00      	cmp	r2, #0
 8007fec:	d1cd      	bne.n	8007f8a <quorem+0x9a>
 8007fee:	3c01      	subs	r4, #1
 8007ff0:	e7c8      	b.n	8007f84 <quorem+0x94>
 8007ff2:	6812      	ldr	r2, [r2, #0]
 8007ff4:	3b04      	subs	r3, #4
 8007ff6:	2a00      	cmp	r2, #0
 8007ff8:	d1f0      	bne.n	8007fdc <quorem+0xec>
 8007ffa:	3c01      	subs	r4, #1
 8007ffc:	e7eb      	b.n	8007fd6 <quorem+0xe6>
 8007ffe:	2000      	movs	r0, #0
 8008000:	e7ee      	b.n	8007fe0 <quorem+0xf0>
 8008002:	0000      	movs	r0, r0
 8008004:	0000      	movs	r0, r0
	...

08008008 <_dtoa_r>:
 8008008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800c:	4616      	mov	r6, r2
 800800e:	461f      	mov	r7, r3
 8008010:	69c4      	ldr	r4, [r0, #28]
 8008012:	b099      	sub	sp, #100	; 0x64
 8008014:	4605      	mov	r5, r0
 8008016:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800801a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800801e:	b974      	cbnz	r4, 800803e <_dtoa_r+0x36>
 8008020:	2010      	movs	r0, #16
 8008022:	f000 fe1d 	bl	8008c60 <malloc>
 8008026:	4602      	mov	r2, r0
 8008028:	61e8      	str	r0, [r5, #28]
 800802a:	b920      	cbnz	r0, 8008036 <_dtoa_r+0x2e>
 800802c:	21ef      	movs	r1, #239	; 0xef
 800802e:	4bac      	ldr	r3, [pc, #688]	; (80082e0 <_dtoa_r+0x2d8>)
 8008030:	48ac      	ldr	r0, [pc, #688]	; (80082e4 <_dtoa_r+0x2dc>)
 8008032:	f002 fc55 	bl	800a8e0 <__assert_func>
 8008036:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800803a:	6004      	str	r4, [r0, #0]
 800803c:	60c4      	str	r4, [r0, #12]
 800803e:	69eb      	ldr	r3, [r5, #28]
 8008040:	6819      	ldr	r1, [r3, #0]
 8008042:	b151      	cbz	r1, 800805a <_dtoa_r+0x52>
 8008044:	685a      	ldr	r2, [r3, #4]
 8008046:	2301      	movs	r3, #1
 8008048:	4093      	lsls	r3, r2
 800804a:	604a      	str	r2, [r1, #4]
 800804c:	608b      	str	r3, [r1, #8]
 800804e:	4628      	mov	r0, r5
 8008050:	f000 fefa 	bl	8008e48 <_Bfree>
 8008054:	2200      	movs	r2, #0
 8008056:	69eb      	ldr	r3, [r5, #28]
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	1e3b      	subs	r3, r7, #0
 800805c:	bfaf      	iteee	ge
 800805e:	2300      	movge	r3, #0
 8008060:	2201      	movlt	r2, #1
 8008062:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008066:	9305      	strlt	r3, [sp, #20]
 8008068:	bfa8      	it	ge
 800806a:	f8c8 3000 	strge.w	r3, [r8]
 800806e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008072:	4b9d      	ldr	r3, [pc, #628]	; (80082e8 <_dtoa_r+0x2e0>)
 8008074:	bfb8      	it	lt
 8008076:	f8c8 2000 	strlt.w	r2, [r8]
 800807a:	ea33 0309 	bics.w	r3, r3, r9
 800807e:	d119      	bne.n	80080b4 <_dtoa_r+0xac>
 8008080:	f242 730f 	movw	r3, #9999	; 0x270f
 8008084:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008086:	6013      	str	r3, [r2, #0]
 8008088:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800808c:	4333      	orrs	r3, r6
 800808e:	f000 8589 	beq.w	8008ba4 <_dtoa_r+0xb9c>
 8008092:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008094:	b953      	cbnz	r3, 80080ac <_dtoa_r+0xa4>
 8008096:	4b95      	ldr	r3, [pc, #596]	; (80082ec <_dtoa_r+0x2e4>)
 8008098:	e023      	b.n	80080e2 <_dtoa_r+0xda>
 800809a:	4b95      	ldr	r3, [pc, #596]	; (80082f0 <_dtoa_r+0x2e8>)
 800809c:	9303      	str	r3, [sp, #12]
 800809e:	3308      	adds	r3, #8
 80080a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	9803      	ldr	r0, [sp, #12]
 80080a6:	b019      	add	sp, #100	; 0x64
 80080a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ac:	4b8f      	ldr	r3, [pc, #572]	; (80082ec <_dtoa_r+0x2e4>)
 80080ae:	9303      	str	r3, [sp, #12]
 80080b0:	3303      	adds	r3, #3
 80080b2:	e7f5      	b.n	80080a0 <_dtoa_r+0x98>
 80080b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80080b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80080bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080c0:	2200      	movs	r2, #0
 80080c2:	2300      	movs	r3, #0
 80080c4:	f7f8 fc70 	bl	80009a8 <__aeabi_dcmpeq>
 80080c8:	4680      	mov	r8, r0
 80080ca:	b160      	cbz	r0, 80080e6 <_dtoa_r+0xde>
 80080cc:	2301      	movs	r3, #1
 80080ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80080d0:	6013      	str	r3, [r2, #0]
 80080d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f000 8562 	beq.w	8008b9e <_dtoa_r+0xb96>
 80080da:	4b86      	ldr	r3, [pc, #536]	; (80082f4 <_dtoa_r+0x2ec>)
 80080dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80080de:	6013      	str	r3, [r2, #0]
 80080e0:	3b01      	subs	r3, #1
 80080e2:	9303      	str	r3, [sp, #12]
 80080e4:	e7de      	b.n	80080a4 <_dtoa_r+0x9c>
 80080e6:	ab16      	add	r3, sp, #88	; 0x58
 80080e8:	9301      	str	r3, [sp, #4]
 80080ea:	ab17      	add	r3, sp, #92	; 0x5c
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	4628      	mov	r0, r5
 80080f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80080f4:	f001 fa3c 	bl	8009570 <__d2b>
 80080f8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80080fc:	4682      	mov	sl, r0
 80080fe:	2c00      	cmp	r4, #0
 8008100:	d07e      	beq.n	8008200 <_dtoa_r+0x1f8>
 8008102:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008108:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800810c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008110:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008114:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008118:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800811c:	4619      	mov	r1, r3
 800811e:	2200      	movs	r2, #0
 8008120:	4b75      	ldr	r3, [pc, #468]	; (80082f8 <_dtoa_r+0x2f0>)
 8008122:	f7f8 f821 	bl	8000168 <__aeabi_dsub>
 8008126:	a368      	add	r3, pc, #416	; (adr r3, 80082c8 <_dtoa_r+0x2c0>)
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	f7f8 f9d4 	bl	80004d8 <__aeabi_dmul>
 8008130:	a367      	add	r3, pc, #412	; (adr r3, 80082d0 <_dtoa_r+0x2c8>)
 8008132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008136:	f7f8 f819 	bl	800016c <__adddf3>
 800813a:	4606      	mov	r6, r0
 800813c:	4620      	mov	r0, r4
 800813e:	460f      	mov	r7, r1
 8008140:	f7f8 f960 	bl	8000404 <__aeabi_i2d>
 8008144:	a364      	add	r3, pc, #400	; (adr r3, 80082d8 <_dtoa_r+0x2d0>)
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	f7f8 f9c5 	bl	80004d8 <__aeabi_dmul>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	4630      	mov	r0, r6
 8008154:	4639      	mov	r1, r7
 8008156:	f7f8 f809 	bl	800016c <__adddf3>
 800815a:	4606      	mov	r6, r0
 800815c:	460f      	mov	r7, r1
 800815e:	f7f8 fc6b 	bl	8000a38 <__aeabi_d2iz>
 8008162:	2200      	movs	r2, #0
 8008164:	4683      	mov	fp, r0
 8008166:	2300      	movs	r3, #0
 8008168:	4630      	mov	r0, r6
 800816a:	4639      	mov	r1, r7
 800816c:	f7f8 fc26 	bl	80009bc <__aeabi_dcmplt>
 8008170:	b148      	cbz	r0, 8008186 <_dtoa_r+0x17e>
 8008172:	4658      	mov	r0, fp
 8008174:	f7f8 f946 	bl	8000404 <__aeabi_i2d>
 8008178:	4632      	mov	r2, r6
 800817a:	463b      	mov	r3, r7
 800817c:	f7f8 fc14 	bl	80009a8 <__aeabi_dcmpeq>
 8008180:	b908      	cbnz	r0, 8008186 <_dtoa_r+0x17e>
 8008182:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008186:	f1bb 0f16 	cmp.w	fp, #22
 800818a:	d857      	bhi.n	800823c <_dtoa_r+0x234>
 800818c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008190:	4b5a      	ldr	r3, [pc, #360]	; (80082fc <_dtoa_r+0x2f4>)
 8008192:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819a:	f7f8 fc0f 	bl	80009bc <__aeabi_dcmplt>
 800819e:	2800      	cmp	r0, #0
 80081a0:	d04e      	beq.n	8008240 <_dtoa_r+0x238>
 80081a2:	2300      	movs	r3, #0
 80081a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80081a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80081aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80081ac:	1b1b      	subs	r3, r3, r4
 80081ae:	1e5a      	subs	r2, r3, #1
 80081b0:	bf46      	itte	mi
 80081b2:	f1c3 0901 	rsbmi	r9, r3, #1
 80081b6:	2300      	movmi	r3, #0
 80081b8:	f04f 0900 	movpl.w	r9, #0
 80081bc:	9209      	str	r2, [sp, #36]	; 0x24
 80081be:	bf48      	it	mi
 80081c0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80081c2:	f1bb 0f00 	cmp.w	fp, #0
 80081c6:	db3d      	blt.n	8008244 <_dtoa_r+0x23c>
 80081c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ca:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80081ce:	445b      	add	r3, fp
 80081d0:	9309      	str	r3, [sp, #36]	; 0x24
 80081d2:	2300      	movs	r3, #0
 80081d4:	930a      	str	r3, [sp, #40]	; 0x28
 80081d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081d8:	2b09      	cmp	r3, #9
 80081da:	d867      	bhi.n	80082ac <_dtoa_r+0x2a4>
 80081dc:	2b05      	cmp	r3, #5
 80081de:	bfc4      	itt	gt
 80081e0:	3b04      	subgt	r3, #4
 80081e2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80081e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081e6:	bfc8      	it	gt
 80081e8:	2400      	movgt	r4, #0
 80081ea:	f1a3 0302 	sub.w	r3, r3, #2
 80081ee:	bfd8      	it	le
 80081f0:	2401      	movle	r4, #1
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	f200 8086 	bhi.w	8008304 <_dtoa_r+0x2fc>
 80081f8:	e8df f003 	tbb	[pc, r3]
 80081fc:	5637392c 	.word	0x5637392c
 8008200:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008204:	441c      	add	r4, r3
 8008206:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800820a:	2b20      	cmp	r3, #32
 800820c:	bfc1      	itttt	gt
 800820e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008212:	fa09 f903 	lslgt.w	r9, r9, r3
 8008216:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800821a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800821e:	bfd6      	itet	le
 8008220:	f1c3 0320 	rsble	r3, r3, #32
 8008224:	ea49 0003 	orrgt.w	r0, r9, r3
 8008228:	fa06 f003 	lslle.w	r0, r6, r3
 800822c:	f7f8 f8da 	bl	80003e4 <__aeabi_ui2d>
 8008230:	2201      	movs	r2, #1
 8008232:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008236:	3c01      	subs	r4, #1
 8008238:	9213      	str	r2, [sp, #76]	; 0x4c
 800823a:	e76f      	b.n	800811c <_dtoa_r+0x114>
 800823c:	2301      	movs	r3, #1
 800823e:	e7b3      	b.n	80081a8 <_dtoa_r+0x1a0>
 8008240:	900f      	str	r0, [sp, #60]	; 0x3c
 8008242:	e7b2      	b.n	80081aa <_dtoa_r+0x1a2>
 8008244:	f1cb 0300 	rsb	r3, fp, #0
 8008248:	930a      	str	r3, [sp, #40]	; 0x28
 800824a:	2300      	movs	r3, #0
 800824c:	eba9 090b 	sub.w	r9, r9, fp
 8008250:	930e      	str	r3, [sp, #56]	; 0x38
 8008252:	e7c0      	b.n	80081d6 <_dtoa_r+0x1ce>
 8008254:	2300      	movs	r3, #0
 8008256:	930b      	str	r3, [sp, #44]	; 0x2c
 8008258:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800825a:	2b00      	cmp	r3, #0
 800825c:	dc55      	bgt.n	800830a <_dtoa_r+0x302>
 800825e:	2301      	movs	r3, #1
 8008260:	461a      	mov	r2, r3
 8008262:	9306      	str	r3, [sp, #24]
 8008264:	9308      	str	r3, [sp, #32]
 8008266:	9223      	str	r2, [sp, #140]	; 0x8c
 8008268:	e00b      	b.n	8008282 <_dtoa_r+0x27a>
 800826a:	2301      	movs	r3, #1
 800826c:	e7f3      	b.n	8008256 <_dtoa_r+0x24e>
 800826e:	2300      	movs	r3, #0
 8008270:	930b      	str	r3, [sp, #44]	; 0x2c
 8008272:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008274:	445b      	add	r3, fp
 8008276:	9306      	str	r3, [sp, #24]
 8008278:	3301      	adds	r3, #1
 800827a:	2b01      	cmp	r3, #1
 800827c:	9308      	str	r3, [sp, #32]
 800827e:	bfb8      	it	lt
 8008280:	2301      	movlt	r3, #1
 8008282:	2100      	movs	r1, #0
 8008284:	2204      	movs	r2, #4
 8008286:	69e8      	ldr	r0, [r5, #28]
 8008288:	f102 0614 	add.w	r6, r2, #20
 800828c:	429e      	cmp	r6, r3
 800828e:	d940      	bls.n	8008312 <_dtoa_r+0x30a>
 8008290:	6041      	str	r1, [r0, #4]
 8008292:	4628      	mov	r0, r5
 8008294:	f000 fd98 	bl	8008dc8 <_Balloc>
 8008298:	9003      	str	r0, [sp, #12]
 800829a:	2800      	cmp	r0, #0
 800829c:	d13c      	bne.n	8008318 <_dtoa_r+0x310>
 800829e:	4602      	mov	r2, r0
 80082a0:	f240 11af 	movw	r1, #431	; 0x1af
 80082a4:	4b16      	ldr	r3, [pc, #88]	; (8008300 <_dtoa_r+0x2f8>)
 80082a6:	e6c3      	b.n	8008030 <_dtoa_r+0x28>
 80082a8:	2301      	movs	r3, #1
 80082aa:	e7e1      	b.n	8008270 <_dtoa_r+0x268>
 80082ac:	2401      	movs	r4, #1
 80082ae:	2300      	movs	r3, #0
 80082b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80082b2:	9322      	str	r3, [sp, #136]	; 0x88
 80082b4:	f04f 33ff 	mov.w	r3, #4294967295
 80082b8:	2200      	movs	r2, #0
 80082ba:	9306      	str	r3, [sp, #24]
 80082bc:	9308      	str	r3, [sp, #32]
 80082be:	2312      	movs	r3, #18
 80082c0:	e7d1      	b.n	8008266 <_dtoa_r+0x25e>
 80082c2:	bf00      	nop
 80082c4:	f3af 8000 	nop.w
 80082c8:	636f4361 	.word	0x636f4361
 80082cc:	3fd287a7 	.word	0x3fd287a7
 80082d0:	8b60c8b3 	.word	0x8b60c8b3
 80082d4:	3fc68a28 	.word	0x3fc68a28
 80082d8:	509f79fb 	.word	0x509f79fb
 80082dc:	3fd34413 	.word	0x3fd34413
 80082e0:	0800bea4 	.word	0x0800bea4
 80082e4:	0800bebb 	.word	0x0800bebb
 80082e8:	7ff00000 	.word	0x7ff00000
 80082ec:	0800bea0 	.word	0x0800bea0
 80082f0:	0800be97 	.word	0x0800be97
 80082f4:	0800be6f 	.word	0x0800be6f
 80082f8:	3ff80000 	.word	0x3ff80000
 80082fc:	0800bfa8 	.word	0x0800bfa8
 8008300:	0800bf13 	.word	0x0800bf13
 8008304:	2301      	movs	r3, #1
 8008306:	930b      	str	r3, [sp, #44]	; 0x2c
 8008308:	e7d4      	b.n	80082b4 <_dtoa_r+0x2ac>
 800830a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800830c:	9306      	str	r3, [sp, #24]
 800830e:	9308      	str	r3, [sp, #32]
 8008310:	e7b7      	b.n	8008282 <_dtoa_r+0x27a>
 8008312:	3101      	adds	r1, #1
 8008314:	0052      	lsls	r2, r2, #1
 8008316:	e7b7      	b.n	8008288 <_dtoa_r+0x280>
 8008318:	69eb      	ldr	r3, [r5, #28]
 800831a:	9a03      	ldr	r2, [sp, #12]
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	9b08      	ldr	r3, [sp, #32]
 8008320:	2b0e      	cmp	r3, #14
 8008322:	f200 80a8 	bhi.w	8008476 <_dtoa_r+0x46e>
 8008326:	2c00      	cmp	r4, #0
 8008328:	f000 80a5 	beq.w	8008476 <_dtoa_r+0x46e>
 800832c:	f1bb 0f00 	cmp.w	fp, #0
 8008330:	dd34      	ble.n	800839c <_dtoa_r+0x394>
 8008332:	4b9a      	ldr	r3, [pc, #616]	; (800859c <_dtoa_r+0x594>)
 8008334:	f00b 020f 	and.w	r2, fp, #15
 8008338:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800833c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008340:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008344:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008348:	ea4f 142b 	mov.w	r4, fp, asr #4
 800834c:	d016      	beq.n	800837c <_dtoa_r+0x374>
 800834e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008352:	4b93      	ldr	r3, [pc, #588]	; (80085a0 <_dtoa_r+0x598>)
 8008354:	2703      	movs	r7, #3
 8008356:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800835a:	f7f8 f9e7 	bl	800072c <__aeabi_ddiv>
 800835e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008362:	f004 040f 	and.w	r4, r4, #15
 8008366:	4e8e      	ldr	r6, [pc, #568]	; (80085a0 <_dtoa_r+0x598>)
 8008368:	b954      	cbnz	r4, 8008380 <_dtoa_r+0x378>
 800836a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800836e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008372:	f7f8 f9db 	bl	800072c <__aeabi_ddiv>
 8008376:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800837a:	e029      	b.n	80083d0 <_dtoa_r+0x3c8>
 800837c:	2702      	movs	r7, #2
 800837e:	e7f2      	b.n	8008366 <_dtoa_r+0x35e>
 8008380:	07e1      	lsls	r1, r4, #31
 8008382:	d508      	bpl.n	8008396 <_dtoa_r+0x38e>
 8008384:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008388:	e9d6 2300 	ldrd	r2, r3, [r6]
 800838c:	f7f8 f8a4 	bl	80004d8 <__aeabi_dmul>
 8008390:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008394:	3701      	adds	r7, #1
 8008396:	1064      	asrs	r4, r4, #1
 8008398:	3608      	adds	r6, #8
 800839a:	e7e5      	b.n	8008368 <_dtoa_r+0x360>
 800839c:	f000 80a5 	beq.w	80084ea <_dtoa_r+0x4e2>
 80083a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083a4:	f1cb 0400 	rsb	r4, fp, #0
 80083a8:	4b7c      	ldr	r3, [pc, #496]	; (800859c <_dtoa_r+0x594>)
 80083aa:	f004 020f 	and.w	r2, r4, #15
 80083ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	f7f8 f88f 	bl	80004d8 <__aeabi_dmul>
 80083ba:	2702      	movs	r7, #2
 80083bc:	2300      	movs	r3, #0
 80083be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083c2:	4e77      	ldr	r6, [pc, #476]	; (80085a0 <_dtoa_r+0x598>)
 80083c4:	1124      	asrs	r4, r4, #4
 80083c6:	2c00      	cmp	r4, #0
 80083c8:	f040 8084 	bne.w	80084d4 <_dtoa_r+0x4cc>
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1d2      	bne.n	8008376 <_dtoa_r+0x36e>
 80083d0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80083d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80083d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 8087 	beq.w	80084ee <_dtoa_r+0x4e6>
 80083e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083e4:	2200      	movs	r2, #0
 80083e6:	4b6f      	ldr	r3, [pc, #444]	; (80085a4 <_dtoa_r+0x59c>)
 80083e8:	f7f8 fae8 	bl	80009bc <__aeabi_dcmplt>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	d07e      	beq.n	80084ee <_dtoa_r+0x4e6>
 80083f0:	9b08      	ldr	r3, [sp, #32]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d07b      	beq.n	80084ee <_dtoa_r+0x4e6>
 80083f6:	9b06      	ldr	r3, [sp, #24]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	dd38      	ble.n	800846e <_dtoa_r+0x466>
 80083fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008400:	2200      	movs	r2, #0
 8008402:	4b69      	ldr	r3, [pc, #420]	; (80085a8 <_dtoa_r+0x5a0>)
 8008404:	f7f8 f868 	bl	80004d8 <__aeabi_dmul>
 8008408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800840c:	9c06      	ldr	r4, [sp, #24]
 800840e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8008412:	3701      	adds	r7, #1
 8008414:	4638      	mov	r0, r7
 8008416:	f7f7 fff5 	bl	8000404 <__aeabi_i2d>
 800841a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800841e:	f7f8 f85b 	bl	80004d8 <__aeabi_dmul>
 8008422:	2200      	movs	r2, #0
 8008424:	4b61      	ldr	r3, [pc, #388]	; (80085ac <_dtoa_r+0x5a4>)
 8008426:	f7f7 fea1 	bl	800016c <__adddf3>
 800842a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800842e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008432:	9611      	str	r6, [sp, #68]	; 0x44
 8008434:	2c00      	cmp	r4, #0
 8008436:	d15d      	bne.n	80084f4 <_dtoa_r+0x4ec>
 8008438:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800843c:	2200      	movs	r2, #0
 800843e:	4b5c      	ldr	r3, [pc, #368]	; (80085b0 <_dtoa_r+0x5a8>)
 8008440:	f7f7 fe92 	bl	8000168 <__aeabi_dsub>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800844c:	4633      	mov	r3, r6
 800844e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008450:	f7f8 fad2 	bl	80009f8 <__aeabi_dcmpgt>
 8008454:	2800      	cmp	r0, #0
 8008456:	f040 8295 	bne.w	8008984 <_dtoa_r+0x97c>
 800845a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800845e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008460:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008464:	f7f8 faaa 	bl	80009bc <__aeabi_dcmplt>
 8008468:	2800      	cmp	r0, #0
 800846a:	f040 8289 	bne.w	8008980 <_dtoa_r+0x978>
 800846e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008472:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008476:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008478:	2b00      	cmp	r3, #0
 800847a:	f2c0 8151 	blt.w	8008720 <_dtoa_r+0x718>
 800847e:	f1bb 0f0e 	cmp.w	fp, #14
 8008482:	f300 814d 	bgt.w	8008720 <_dtoa_r+0x718>
 8008486:	4b45      	ldr	r3, [pc, #276]	; (800859c <_dtoa_r+0x594>)
 8008488:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800848c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008490:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008494:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008496:	2b00      	cmp	r3, #0
 8008498:	f280 80da 	bge.w	8008650 <_dtoa_r+0x648>
 800849c:	9b08      	ldr	r3, [sp, #32]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f300 80d6 	bgt.w	8008650 <_dtoa_r+0x648>
 80084a4:	f040 826b 	bne.w	800897e <_dtoa_r+0x976>
 80084a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084ac:	2200      	movs	r2, #0
 80084ae:	4b40      	ldr	r3, [pc, #256]	; (80085b0 <_dtoa_r+0x5a8>)
 80084b0:	f7f8 f812 	bl	80004d8 <__aeabi_dmul>
 80084b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084b8:	f7f8 fa94 	bl	80009e4 <__aeabi_dcmpge>
 80084bc:	9c08      	ldr	r4, [sp, #32]
 80084be:	4626      	mov	r6, r4
 80084c0:	2800      	cmp	r0, #0
 80084c2:	f040 8241 	bne.w	8008948 <_dtoa_r+0x940>
 80084c6:	2331      	movs	r3, #49	; 0x31
 80084c8:	9f03      	ldr	r7, [sp, #12]
 80084ca:	f10b 0b01 	add.w	fp, fp, #1
 80084ce:	f807 3b01 	strb.w	r3, [r7], #1
 80084d2:	e23d      	b.n	8008950 <_dtoa_r+0x948>
 80084d4:	07e2      	lsls	r2, r4, #31
 80084d6:	d505      	bpl.n	80084e4 <_dtoa_r+0x4dc>
 80084d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084dc:	f7f7 fffc 	bl	80004d8 <__aeabi_dmul>
 80084e0:	2301      	movs	r3, #1
 80084e2:	3701      	adds	r7, #1
 80084e4:	1064      	asrs	r4, r4, #1
 80084e6:	3608      	adds	r6, #8
 80084e8:	e76d      	b.n	80083c6 <_dtoa_r+0x3be>
 80084ea:	2702      	movs	r7, #2
 80084ec:	e770      	b.n	80083d0 <_dtoa_r+0x3c8>
 80084ee:	46d8      	mov	r8, fp
 80084f0:	9c08      	ldr	r4, [sp, #32]
 80084f2:	e78f      	b.n	8008414 <_dtoa_r+0x40c>
 80084f4:	9903      	ldr	r1, [sp, #12]
 80084f6:	4b29      	ldr	r3, [pc, #164]	; (800859c <_dtoa_r+0x594>)
 80084f8:	4421      	add	r1, r4
 80084fa:	9112      	str	r1, [sp, #72]	; 0x48
 80084fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008502:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008506:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800850a:	2900      	cmp	r1, #0
 800850c:	d054      	beq.n	80085b8 <_dtoa_r+0x5b0>
 800850e:	2000      	movs	r0, #0
 8008510:	4928      	ldr	r1, [pc, #160]	; (80085b4 <_dtoa_r+0x5ac>)
 8008512:	f7f8 f90b 	bl	800072c <__aeabi_ddiv>
 8008516:	463b      	mov	r3, r7
 8008518:	4632      	mov	r2, r6
 800851a:	f7f7 fe25 	bl	8000168 <__aeabi_dsub>
 800851e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008522:	9f03      	ldr	r7, [sp, #12]
 8008524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008528:	f7f8 fa86 	bl	8000a38 <__aeabi_d2iz>
 800852c:	4604      	mov	r4, r0
 800852e:	f7f7 ff69 	bl	8000404 <__aeabi_i2d>
 8008532:	4602      	mov	r2, r0
 8008534:	460b      	mov	r3, r1
 8008536:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800853a:	f7f7 fe15 	bl	8000168 <__aeabi_dsub>
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	3430      	adds	r4, #48	; 0x30
 8008544:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008548:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800854c:	f807 4b01 	strb.w	r4, [r7], #1
 8008550:	f7f8 fa34 	bl	80009bc <__aeabi_dcmplt>
 8008554:	2800      	cmp	r0, #0
 8008556:	d173      	bne.n	8008640 <_dtoa_r+0x638>
 8008558:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800855c:	2000      	movs	r0, #0
 800855e:	4911      	ldr	r1, [pc, #68]	; (80085a4 <_dtoa_r+0x59c>)
 8008560:	f7f7 fe02 	bl	8000168 <__aeabi_dsub>
 8008564:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008568:	f7f8 fa28 	bl	80009bc <__aeabi_dcmplt>
 800856c:	2800      	cmp	r0, #0
 800856e:	f040 80b6 	bne.w	80086de <_dtoa_r+0x6d6>
 8008572:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008574:	429f      	cmp	r7, r3
 8008576:	f43f af7a 	beq.w	800846e <_dtoa_r+0x466>
 800857a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800857e:	2200      	movs	r2, #0
 8008580:	4b09      	ldr	r3, [pc, #36]	; (80085a8 <_dtoa_r+0x5a0>)
 8008582:	f7f7 ffa9 	bl	80004d8 <__aeabi_dmul>
 8008586:	2200      	movs	r2, #0
 8008588:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800858c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008590:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <_dtoa_r+0x5a0>)
 8008592:	f7f7 ffa1 	bl	80004d8 <__aeabi_dmul>
 8008596:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800859a:	e7c3      	b.n	8008524 <_dtoa_r+0x51c>
 800859c:	0800bfa8 	.word	0x0800bfa8
 80085a0:	0800bf80 	.word	0x0800bf80
 80085a4:	3ff00000 	.word	0x3ff00000
 80085a8:	40240000 	.word	0x40240000
 80085ac:	401c0000 	.word	0x401c0000
 80085b0:	40140000 	.word	0x40140000
 80085b4:	3fe00000 	.word	0x3fe00000
 80085b8:	4630      	mov	r0, r6
 80085ba:	4639      	mov	r1, r7
 80085bc:	f7f7 ff8c 	bl	80004d8 <__aeabi_dmul>
 80085c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80085c6:	9c03      	ldr	r4, [sp, #12]
 80085c8:	9314      	str	r3, [sp, #80]	; 0x50
 80085ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085ce:	f7f8 fa33 	bl	8000a38 <__aeabi_d2iz>
 80085d2:	9015      	str	r0, [sp, #84]	; 0x54
 80085d4:	f7f7 ff16 	bl	8000404 <__aeabi_i2d>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085e0:	f7f7 fdc2 	bl	8000168 <__aeabi_dsub>
 80085e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085e6:	4606      	mov	r6, r0
 80085e8:	3330      	adds	r3, #48	; 0x30
 80085ea:	f804 3b01 	strb.w	r3, [r4], #1
 80085ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085f0:	460f      	mov	r7, r1
 80085f2:	429c      	cmp	r4, r3
 80085f4:	f04f 0200 	mov.w	r2, #0
 80085f8:	d124      	bne.n	8008644 <_dtoa_r+0x63c>
 80085fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085fe:	4baf      	ldr	r3, [pc, #700]	; (80088bc <_dtoa_r+0x8b4>)
 8008600:	f7f7 fdb4 	bl	800016c <__adddf3>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4630      	mov	r0, r6
 800860a:	4639      	mov	r1, r7
 800860c:	f7f8 f9f4 	bl	80009f8 <__aeabi_dcmpgt>
 8008610:	2800      	cmp	r0, #0
 8008612:	d163      	bne.n	80086dc <_dtoa_r+0x6d4>
 8008614:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008618:	2000      	movs	r0, #0
 800861a:	49a8      	ldr	r1, [pc, #672]	; (80088bc <_dtoa_r+0x8b4>)
 800861c:	f7f7 fda4 	bl	8000168 <__aeabi_dsub>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	4630      	mov	r0, r6
 8008626:	4639      	mov	r1, r7
 8008628:	f7f8 f9c8 	bl	80009bc <__aeabi_dcmplt>
 800862c:	2800      	cmp	r0, #0
 800862e:	f43f af1e 	beq.w	800846e <_dtoa_r+0x466>
 8008632:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008634:	1e7b      	subs	r3, r7, #1
 8008636:	9314      	str	r3, [sp, #80]	; 0x50
 8008638:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800863c:	2b30      	cmp	r3, #48	; 0x30
 800863e:	d0f8      	beq.n	8008632 <_dtoa_r+0x62a>
 8008640:	46c3      	mov	fp, r8
 8008642:	e03b      	b.n	80086bc <_dtoa_r+0x6b4>
 8008644:	4b9e      	ldr	r3, [pc, #632]	; (80088c0 <_dtoa_r+0x8b8>)
 8008646:	f7f7 ff47 	bl	80004d8 <__aeabi_dmul>
 800864a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800864e:	e7bc      	b.n	80085ca <_dtoa_r+0x5c2>
 8008650:	9f03      	ldr	r7, [sp, #12]
 8008652:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008656:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800865a:	4640      	mov	r0, r8
 800865c:	4649      	mov	r1, r9
 800865e:	f7f8 f865 	bl	800072c <__aeabi_ddiv>
 8008662:	f7f8 f9e9 	bl	8000a38 <__aeabi_d2iz>
 8008666:	4604      	mov	r4, r0
 8008668:	f7f7 fecc 	bl	8000404 <__aeabi_i2d>
 800866c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008670:	f7f7 ff32 	bl	80004d8 <__aeabi_dmul>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	4640      	mov	r0, r8
 800867a:	4649      	mov	r1, r9
 800867c:	f7f7 fd74 	bl	8000168 <__aeabi_dsub>
 8008680:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008684:	f807 6b01 	strb.w	r6, [r7], #1
 8008688:	9e03      	ldr	r6, [sp, #12]
 800868a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800868e:	1bbe      	subs	r6, r7, r6
 8008690:	45b4      	cmp	ip, r6
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	d136      	bne.n	8008706 <_dtoa_r+0x6fe>
 8008698:	f7f7 fd68 	bl	800016c <__adddf3>
 800869c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086a0:	4680      	mov	r8, r0
 80086a2:	4689      	mov	r9, r1
 80086a4:	f7f8 f9a8 	bl	80009f8 <__aeabi_dcmpgt>
 80086a8:	bb58      	cbnz	r0, 8008702 <_dtoa_r+0x6fa>
 80086aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086ae:	4640      	mov	r0, r8
 80086b0:	4649      	mov	r1, r9
 80086b2:	f7f8 f979 	bl	80009a8 <__aeabi_dcmpeq>
 80086b6:	b108      	cbz	r0, 80086bc <_dtoa_r+0x6b4>
 80086b8:	07e3      	lsls	r3, r4, #31
 80086ba:	d422      	bmi.n	8008702 <_dtoa_r+0x6fa>
 80086bc:	4651      	mov	r1, sl
 80086be:	4628      	mov	r0, r5
 80086c0:	f000 fbc2 	bl	8008e48 <_Bfree>
 80086c4:	2300      	movs	r3, #0
 80086c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80086c8:	703b      	strb	r3, [r7, #0]
 80086ca:	f10b 0301 	add.w	r3, fp, #1
 80086ce:	6013      	str	r3, [r2, #0]
 80086d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f43f ace6 	beq.w	80080a4 <_dtoa_r+0x9c>
 80086d8:	601f      	str	r7, [r3, #0]
 80086da:	e4e3      	b.n	80080a4 <_dtoa_r+0x9c>
 80086dc:	4627      	mov	r7, r4
 80086de:	463b      	mov	r3, r7
 80086e0:	461f      	mov	r7, r3
 80086e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086e6:	2a39      	cmp	r2, #57	; 0x39
 80086e8:	d107      	bne.n	80086fa <_dtoa_r+0x6f2>
 80086ea:	9a03      	ldr	r2, [sp, #12]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d1f7      	bne.n	80086e0 <_dtoa_r+0x6d8>
 80086f0:	2230      	movs	r2, #48	; 0x30
 80086f2:	9903      	ldr	r1, [sp, #12]
 80086f4:	f108 0801 	add.w	r8, r8, #1
 80086f8:	700a      	strb	r2, [r1, #0]
 80086fa:	781a      	ldrb	r2, [r3, #0]
 80086fc:	3201      	adds	r2, #1
 80086fe:	701a      	strb	r2, [r3, #0]
 8008700:	e79e      	b.n	8008640 <_dtoa_r+0x638>
 8008702:	46d8      	mov	r8, fp
 8008704:	e7eb      	b.n	80086de <_dtoa_r+0x6d6>
 8008706:	2200      	movs	r2, #0
 8008708:	4b6d      	ldr	r3, [pc, #436]	; (80088c0 <_dtoa_r+0x8b8>)
 800870a:	f7f7 fee5 	bl	80004d8 <__aeabi_dmul>
 800870e:	2200      	movs	r2, #0
 8008710:	2300      	movs	r3, #0
 8008712:	4680      	mov	r8, r0
 8008714:	4689      	mov	r9, r1
 8008716:	f7f8 f947 	bl	80009a8 <__aeabi_dcmpeq>
 800871a:	2800      	cmp	r0, #0
 800871c:	d09b      	beq.n	8008656 <_dtoa_r+0x64e>
 800871e:	e7cd      	b.n	80086bc <_dtoa_r+0x6b4>
 8008720:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008722:	2a00      	cmp	r2, #0
 8008724:	f000 80c4 	beq.w	80088b0 <_dtoa_r+0x8a8>
 8008728:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800872a:	2a01      	cmp	r2, #1
 800872c:	f300 80a8 	bgt.w	8008880 <_dtoa_r+0x878>
 8008730:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008732:	2a00      	cmp	r2, #0
 8008734:	f000 80a0 	beq.w	8008878 <_dtoa_r+0x870>
 8008738:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800873c:	464f      	mov	r7, r9
 800873e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008742:	2101      	movs	r1, #1
 8008744:	441a      	add	r2, r3
 8008746:	4628      	mov	r0, r5
 8008748:	4499      	add	r9, r3
 800874a:	9209      	str	r2, [sp, #36]	; 0x24
 800874c:	f000 fc7c 	bl	8009048 <__i2b>
 8008750:	4606      	mov	r6, r0
 8008752:	b15f      	cbz	r7, 800876c <_dtoa_r+0x764>
 8008754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008756:	2b00      	cmp	r3, #0
 8008758:	dd08      	ble.n	800876c <_dtoa_r+0x764>
 800875a:	42bb      	cmp	r3, r7
 800875c:	bfa8      	it	ge
 800875e:	463b      	movge	r3, r7
 8008760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008762:	eba9 0903 	sub.w	r9, r9, r3
 8008766:	1aff      	subs	r7, r7, r3
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	9309      	str	r3, [sp, #36]	; 0x24
 800876c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800876e:	b1f3      	cbz	r3, 80087ae <_dtoa_r+0x7a6>
 8008770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008772:	2b00      	cmp	r3, #0
 8008774:	f000 80a0 	beq.w	80088b8 <_dtoa_r+0x8b0>
 8008778:	2c00      	cmp	r4, #0
 800877a:	dd10      	ble.n	800879e <_dtoa_r+0x796>
 800877c:	4631      	mov	r1, r6
 800877e:	4622      	mov	r2, r4
 8008780:	4628      	mov	r0, r5
 8008782:	f000 fd1f 	bl	80091c4 <__pow5mult>
 8008786:	4652      	mov	r2, sl
 8008788:	4601      	mov	r1, r0
 800878a:	4606      	mov	r6, r0
 800878c:	4628      	mov	r0, r5
 800878e:	f000 fc71 	bl	8009074 <__multiply>
 8008792:	4680      	mov	r8, r0
 8008794:	4651      	mov	r1, sl
 8008796:	4628      	mov	r0, r5
 8008798:	f000 fb56 	bl	8008e48 <_Bfree>
 800879c:	46c2      	mov	sl, r8
 800879e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a0:	1b1a      	subs	r2, r3, r4
 80087a2:	d004      	beq.n	80087ae <_dtoa_r+0x7a6>
 80087a4:	4651      	mov	r1, sl
 80087a6:	4628      	mov	r0, r5
 80087a8:	f000 fd0c 	bl	80091c4 <__pow5mult>
 80087ac:	4682      	mov	sl, r0
 80087ae:	2101      	movs	r1, #1
 80087b0:	4628      	mov	r0, r5
 80087b2:	f000 fc49 	bl	8009048 <__i2b>
 80087b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087b8:	4604      	mov	r4, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f340 8082 	ble.w	80088c4 <_dtoa_r+0x8bc>
 80087c0:	461a      	mov	r2, r3
 80087c2:	4601      	mov	r1, r0
 80087c4:	4628      	mov	r0, r5
 80087c6:	f000 fcfd 	bl	80091c4 <__pow5mult>
 80087ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087cc:	4604      	mov	r4, r0
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	dd7b      	ble.n	80088ca <_dtoa_r+0x8c2>
 80087d2:	f04f 0800 	mov.w	r8, #0
 80087d6:	6923      	ldr	r3, [r4, #16]
 80087d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80087dc:	6918      	ldr	r0, [r3, #16]
 80087de:	f000 fbe5 	bl	8008fac <__hi0bits>
 80087e2:	f1c0 0020 	rsb	r0, r0, #32
 80087e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e8:	4418      	add	r0, r3
 80087ea:	f010 001f 	ands.w	r0, r0, #31
 80087ee:	f000 8092 	beq.w	8008916 <_dtoa_r+0x90e>
 80087f2:	f1c0 0320 	rsb	r3, r0, #32
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	f340 8085 	ble.w	8008906 <_dtoa_r+0x8fe>
 80087fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087fe:	f1c0 001c 	rsb	r0, r0, #28
 8008802:	4403      	add	r3, r0
 8008804:	4481      	add	r9, r0
 8008806:	4407      	add	r7, r0
 8008808:	9309      	str	r3, [sp, #36]	; 0x24
 800880a:	f1b9 0f00 	cmp.w	r9, #0
 800880e:	dd05      	ble.n	800881c <_dtoa_r+0x814>
 8008810:	4651      	mov	r1, sl
 8008812:	464a      	mov	r2, r9
 8008814:	4628      	mov	r0, r5
 8008816:	f000 fd2f 	bl	8009278 <__lshift>
 800881a:	4682      	mov	sl, r0
 800881c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800881e:	2b00      	cmp	r3, #0
 8008820:	dd05      	ble.n	800882e <_dtoa_r+0x826>
 8008822:	4621      	mov	r1, r4
 8008824:	461a      	mov	r2, r3
 8008826:	4628      	mov	r0, r5
 8008828:	f000 fd26 	bl	8009278 <__lshift>
 800882c:	4604      	mov	r4, r0
 800882e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008830:	2b00      	cmp	r3, #0
 8008832:	d072      	beq.n	800891a <_dtoa_r+0x912>
 8008834:	4621      	mov	r1, r4
 8008836:	4650      	mov	r0, sl
 8008838:	f000 fd8a 	bl	8009350 <__mcmp>
 800883c:	2800      	cmp	r0, #0
 800883e:	da6c      	bge.n	800891a <_dtoa_r+0x912>
 8008840:	2300      	movs	r3, #0
 8008842:	4651      	mov	r1, sl
 8008844:	220a      	movs	r2, #10
 8008846:	4628      	mov	r0, r5
 8008848:	f000 fb20 	bl	8008e8c <__multadd>
 800884c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800884e:	4682      	mov	sl, r0
 8008850:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008854:	2b00      	cmp	r3, #0
 8008856:	f000 81ac 	beq.w	8008bb2 <_dtoa_r+0xbaa>
 800885a:	2300      	movs	r3, #0
 800885c:	4631      	mov	r1, r6
 800885e:	220a      	movs	r2, #10
 8008860:	4628      	mov	r0, r5
 8008862:	f000 fb13 	bl	8008e8c <__multadd>
 8008866:	9b06      	ldr	r3, [sp, #24]
 8008868:	4606      	mov	r6, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	f300 8093 	bgt.w	8008996 <_dtoa_r+0x98e>
 8008870:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008872:	2b02      	cmp	r3, #2
 8008874:	dc59      	bgt.n	800892a <_dtoa_r+0x922>
 8008876:	e08e      	b.n	8008996 <_dtoa_r+0x98e>
 8008878:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800887a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800887e:	e75d      	b.n	800873c <_dtoa_r+0x734>
 8008880:	9b08      	ldr	r3, [sp, #32]
 8008882:	1e5c      	subs	r4, r3, #1
 8008884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008886:	42a3      	cmp	r3, r4
 8008888:	bfbf      	itttt	lt
 800888a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800888c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800888e:	1ae3      	sublt	r3, r4, r3
 8008890:	18d2      	addlt	r2, r2, r3
 8008892:	bfa8      	it	ge
 8008894:	1b1c      	subge	r4, r3, r4
 8008896:	9b08      	ldr	r3, [sp, #32]
 8008898:	bfbe      	ittt	lt
 800889a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800889c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800889e:	2400      	movlt	r4, #0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bfb5      	itete	lt
 80088a4:	eba9 0703 	sublt.w	r7, r9, r3
 80088a8:	464f      	movge	r7, r9
 80088aa:	2300      	movlt	r3, #0
 80088ac:	9b08      	ldrge	r3, [sp, #32]
 80088ae:	e747      	b.n	8008740 <_dtoa_r+0x738>
 80088b0:	464f      	mov	r7, r9
 80088b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80088b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80088b6:	e74c      	b.n	8008752 <_dtoa_r+0x74a>
 80088b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ba:	e773      	b.n	80087a4 <_dtoa_r+0x79c>
 80088bc:	3fe00000 	.word	0x3fe00000
 80088c0:	40240000 	.word	0x40240000
 80088c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	dc18      	bgt.n	80088fc <_dtoa_r+0x8f4>
 80088ca:	9b04      	ldr	r3, [sp, #16]
 80088cc:	b9b3      	cbnz	r3, 80088fc <_dtoa_r+0x8f4>
 80088ce:	9b05      	ldr	r3, [sp, #20]
 80088d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088d4:	b993      	cbnz	r3, 80088fc <_dtoa_r+0x8f4>
 80088d6:	9b05      	ldr	r3, [sp, #20]
 80088d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088dc:	0d1b      	lsrs	r3, r3, #20
 80088de:	051b      	lsls	r3, r3, #20
 80088e0:	b17b      	cbz	r3, 8008902 <_dtoa_r+0x8fa>
 80088e2:	f04f 0801 	mov.w	r8, #1
 80088e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e8:	f109 0901 	add.w	r9, r9, #1
 80088ec:	3301      	adds	r3, #1
 80088ee:	9309      	str	r3, [sp, #36]	; 0x24
 80088f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	f47f af6f 	bne.w	80087d6 <_dtoa_r+0x7ce>
 80088f8:	2001      	movs	r0, #1
 80088fa:	e774      	b.n	80087e6 <_dtoa_r+0x7de>
 80088fc:	f04f 0800 	mov.w	r8, #0
 8008900:	e7f6      	b.n	80088f0 <_dtoa_r+0x8e8>
 8008902:	4698      	mov	r8, r3
 8008904:	e7f4      	b.n	80088f0 <_dtoa_r+0x8e8>
 8008906:	d080      	beq.n	800880a <_dtoa_r+0x802>
 8008908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800890a:	331c      	adds	r3, #28
 800890c:	441a      	add	r2, r3
 800890e:	4499      	add	r9, r3
 8008910:	441f      	add	r7, r3
 8008912:	9209      	str	r2, [sp, #36]	; 0x24
 8008914:	e779      	b.n	800880a <_dtoa_r+0x802>
 8008916:	4603      	mov	r3, r0
 8008918:	e7f6      	b.n	8008908 <_dtoa_r+0x900>
 800891a:	9b08      	ldr	r3, [sp, #32]
 800891c:	2b00      	cmp	r3, #0
 800891e:	dc34      	bgt.n	800898a <_dtoa_r+0x982>
 8008920:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008922:	2b02      	cmp	r3, #2
 8008924:	dd31      	ble.n	800898a <_dtoa_r+0x982>
 8008926:	9b08      	ldr	r3, [sp, #32]
 8008928:	9306      	str	r3, [sp, #24]
 800892a:	9b06      	ldr	r3, [sp, #24]
 800892c:	b963      	cbnz	r3, 8008948 <_dtoa_r+0x940>
 800892e:	4621      	mov	r1, r4
 8008930:	2205      	movs	r2, #5
 8008932:	4628      	mov	r0, r5
 8008934:	f000 faaa 	bl	8008e8c <__multadd>
 8008938:	4601      	mov	r1, r0
 800893a:	4604      	mov	r4, r0
 800893c:	4650      	mov	r0, sl
 800893e:	f000 fd07 	bl	8009350 <__mcmp>
 8008942:	2800      	cmp	r0, #0
 8008944:	f73f adbf 	bgt.w	80084c6 <_dtoa_r+0x4be>
 8008948:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800894a:	9f03      	ldr	r7, [sp, #12]
 800894c:	ea6f 0b03 	mvn.w	fp, r3
 8008950:	f04f 0800 	mov.w	r8, #0
 8008954:	4621      	mov	r1, r4
 8008956:	4628      	mov	r0, r5
 8008958:	f000 fa76 	bl	8008e48 <_Bfree>
 800895c:	2e00      	cmp	r6, #0
 800895e:	f43f aead 	beq.w	80086bc <_dtoa_r+0x6b4>
 8008962:	f1b8 0f00 	cmp.w	r8, #0
 8008966:	d005      	beq.n	8008974 <_dtoa_r+0x96c>
 8008968:	45b0      	cmp	r8, r6
 800896a:	d003      	beq.n	8008974 <_dtoa_r+0x96c>
 800896c:	4641      	mov	r1, r8
 800896e:	4628      	mov	r0, r5
 8008970:	f000 fa6a 	bl	8008e48 <_Bfree>
 8008974:	4631      	mov	r1, r6
 8008976:	4628      	mov	r0, r5
 8008978:	f000 fa66 	bl	8008e48 <_Bfree>
 800897c:	e69e      	b.n	80086bc <_dtoa_r+0x6b4>
 800897e:	2400      	movs	r4, #0
 8008980:	4626      	mov	r6, r4
 8008982:	e7e1      	b.n	8008948 <_dtoa_r+0x940>
 8008984:	46c3      	mov	fp, r8
 8008986:	4626      	mov	r6, r4
 8008988:	e59d      	b.n	80084c6 <_dtoa_r+0x4be>
 800898a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 80c8 	beq.w	8008b22 <_dtoa_r+0xb1a>
 8008992:	9b08      	ldr	r3, [sp, #32]
 8008994:	9306      	str	r3, [sp, #24]
 8008996:	2f00      	cmp	r7, #0
 8008998:	dd05      	ble.n	80089a6 <_dtoa_r+0x99e>
 800899a:	4631      	mov	r1, r6
 800899c:	463a      	mov	r2, r7
 800899e:	4628      	mov	r0, r5
 80089a0:	f000 fc6a 	bl	8009278 <__lshift>
 80089a4:	4606      	mov	r6, r0
 80089a6:	f1b8 0f00 	cmp.w	r8, #0
 80089aa:	d05b      	beq.n	8008a64 <_dtoa_r+0xa5c>
 80089ac:	4628      	mov	r0, r5
 80089ae:	6871      	ldr	r1, [r6, #4]
 80089b0:	f000 fa0a 	bl	8008dc8 <_Balloc>
 80089b4:	4607      	mov	r7, r0
 80089b6:	b928      	cbnz	r0, 80089c4 <_dtoa_r+0x9bc>
 80089b8:	4602      	mov	r2, r0
 80089ba:	f240 21ef 	movw	r1, #751	; 0x2ef
 80089be:	4b81      	ldr	r3, [pc, #516]	; (8008bc4 <_dtoa_r+0xbbc>)
 80089c0:	f7ff bb36 	b.w	8008030 <_dtoa_r+0x28>
 80089c4:	6932      	ldr	r2, [r6, #16]
 80089c6:	f106 010c 	add.w	r1, r6, #12
 80089ca:	3202      	adds	r2, #2
 80089cc:	0092      	lsls	r2, r2, #2
 80089ce:	300c      	adds	r0, #12
 80089d0:	f001 ff72 	bl	800a8b8 <memcpy>
 80089d4:	2201      	movs	r2, #1
 80089d6:	4639      	mov	r1, r7
 80089d8:	4628      	mov	r0, r5
 80089da:	f000 fc4d 	bl	8009278 <__lshift>
 80089de:	46b0      	mov	r8, r6
 80089e0:	4606      	mov	r6, r0
 80089e2:	9b03      	ldr	r3, [sp, #12]
 80089e4:	9a03      	ldr	r2, [sp, #12]
 80089e6:	3301      	adds	r3, #1
 80089e8:	9308      	str	r3, [sp, #32]
 80089ea:	9b06      	ldr	r3, [sp, #24]
 80089ec:	4413      	add	r3, r2
 80089ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80089f0:	9b04      	ldr	r3, [sp, #16]
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	930a      	str	r3, [sp, #40]	; 0x28
 80089f8:	9b08      	ldr	r3, [sp, #32]
 80089fa:	4621      	mov	r1, r4
 80089fc:	3b01      	subs	r3, #1
 80089fe:	4650      	mov	r0, sl
 8008a00:	9304      	str	r3, [sp, #16]
 8008a02:	f7ff fa75 	bl	8007ef0 <quorem>
 8008a06:	4641      	mov	r1, r8
 8008a08:	9006      	str	r0, [sp, #24]
 8008a0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008a0e:	4650      	mov	r0, sl
 8008a10:	f000 fc9e 	bl	8009350 <__mcmp>
 8008a14:	4632      	mov	r2, r6
 8008a16:	9009      	str	r0, [sp, #36]	; 0x24
 8008a18:	4621      	mov	r1, r4
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	f000 fcb4 	bl	8009388 <__mdiff>
 8008a20:	68c2      	ldr	r2, [r0, #12]
 8008a22:	4607      	mov	r7, r0
 8008a24:	bb02      	cbnz	r2, 8008a68 <_dtoa_r+0xa60>
 8008a26:	4601      	mov	r1, r0
 8008a28:	4650      	mov	r0, sl
 8008a2a:	f000 fc91 	bl	8009350 <__mcmp>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	4639      	mov	r1, r7
 8008a32:	4628      	mov	r0, r5
 8008a34:	920c      	str	r2, [sp, #48]	; 0x30
 8008a36:	f000 fa07 	bl	8008e48 <_Bfree>
 8008a3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a3e:	9f08      	ldr	r7, [sp, #32]
 8008a40:	ea43 0102 	orr.w	r1, r3, r2
 8008a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a46:	4319      	orrs	r1, r3
 8008a48:	d110      	bne.n	8008a6c <_dtoa_r+0xa64>
 8008a4a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008a4e:	d029      	beq.n	8008aa4 <_dtoa_r+0xa9c>
 8008a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	dd02      	ble.n	8008a5c <_dtoa_r+0xa54>
 8008a56:	9b06      	ldr	r3, [sp, #24]
 8008a58:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008a5c:	9b04      	ldr	r3, [sp, #16]
 8008a5e:	f883 9000 	strb.w	r9, [r3]
 8008a62:	e777      	b.n	8008954 <_dtoa_r+0x94c>
 8008a64:	4630      	mov	r0, r6
 8008a66:	e7ba      	b.n	80089de <_dtoa_r+0x9d6>
 8008a68:	2201      	movs	r2, #1
 8008a6a:	e7e1      	b.n	8008a30 <_dtoa_r+0xa28>
 8008a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	db04      	blt.n	8008a7c <_dtoa_r+0xa74>
 8008a72:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008a74:	430b      	orrs	r3, r1
 8008a76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008a78:	430b      	orrs	r3, r1
 8008a7a:	d120      	bne.n	8008abe <_dtoa_r+0xab6>
 8008a7c:	2a00      	cmp	r2, #0
 8008a7e:	dded      	ble.n	8008a5c <_dtoa_r+0xa54>
 8008a80:	4651      	mov	r1, sl
 8008a82:	2201      	movs	r2, #1
 8008a84:	4628      	mov	r0, r5
 8008a86:	f000 fbf7 	bl	8009278 <__lshift>
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	4682      	mov	sl, r0
 8008a8e:	f000 fc5f 	bl	8009350 <__mcmp>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	dc03      	bgt.n	8008a9e <_dtoa_r+0xa96>
 8008a96:	d1e1      	bne.n	8008a5c <_dtoa_r+0xa54>
 8008a98:	f019 0f01 	tst.w	r9, #1
 8008a9c:	d0de      	beq.n	8008a5c <_dtoa_r+0xa54>
 8008a9e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008aa2:	d1d8      	bne.n	8008a56 <_dtoa_r+0xa4e>
 8008aa4:	2339      	movs	r3, #57	; 0x39
 8008aa6:	9a04      	ldr	r2, [sp, #16]
 8008aa8:	7013      	strb	r3, [r2, #0]
 8008aaa:	463b      	mov	r3, r7
 8008aac:	461f      	mov	r7, r3
 8008aae:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	2a39      	cmp	r2, #57	; 0x39
 8008ab6:	d06b      	beq.n	8008b90 <_dtoa_r+0xb88>
 8008ab8:	3201      	adds	r2, #1
 8008aba:	701a      	strb	r2, [r3, #0]
 8008abc:	e74a      	b.n	8008954 <_dtoa_r+0x94c>
 8008abe:	2a00      	cmp	r2, #0
 8008ac0:	dd07      	ble.n	8008ad2 <_dtoa_r+0xaca>
 8008ac2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008ac6:	d0ed      	beq.n	8008aa4 <_dtoa_r+0xa9c>
 8008ac8:	9a04      	ldr	r2, [sp, #16]
 8008aca:	f109 0301 	add.w	r3, r9, #1
 8008ace:	7013      	strb	r3, [r2, #0]
 8008ad0:	e740      	b.n	8008954 <_dtoa_r+0x94c>
 8008ad2:	9b08      	ldr	r3, [sp, #32]
 8008ad4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ad6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d042      	beq.n	8008b64 <_dtoa_r+0xb5c>
 8008ade:	4651      	mov	r1, sl
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	220a      	movs	r2, #10
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f000 f9d1 	bl	8008e8c <__multadd>
 8008aea:	45b0      	cmp	r8, r6
 8008aec:	4682      	mov	sl, r0
 8008aee:	f04f 0300 	mov.w	r3, #0
 8008af2:	f04f 020a 	mov.w	r2, #10
 8008af6:	4641      	mov	r1, r8
 8008af8:	4628      	mov	r0, r5
 8008afa:	d107      	bne.n	8008b0c <_dtoa_r+0xb04>
 8008afc:	f000 f9c6 	bl	8008e8c <__multadd>
 8008b00:	4680      	mov	r8, r0
 8008b02:	4606      	mov	r6, r0
 8008b04:	9b08      	ldr	r3, [sp, #32]
 8008b06:	3301      	adds	r3, #1
 8008b08:	9308      	str	r3, [sp, #32]
 8008b0a:	e775      	b.n	80089f8 <_dtoa_r+0x9f0>
 8008b0c:	f000 f9be 	bl	8008e8c <__multadd>
 8008b10:	4631      	mov	r1, r6
 8008b12:	4680      	mov	r8, r0
 8008b14:	2300      	movs	r3, #0
 8008b16:	220a      	movs	r2, #10
 8008b18:	4628      	mov	r0, r5
 8008b1a:	f000 f9b7 	bl	8008e8c <__multadd>
 8008b1e:	4606      	mov	r6, r0
 8008b20:	e7f0      	b.n	8008b04 <_dtoa_r+0xafc>
 8008b22:	9b08      	ldr	r3, [sp, #32]
 8008b24:	9306      	str	r3, [sp, #24]
 8008b26:	9f03      	ldr	r7, [sp, #12]
 8008b28:	4621      	mov	r1, r4
 8008b2a:	4650      	mov	r0, sl
 8008b2c:	f7ff f9e0 	bl	8007ef0 <quorem>
 8008b30:	9b03      	ldr	r3, [sp, #12]
 8008b32:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008b36:	f807 9b01 	strb.w	r9, [r7], #1
 8008b3a:	1afa      	subs	r2, r7, r3
 8008b3c:	9b06      	ldr	r3, [sp, #24]
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	dd07      	ble.n	8008b52 <_dtoa_r+0xb4a>
 8008b42:	4651      	mov	r1, sl
 8008b44:	2300      	movs	r3, #0
 8008b46:	220a      	movs	r2, #10
 8008b48:	4628      	mov	r0, r5
 8008b4a:	f000 f99f 	bl	8008e8c <__multadd>
 8008b4e:	4682      	mov	sl, r0
 8008b50:	e7ea      	b.n	8008b28 <_dtoa_r+0xb20>
 8008b52:	9b06      	ldr	r3, [sp, #24]
 8008b54:	f04f 0800 	mov.w	r8, #0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	bfcc      	ite	gt
 8008b5c:	461f      	movgt	r7, r3
 8008b5e:	2701      	movle	r7, #1
 8008b60:	9b03      	ldr	r3, [sp, #12]
 8008b62:	441f      	add	r7, r3
 8008b64:	4651      	mov	r1, sl
 8008b66:	2201      	movs	r2, #1
 8008b68:	4628      	mov	r0, r5
 8008b6a:	f000 fb85 	bl	8009278 <__lshift>
 8008b6e:	4621      	mov	r1, r4
 8008b70:	4682      	mov	sl, r0
 8008b72:	f000 fbed 	bl	8009350 <__mcmp>
 8008b76:	2800      	cmp	r0, #0
 8008b78:	dc97      	bgt.n	8008aaa <_dtoa_r+0xaa2>
 8008b7a:	d102      	bne.n	8008b82 <_dtoa_r+0xb7a>
 8008b7c:	f019 0f01 	tst.w	r9, #1
 8008b80:	d193      	bne.n	8008aaa <_dtoa_r+0xaa2>
 8008b82:	463b      	mov	r3, r7
 8008b84:	461f      	mov	r7, r3
 8008b86:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b8a:	2a30      	cmp	r2, #48	; 0x30
 8008b8c:	d0fa      	beq.n	8008b84 <_dtoa_r+0xb7c>
 8008b8e:	e6e1      	b.n	8008954 <_dtoa_r+0x94c>
 8008b90:	9a03      	ldr	r2, [sp, #12]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d18a      	bne.n	8008aac <_dtoa_r+0xaa4>
 8008b96:	2331      	movs	r3, #49	; 0x31
 8008b98:	f10b 0b01 	add.w	fp, fp, #1
 8008b9c:	e797      	b.n	8008ace <_dtoa_r+0xac6>
 8008b9e:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <_dtoa_r+0xbc0>)
 8008ba0:	f7ff ba9f 	b.w	80080e2 <_dtoa_r+0xda>
 8008ba4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f47f aa77 	bne.w	800809a <_dtoa_r+0x92>
 8008bac:	4b07      	ldr	r3, [pc, #28]	; (8008bcc <_dtoa_r+0xbc4>)
 8008bae:	f7ff ba98 	b.w	80080e2 <_dtoa_r+0xda>
 8008bb2:	9b06      	ldr	r3, [sp, #24]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	dcb6      	bgt.n	8008b26 <_dtoa_r+0xb1e>
 8008bb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	f73f aeb5 	bgt.w	800892a <_dtoa_r+0x922>
 8008bc0:	e7b1      	b.n	8008b26 <_dtoa_r+0xb1e>
 8008bc2:	bf00      	nop
 8008bc4:	0800bf13 	.word	0x0800bf13
 8008bc8:	0800be6e 	.word	0x0800be6e
 8008bcc:	0800be97 	.word	0x0800be97

08008bd0 <_free_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	2900      	cmp	r1, #0
 8008bd6:	d040      	beq.n	8008c5a <_free_r+0x8a>
 8008bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bdc:	1f0c      	subs	r4, r1, #4
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	bfb8      	it	lt
 8008be2:	18e4      	addlt	r4, r4, r3
 8008be4:	f000 f8e4 	bl	8008db0 <__malloc_lock>
 8008be8:	4a1c      	ldr	r2, [pc, #112]	; (8008c5c <_free_r+0x8c>)
 8008bea:	6813      	ldr	r3, [r2, #0]
 8008bec:	b933      	cbnz	r3, 8008bfc <_free_r+0x2c>
 8008bee:	6063      	str	r3, [r4, #4]
 8008bf0:	6014      	str	r4, [r2, #0]
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bf8:	f000 b8e0 	b.w	8008dbc <__malloc_unlock>
 8008bfc:	42a3      	cmp	r3, r4
 8008bfe:	d908      	bls.n	8008c12 <_free_r+0x42>
 8008c00:	6820      	ldr	r0, [r4, #0]
 8008c02:	1821      	adds	r1, r4, r0
 8008c04:	428b      	cmp	r3, r1
 8008c06:	bf01      	itttt	eq
 8008c08:	6819      	ldreq	r1, [r3, #0]
 8008c0a:	685b      	ldreq	r3, [r3, #4]
 8008c0c:	1809      	addeq	r1, r1, r0
 8008c0e:	6021      	streq	r1, [r4, #0]
 8008c10:	e7ed      	b.n	8008bee <_free_r+0x1e>
 8008c12:	461a      	mov	r2, r3
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	b10b      	cbz	r3, 8008c1c <_free_r+0x4c>
 8008c18:	42a3      	cmp	r3, r4
 8008c1a:	d9fa      	bls.n	8008c12 <_free_r+0x42>
 8008c1c:	6811      	ldr	r1, [r2, #0]
 8008c1e:	1850      	adds	r0, r2, r1
 8008c20:	42a0      	cmp	r0, r4
 8008c22:	d10b      	bne.n	8008c3c <_free_r+0x6c>
 8008c24:	6820      	ldr	r0, [r4, #0]
 8008c26:	4401      	add	r1, r0
 8008c28:	1850      	adds	r0, r2, r1
 8008c2a:	4283      	cmp	r3, r0
 8008c2c:	6011      	str	r1, [r2, #0]
 8008c2e:	d1e0      	bne.n	8008bf2 <_free_r+0x22>
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	4408      	add	r0, r1
 8008c36:	6010      	str	r0, [r2, #0]
 8008c38:	6053      	str	r3, [r2, #4]
 8008c3a:	e7da      	b.n	8008bf2 <_free_r+0x22>
 8008c3c:	d902      	bls.n	8008c44 <_free_r+0x74>
 8008c3e:	230c      	movs	r3, #12
 8008c40:	602b      	str	r3, [r5, #0]
 8008c42:	e7d6      	b.n	8008bf2 <_free_r+0x22>
 8008c44:	6820      	ldr	r0, [r4, #0]
 8008c46:	1821      	adds	r1, r4, r0
 8008c48:	428b      	cmp	r3, r1
 8008c4a:	bf01      	itttt	eq
 8008c4c:	6819      	ldreq	r1, [r3, #0]
 8008c4e:	685b      	ldreq	r3, [r3, #4]
 8008c50:	1809      	addeq	r1, r1, r0
 8008c52:	6021      	streq	r1, [r4, #0]
 8008c54:	6063      	str	r3, [r4, #4]
 8008c56:	6054      	str	r4, [r2, #4]
 8008c58:	e7cb      	b.n	8008bf2 <_free_r+0x22>
 8008c5a:	bd38      	pop	{r3, r4, r5, pc}
 8008c5c:	20000a40 	.word	0x20000a40

08008c60 <malloc>:
 8008c60:	4b02      	ldr	r3, [pc, #8]	; (8008c6c <malloc+0xc>)
 8008c62:	4601      	mov	r1, r0
 8008c64:	6818      	ldr	r0, [r3, #0]
 8008c66:	f000 b823 	b.w	8008cb0 <_malloc_r>
 8008c6a:	bf00      	nop
 8008c6c:	20000074 	.word	0x20000074

08008c70 <sbrk_aligned>:
 8008c70:	b570      	push	{r4, r5, r6, lr}
 8008c72:	4e0e      	ldr	r6, [pc, #56]	; (8008cac <sbrk_aligned+0x3c>)
 8008c74:	460c      	mov	r4, r1
 8008c76:	6831      	ldr	r1, [r6, #0]
 8008c78:	4605      	mov	r5, r0
 8008c7a:	b911      	cbnz	r1, 8008c82 <sbrk_aligned+0x12>
 8008c7c:	f001 fe0c 	bl	800a898 <_sbrk_r>
 8008c80:	6030      	str	r0, [r6, #0]
 8008c82:	4621      	mov	r1, r4
 8008c84:	4628      	mov	r0, r5
 8008c86:	f001 fe07 	bl	800a898 <_sbrk_r>
 8008c8a:	1c43      	adds	r3, r0, #1
 8008c8c:	d00a      	beq.n	8008ca4 <sbrk_aligned+0x34>
 8008c8e:	1cc4      	adds	r4, r0, #3
 8008c90:	f024 0403 	bic.w	r4, r4, #3
 8008c94:	42a0      	cmp	r0, r4
 8008c96:	d007      	beq.n	8008ca8 <sbrk_aligned+0x38>
 8008c98:	1a21      	subs	r1, r4, r0
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	f001 fdfc 	bl	800a898 <_sbrk_r>
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	d101      	bne.n	8008ca8 <sbrk_aligned+0x38>
 8008ca4:	f04f 34ff 	mov.w	r4, #4294967295
 8008ca8:	4620      	mov	r0, r4
 8008caa:	bd70      	pop	{r4, r5, r6, pc}
 8008cac:	20000a44 	.word	0x20000a44

08008cb0 <_malloc_r>:
 8008cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cb4:	1ccd      	adds	r5, r1, #3
 8008cb6:	f025 0503 	bic.w	r5, r5, #3
 8008cba:	3508      	adds	r5, #8
 8008cbc:	2d0c      	cmp	r5, #12
 8008cbe:	bf38      	it	cc
 8008cc0:	250c      	movcc	r5, #12
 8008cc2:	2d00      	cmp	r5, #0
 8008cc4:	4607      	mov	r7, r0
 8008cc6:	db01      	blt.n	8008ccc <_malloc_r+0x1c>
 8008cc8:	42a9      	cmp	r1, r5
 8008cca:	d905      	bls.n	8008cd8 <_malloc_r+0x28>
 8008ccc:	230c      	movs	r3, #12
 8008cce:	2600      	movs	r6, #0
 8008cd0:	603b      	str	r3, [r7, #0]
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008dac <_malloc_r+0xfc>
 8008cdc:	f000 f868 	bl	8008db0 <__malloc_lock>
 8008ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ce4:	461c      	mov	r4, r3
 8008ce6:	bb5c      	cbnz	r4, 8008d40 <_malloc_r+0x90>
 8008ce8:	4629      	mov	r1, r5
 8008cea:	4638      	mov	r0, r7
 8008cec:	f7ff ffc0 	bl	8008c70 <sbrk_aligned>
 8008cf0:	1c43      	adds	r3, r0, #1
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	d155      	bne.n	8008da2 <_malloc_r+0xf2>
 8008cf6:	f8d8 4000 	ldr.w	r4, [r8]
 8008cfa:	4626      	mov	r6, r4
 8008cfc:	2e00      	cmp	r6, #0
 8008cfe:	d145      	bne.n	8008d8c <_malloc_r+0xdc>
 8008d00:	2c00      	cmp	r4, #0
 8008d02:	d048      	beq.n	8008d96 <_malloc_r+0xe6>
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	4631      	mov	r1, r6
 8008d08:	4638      	mov	r0, r7
 8008d0a:	eb04 0903 	add.w	r9, r4, r3
 8008d0e:	f001 fdc3 	bl	800a898 <_sbrk_r>
 8008d12:	4581      	cmp	r9, r0
 8008d14:	d13f      	bne.n	8008d96 <_malloc_r+0xe6>
 8008d16:	6821      	ldr	r1, [r4, #0]
 8008d18:	4638      	mov	r0, r7
 8008d1a:	1a6d      	subs	r5, r5, r1
 8008d1c:	4629      	mov	r1, r5
 8008d1e:	f7ff ffa7 	bl	8008c70 <sbrk_aligned>
 8008d22:	3001      	adds	r0, #1
 8008d24:	d037      	beq.n	8008d96 <_malloc_r+0xe6>
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	442b      	add	r3, r5
 8008d2a:	6023      	str	r3, [r4, #0]
 8008d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d038      	beq.n	8008da6 <_malloc_r+0xf6>
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	42a2      	cmp	r2, r4
 8008d38:	d12b      	bne.n	8008d92 <_malloc_r+0xe2>
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	605a      	str	r2, [r3, #4]
 8008d3e:	e00f      	b.n	8008d60 <_malloc_r+0xb0>
 8008d40:	6822      	ldr	r2, [r4, #0]
 8008d42:	1b52      	subs	r2, r2, r5
 8008d44:	d41f      	bmi.n	8008d86 <_malloc_r+0xd6>
 8008d46:	2a0b      	cmp	r2, #11
 8008d48:	d917      	bls.n	8008d7a <_malloc_r+0xca>
 8008d4a:	1961      	adds	r1, r4, r5
 8008d4c:	42a3      	cmp	r3, r4
 8008d4e:	6025      	str	r5, [r4, #0]
 8008d50:	bf18      	it	ne
 8008d52:	6059      	strne	r1, [r3, #4]
 8008d54:	6863      	ldr	r3, [r4, #4]
 8008d56:	bf08      	it	eq
 8008d58:	f8c8 1000 	streq.w	r1, [r8]
 8008d5c:	5162      	str	r2, [r4, r5]
 8008d5e:	604b      	str	r3, [r1, #4]
 8008d60:	4638      	mov	r0, r7
 8008d62:	f104 060b 	add.w	r6, r4, #11
 8008d66:	f000 f829 	bl	8008dbc <__malloc_unlock>
 8008d6a:	f026 0607 	bic.w	r6, r6, #7
 8008d6e:	1d23      	adds	r3, r4, #4
 8008d70:	1af2      	subs	r2, r6, r3
 8008d72:	d0ae      	beq.n	8008cd2 <_malloc_r+0x22>
 8008d74:	1b9b      	subs	r3, r3, r6
 8008d76:	50a3      	str	r3, [r4, r2]
 8008d78:	e7ab      	b.n	8008cd2 <_malloc_r+0x22>
 8008d7a:	42a3      	cmp	r3, r4
 8008d7c:	6862      	ldr	r2, [r4, #4]
 8008d7e:	d1dd      	bne.n	8008d3c <_malloc_r+0x8c>
 8008d80:	f8c8 2000 	str.w	r2, [r8]
 8008d84:	e7ec      	b.n	8008d60 <_malloc_r+0xb0>
 8008d86:	4623      	mov	r3, r4
 8008d88:	6864      	ldr	r4, [r4, #4]
 8008d8a:	e7ac      	b.n	8008ce6 <_malloc_r+0x36>
 8008d8c:	4634      	mov	r4, r6
 8008d8e:	6876      	ldr	r6, [r6, #4]
 8008d90:	e7b4      	b.n	8008cfc <_malloc_r+0x4c>
 8008d92:	4613      	mov	r3, r2
 8008d94:	e7cc      	b.n	8008d30 <_malloc_r+0x80>
 8008d96:	230c      	movs	r3, #12
 8008d98:	4638      	mov	r0, r7
 8008d9a:	603b      	str	r3, [r7, #0]
 8008d9c:	f000 f80e 	bl	8008dbc <__malloc_unlock>
 8008da0:	e797      	b.n	8008cd2 <_malloc_r+0x22>
 8008da2:	6025      	str	r5, [r4, #0]
 8008da4:	e7dc      	b.n	8008d60 <_malloc_r+0xb0>
 8008da6:	605b      	str	r3, [r3, #4]
 8008da8:	deff      	udf	#255	; 0xff
 8008daa:	bf00      	nop
 8008dac:	20000a40 	.word	0x20000a40

08008db0 <__malloc_lock>:
 8008db0:	4801      	ldr	r0, [pc, #4]	; (8008db8 <__malloc_lock+0x8>)
 8008db2:	f7ff b880 	b.w	8007eb6 <__retarget_lock_acquire_recursive>
 8008db6:	bf00      	nop
 8008db8:	20000a3c 	.word	0x20000a3c

08008dbc <__malloc_unlock>:
 8008dbc:	4801      	ldr	r0, [pc, #4]	; (8008dc4 <__malloc_unlock+0x8>)
 8008dbe:	f7ff b87b 	b.w	8007eb8 <__retarget_lock_release_recursive>
 8008dc2:	bf00      	nop
 8008dc4:	20000a3c 	.word	0x20000a3c

08008dc8 <_Balloc>:
 8008dc8:	b570      	push	{r4, r5, r6, lr}
 8008dca:	69c6      	ldr	r6, [r0, #28]
 8008dcc:	4604      	mov	r4, r0
 8008dce:	460d      	mov	r5, r1
 8008dd0:	b976      	cbnz	r6, 8008df0 <_Balloc+0x28>
 8008dd2:	2010      	movs	r0, #16
 8008dd4:	f7ff ff44 	bl	8008c60 <malloc>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	61e0      	str	r0, [r4, #28]
 8008ddc:	b920      	cbnz	r0, 8008de8 <_Balloc+0x20>
 8008dde:	216b      	movs	r1, #107	; 0x6b
 8008de0:	4b17      	ldr	r3, [pc, #92]	; (8008e40 <_Balloc+0x78>)
 8008de2:	4818      	ldr	r0, [pc, #96]	; (8008e44 <_Balloc+0x7c>)
 8008de4:	f001 fd7c 	bl	800a8e0 <__assert_func>
 8008de8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dec:	6006      	str	r6, [r0, #0]
 8008dee:	60c6      	str	r6, [r0, #12]
 8008df0:	69e6      	ldr	r6, [r4, #28]
 8008df2:	68f3      	ldr	r3, [r6, #12]
 8008df4:	b183      	cbz	r3, 8008e18 <_Balloc+0x50>
 8008df6:	69e3      	ldr	r3, [r4, #28]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008dfe:	b9b8      	cbnz	r0, 8008e30 <_Balloc+0x68>
 8008e00:	2101      	movs	r1, #1
 8008e02:	fa01 f605 	lsl.w	r6, r1, r5
 8008e06:	1d72      	adds	r2, r6, #5
 8008e08:	4620      	mov	r0, r4
 8008e0a:	0092      	lsls	r2, r2, #2
 8008e0c:	f001 fd86 	bl	800a91c <_calloc_r>
 8008e10:	b160      	cbz	r0, 8008e2c <_Balloc+0x64>
 8008e12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e16:	e00e      	b.n	8008e36 <_Balloc+0x6e>
 8008e18:	2221      	movs	r2, #33	; 0x21
 8008e1a:	2104      	movs	r1, #4
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f001 fd7d 	bl	800a91c <_calloc_r>
 8008e22:	69e3      	ldr	r3, [r4, #28]
 8008e24:	60f0      	str	r0, [r6, #12]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1e4      	bne.n	8008df6 <_Balloc+0x2e>
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	bd70      	pop	{r4, r5, r6, pc}
 8008e30:	6802      	ldr	r2, [r0, #0]
 8008e32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e36:	2300      	movs	r3, #0
 8008e38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e3c:	e7f7      	b.n	8008e2e <_Balloc+0x66>
 8008e3e:	bf00      	nop
 8008e40:	0800bea4 	.word	0x0800bea4
 8008e44:	0800bf24 	.word	0x0800bf24

08008e48 <_Bfree>:
 8008e48:	b570      	push	{r4, r5, r6, lr}
 8008e4a:	69c6      	ldr	r6, [r0, #28]
 8008e4c:	4605      	mov	r5, r0
 8008e4e:	460c      	mov	r4, r1
 8008e50:	b976      	cbnz	r6, 8008e70 <_Bfree+0x28>
 8008e52:	2010      	movs	r0, #16
 8008e54:	f7ff ff04 	bl	8008c60 <malloc>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	61e8      	str	r0, [r5, #28]
 8008e5c:	b920      	cbnz	r0, 8008e68 <_Bfree+0x20>
 8008e5e:	218f      	movs	r1, #143	; 0x8f
 8008e60:	4b08      	ldr	r3, [pc, #32]	; (8008e84 <_Bfree+0x3c>)
 8008e62:	4809      	ldr	r0, [pc, #36]	; (8008e88 <_Bfree+0x40>)
 8008e64:	f001 fd3c 	bl	800a8e0 <__assert_func>
 8008e68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e6c:	6006      	str	r6, [r0, #0]
 8008e6e:	60c6      	str	r6, [r0, #12]
 8008e70:	b13c      	cbz	r4, 8008e82 <_Bfree+0x3a>
 8008e72:	69eb      	ldr	r3, [r5, #28]
 8008e74:	6862      	ldr	r2, [r4, #4]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e7c:	6021      	str	r1, [r4, #0]
 8008e7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e82:	bd70      	pop	{r4, r5, r6, pc}
 8008e84:	0800bea4 	.word	0x0800bea4
 8008e88:	0800bf24 	.word	0x0800bf24

08008e8c <__multadd>:
 8008e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e90:	4607      	mov	r7, r0
 8008e92:	460c      	mov	r4, r1
 8008e94:	461e      	mov	r6, r3
 8008e96:	2000      	movs	r0, #0
 8008e98:	690d      	ldr	r5, [r1, #16]
 8008e9a:	f101 0c14 	add.w	ip, r1, #20
 8008e9e:	f8dc 3000 	ldr.w	r3, [ip]
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	b299      	uxth	r1, r3
 8008ea6:	fb02 6101 	mla	r1, r2, r1, r6
 8008eaa:	0c1e      	lsrs	r6, r3, #16
 8008eac:	0c0b      	lsrs	r3, r1, #16
 8008eae:	fb02 3306 	mla	r3, r2, r6, r3
 8008eb2:	b289      	uxth	r1, r1
 8008eb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008eb8:	4285      	cmp	r5, r0
 8008eba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ebe:	f84c 1b04 	str.w	r1, [ip], #4
 8008ec2:	dcec      	bgt.n	8008e9e <__multadd+0x12>
 8008ec4:	b30e      	cbz	r6, 8008f0a <__multadd+0x7e>
 8008ec6:	68a3      	ldr	r3, [r4, #8]
 8008ec8:	42ab      	cmp	r3, r5
 8008eca:	dc19      	bgt.n	8008f00 <__multadd+0x74>
 8008ecc:	6861      	ldr	r1, [r4, #4]
 8008ece:	4638      	mov	r0, r7
 8008ed0:	3101      	adds	r1, #1
 8008ed2:	f7ff ff79 	bl	8008dc8 <_Balloc>
 8008ed6:	4680      	mov	r8, r0
 8008ed8:	b928      	cbnz	r0, 8008ee6 <__multadd+0x5a>
 8008eda:	4602      	mov	r2, r0
 8008edc:	21ba      	movs	r1, #186	; 0xba
 8008ede:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <__multadd+0x84>)
 8008ee0:	480c      	ldr	r0, [pc, #48]	; (8008f14 <__multadd+0x88>)
 8008ee2:	f001 fcfd 	bl	800a8e0 <__assert_func>
 8008ee6:	6922      	ldr	r2, [r4, #16]
 8008ee8:	f104 010c 	add.w	r1, r4, #12
 8008eec:	3202      	adds	r2, #2
 8008eee:	0092      	lsls	r2, r2, #2
 8008ef0:	300c      	adds	r0, #12
 8008ef2:	f001 fce1 	bl	800a8b8 <memcpy>
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	4638      	mov	r0, r7
 8008efa:	f7ff ffa5 	bl	8008e48 <_Bfree>
 8008efe:	4644      	mov	r4, r8
 8008f00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f04:	3501      	adds	r5, #1
 8008f06:	615e      	str	r6, [r3, #20]
 8008f08:	6125      	str	r5, [r4, #16]
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f10:	0800bf13 	.word	0x0800bf13
 8008f14:	0800bf24 	.word	0x0800bf24

08008f18 <__s2b>:
 8008f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f1c:	4615      	mov	r5, r2
 8008f1e:	2209      	movs	r2, #9
 8008f20:	461f      	mov	r7, r3
 8008f22:	3308      	adds	r3, #8
 8008f24:	460c      	mov	r4, r1
 8008f26:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	2100      	movs	r1, #0
 8008f30:	429a      	cmp	r2, r3
 8008f32:	db09      	blt.n	8008f48 <__s2b+0x30>
 8008f34:	4630      	mov	r0, r6
 8008f36:	f7ff ff47 	bl	8008dc8 <_Balloc>
 8008f3a:	b940      	cbnz	r0, 8008f4e <__s2b+0x36>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	21d3      	movs	r1, #211	; 0xd3
 8008f40:	4b18      	ldr	r3, [pc, #96]	; (8008fa4 <__s2b+0x8c>)
 8008f42:	4819      	ldr	r0, [pc, #100]	; (8008fa8 <__s2b+0x90>)
 8008f44:	f001 fccc 	bl	800a8e0 <__assert_func>
 8008f48:	0052      	lsls	r2, r2, #1
 8008f4a:	3101      	adds	r1, #1
 8008f4c:	e7f0      	b.n	8008f30 <__s2b+0x18>
 8008f4e:	9b08      	ldr	r3, [sp, #32]
 8008f50:	2d09      	cmp	r5, #9
 8008f52:	6143      	str	r3, [r0, #20]
 8008f54:	f04f 0301 	mov.w	r3, #1
 8008f58:	6103      	str	r3, [r0, #16]
 8008f5a:	dd16      	ble.n	8008f8a <__s2b+0x72>
 8008f5c:	f104 0909 	add.w	r9, r4, #9
 8008f60:	46c8      	mov	r8, r9
 8008f62:	442c      	add	r4, r5
 8008f64:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008f68:	4601      	mov	r1, r0
 8008f6a:	220a      	movs	r2, #10
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	3b30      	subs	r3, #48	; 0x30
 8008f70:	f7ff ff8c 	bl	8008e8c <__multadd>
 8008f74:	45a0      	cmp	r8, r4
 8008f76:	d1f5      	bne.n	8008f64 <__s2b+0x4c>
 8008f78:	f1a5 0408 	sub.w	r4, r5, #8
 8008f7c:	444c      	add	r4, r9
 8008f7e:	1b2d      	subs	r5, r5, r4
 8008f80:	1963      	adds	r3, r4, r5
 8008f82:	42bb      	cmp	r3, r7
 8008f84:	db04      	blt.n	8008f90 <__s2b+0x78>
 8008f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f8a:	2509      	movs	r5, #9
 8008f8c:	340a      	adds	r4, #10
 8008f8e:	e7f6      	b.n	8008f7e <__s2b+0x66>
 8008f90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f94:	4601      	mov	r1, r0
 8008f96:	220a      	movs	r2, #10
 8008f98:	4630      	mov	r0, r6
 8008f9a:	3b30      	subs	r3, #48	; 0x30
 8008f9c:	f7ff ff76 	bl	8008e8c <__multadd>
 8008fa0:	e7ee      	b.n	8008f80 <__s2b+0x68>
 8008fa2:	bf00      	nop
 8008fa4:	0800bf13 	.word	0x0800bf13
 8008fa8:	0800bf24 	.word	0x0800bf24

08008fac <__hi0bits>:
 8008fac:	0c02      	lsrs	r2, r0, #16
 8008fae:	0412      	lsls	r2, r2, #16
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	b9ca      	cbnz	r2, 8008fe8 <__hi0bits+0x3c>
 8008fb4:	0403      	lsls	r3, r0, #16
 8008fb6:	2010      	movs	r0, #16
 8008fb8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008fbc:	bf04      	itt	eq
 8008fbe:	021b      	lsleq	r3, r3, #8
 8008fc0:	3008      	addeq	r0, #8
 8008fc2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008fc6:	bf04      	itt	eq
 8008fc8:	011b      	lsleq	r3, r3, #4
 8008fca:	3004      	addeq	r0, #4
 8008fcc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008fd0:	bf04      	itt	eq
 8008fd2:	009b      	lsleq	r3, r3, #2
 8008fd4:	3002      	addeq	r0, #2
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	db05      	blt.n	8008fe6 <__hi0bits+0x3a>
 8008fda:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008fde:	f100 0001 	add.w	r0, r0, #1
 8008fe2:	bf08      	it	eq
 8008fe4:	2020      	moveq	r0, #32
 8008fe6:	4770      	bx	lr
 8008fe8:	2000      	movs	r0, #0
 8008fea:	e7e5      	b.n	8008fb8 <__hi0bits+0xc>

08008fec <__lo0bits>:
 8008fec:	6803      	ldr	r3, [r0, #0]
 8008fee:	4602      	mov	r2, r0
 8008ff0:	f013 0007 	ands.w	r0, r3, #7
 8008ff4:	d00b      	beq.n	800900e <__lo0bits+0x22>
 8008ff6:	07d9      	lsls	r1, r3, #31
 8008ff8:	d421      	bmi.n	800903e <__lo0bits+0x52>
 8008ffa:	0798      	lsls	r0, r3, #30
 8008ffc:	bf49      	itett	mi
 8008ffe:	085b      	lsrmi	r3, r3, #1
 8009000:	089b      	lsrpl	r3, r3, #2
 8009002:	2001      	movmi	r0, #1
 8009004:	6013      	strmi	r3, [r2, #0]
 8009006:	bf5c      	itt	pl
 8009008:	2002      	movpl	r0, #2
 800900a:	6013      	strpl	r3, [r2, #0]
 800900c:	4770      	bx	lr
 800900e:	b299      	uxth	r1, r3
 8009010:	b909      	cbnz	r1, 8009016 <__lo0bits+0x2a>
 8009012:	2010      	movs	r0, #16
 8009014:	0c1b      	lsrs	r3, r3, #16
 8009016:	b2d9      	uxtb	r1, r3
 8009018:	b909      	cbnz	r1, 800901e <__lo0bits+0x32>
 800901a:	3008      	adds	r0, #8
 800901c:	0a1b      	lsrs	r3, r3, #8
 800901e:	0719      	lsls	r1, r3, #28
 8009020:	bf04      	itt	eq
 8009022:	091b      	lsreq	r3, r3, #4
 8009024:	3004      	addeq	r0, #4
 8009026:	0799      	lsls	r1, r3, #30
 8009028:	bf04      	itt	eq
 800902a:	089b      	lsreq	r3, r3, #2
 800902c:	3002      	addeq	r0, #2
 800902e:	07d9      	lsls	r1, r3, #31
 8009030:	d403      	bmi.n	800903a <__lo0bits+0x4e>
 8009032:	085b      	lsrs	r3, r3, #1
 8009034:	f100 0001 	add.w	r0, r0, #1
 8009038:	d003      	beq.n	8009042 <__lo0bits+0x56>
 800903a:	6013      	str	r3, [r2, #0]
 800903c:	4770      	bx	lr
 800903e:	2000      	movs	r0, #0
 8009040:	4770      	bx	lr
 8009042:	2020      	movs	r0, #32
 8009044:	4770      	bx	lr
	...

08009048 <__i2b>:
 8009048:	b510      	push	{r4, lr}
 800904a:	460c      	mov	r4, r1
 800904c:	2101      	movs	r1, #1
 800904e:	f7ff febb 	bl	8008dc8 <_Balloc>
 8009052:	4602      	mov	r2, r0
 8009054:	b928      	cbnz	r0, 8009062 <__i2b+0x1a>
 8009056:	f240 1145 	movw	r1, #325	; 0x145
 800905a:	4b04      	ldr	r3, [pc, #16]	; (800906c <__i2b+0x24>)
 800905c:	4804      	ldr	r0, [pc, #16]	; (8009070 <__i2b+0x28>)
 800905e:	f001 fc3f 	bl	800a8e0 <__assert_func>
 8009062:	2301      	movs	r3, #1
 8009064:	6144      	str	r4, [r0, #20]
 8009066:	6103      	str	r3, [r0, #16]
 8009068:	bd10      	pop	{r4, pc}
 800906a:	bf00      	nop
 800906c:	0800bf13 	.word	0x0800bf13
 8009070:	0800bf24 	.word	0x0800bf24

08009074 <__multiply>:
 8009074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	4691      	mov	r9, r2
 800907a:	690a      	ldr	r2, [r1, #16]
 800907c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009080:	460c      	mov	r4, r1
 8009082:	429a      	cmp	r2, r3
 8009084:	bfbe      	ittt	lt
 8009086:	460b      	movlt	r3, r1
 8009088:	464c      	movlt	r4, r9
 800908a:	4699      	movlt	r9, r3
 800908c:	6927      	ldr	r7, [r4, #16]
 800908e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009092:	68a3      	ldr	r3, [r4, #8]
 8009094:	6861      	ldr	r1, [r4, #4]
 8009096:	eb07 060a 	add.w	r6, r7, sl
 800909a:	42b3      	cmp	r3, r6
 800909c:	b085      	sub	sp, #20
 800909e:	bfb8      	it	lt
 80090a0:	3101      	addlt	r1, #1
 80090a2:	f7ff fe91 	bl	8008dc8 <_Balloc>
 80090a6:	b930      	cbnz	r0, 80090b6 <__multiply+0x42>
 80090a8:	4602      	mov	r2, r0
 80090aa:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80090ae:	4b43      	ldr	r3, [pc, #268]	; (80091bc <__multiply+0x148>)
 80090b0:	4843      	ldr	r0, [pc, #268]	; (80091c0 <__multiply+0x14c>)
 80090b2:	f001 fc15 	bl	800a8e0 <__assert_func>
 80090b6:	f100 0514 	add.w	r5, r0, #20
 80090ba:	462b      	mov	r3, r5
 80090bc:	2200      	movs	r2, #0
 80090be:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090c2:	4543      	cmp	r3, r8
 80090c4:	d321      	bcc.n	800910a <__multiply+0x96>
 80090c6:	f104 0314 	add.w	r3, r4, #20
 80090ca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80090ce:	f109 0314 	add.w	r3, r9, #20
 80090d2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80090d6:	9202      	str	r2, [sp, #8]
 80090d8:	1b3a      	subs	r2, r7, r4
 80090da:	3a15      	subs	r2, #21
 80090dc:	f022 0203 	bic.w	r2, r2, #3
 80090e0:	3204      	adds	r2, #4
 80090e2:	f104 0115 	add.w	r1, r4, #21
 80090e6:	428f      	cmp	r7, r1
 80090e8:	bf38      	it	cc
 80090ea:	2204      	movcc	r2, #4
 80090ec:	9201      	str	r2, [sp, #4]
 80090ee:	9a02      	ldr	r2, [sp, #8]
 80090f0:	9303      	str	r3, [sp, #12]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d80c      	bhi.n	8009110 <__multiply+0x9c>
 80090f6:	2e00      	cmp	r6, #0
 80090f8:	dd03      	ble.n	8009102 <__multiply+0x8e>
 80090fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d05a      	beq.n	80091b8 <__multiply+0x144>
 8009102:	6106      	str	r6, [r0, #16]
 8009104:	b005      	add	sp, #20
 8009106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800910a:	f843 2b04 	str.w	r2, [r3], #4
 800910e:	e7d8      	b.n	80090c2 <__multiply+0x4e>
 8009110:	f8b3 a000 	ldrh.w	sl, [r3]
 8009114:	f1ba 0f00 	cmp.w	sl, #0
 8009118:	d023      	beq.n	8009162 <__multiply+0xee>
 800911a:	46a9      	mov	r9, r5
 800911c:	f04f 0c00 	mov.w	ip, #0
 8009120:	f104 0e14 	add.w	lr, r4, #20
 8009124:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009128:	f8d9 1000 	ldr.w	r1, [r9]
 800912c:	fa1f fb82 	uxth.w	fp, r2
 8009130:	b289      	uxth	r1, r1
 8009132:	fb0a 110b 	mla	r1, sl, fp, r1
 8009136:	4461      	add	r1, ip
 8009138:	f8d9 c000 	ldr.w	ip, [r9]
 800913c:	0c12      	lsrs	r2, r2, #16
 800913e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009142:	fb0a c202 	mla	r2, sl, r2, ip
 8009146:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800914a:	b289      	uxth	r1, r1
 800914c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009150:	4577      	cmp	r7, lr
 8009152:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009156:	f849 1b04 	str.w	r1, [r9], #4
 800915a:	d8e3      	bhi.n	8009124 <__multiply+0xb0>
 800915c:	9a01      	ldr	r2, [sp, #4]
 800915e:	f845 c002 	str.w	ip, [r5, r2]
 8009162:	9a03      	ldr	r2, [sp, #12]
 8009164:	3304      	adds	r3, #4
 8009166:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800916a:	f1b9 0f00 	cmp.w	r9, #0
 800916e:	d021      	beq.n	80091b4 <__multiply+0x140>
 8009170:	46ae      	mov	lr, r5
 8009172:	f04f 0a00 	mov.w	sl, #0
 8009176:	6829      	ldr	r1, [r5, #0]
 8009178:	f104 0c14 	add.w	ip, r4, #20
 800917c:	f8bc b000 	ldrh.w	fp, [ip]
 8009180:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009184:	b289      	uxth	r1, r1
 8009186:	fb09 220b 	mla	r2, r9, fp, r2
 800918a:	4452      	add	r2, sl
 800918c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009190:	f84e 1b04 	str.w	r1, [lr], #4
 8009194:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009198:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800919c:	f8be 1000 	ldrh.w	r1, [lr]
 80091a0:	4567      	cmp	r7, ip
 80091a2:	fb09 110a 	mla	r1, r9, sl, r1
 80091a6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80091aa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091ae:	d8e5      	bhi.n	800917c <__multiply+0x108>
 80091b0:	9a01      	ldr	r2, [sp, #4]
 80091b2:	50a9      	str	r1, [r5, r2]
 80091b4:	3504      	adds	r5, #4
 80091b6:	e79a      	b.n	80090ee <__multiply+0x7a>
 80091b8:	3e01      	subs	r6, #1
 80091ba:	e79c      	b.n	80090f6 <__multiply+0x82>
 80091bc:	0800bf13 	.word	0x0800bf13
 80091c0:	0800bf24 	.word	0x0800bf24

080091c4 <__pow5mult>:
 80091c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c8:	4615      	mov	r5, r2
 80091ca:	f012 0203 	ands.w	r2, r2, #3
 80091ce:	4606      	mov	r6, r0
 80091d0:	460f      	mov	r7, r1
 80091d2:	d007      	beq.n	80091e4 <__pow5mult+0x20>
 80091d4:	4c25      	ldr	r4, [pc, #148]	; (800926c <__pow5mult+0xa8>)
 80091d6:	3a01      	subs	r2, #1
 80091d8:	2300      	movs	r3, #0
 80091da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091de:	f7ff fe55 	bl	8008e8c <__multadd>
 80091e2:	4607      	mov	r7, r0
 80091e4:	10ad      	asrs	r5, r5, #2
 80091e6:	d03d      	beq.n	8009264 <__pow5mult+0xa0>
 80091e8:	69f4      	ldr	r4, [r6, #28]
 80091ea:	b97c      	cbnz	r4, 800920c <__pow5mult+0x48>
 80091ec:	2010      	movs	r0, #16
 80091ee:	f7ff fd37 	bl	8008c60 <malloc>
 80091f2:	4602      	mov	r2, r0
 80091f4:	61f0      	str	r0, [r6, #28]
 80091f6:	b928      	cbnz	r0, 8009204 <__pow5mult+0x40>
 80091f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80091fc:	4b1c      	ldr	r3, [pc, #112]	; (8009270 <__pow5mult+0xac>)
 80091fe:	481d      	ldr	r0, [pc, #116]	; (8009274 <__pow5mult+0xb0>)
 8009200:	f001 fb6e 	bl	800a8e0 <__assert_func>
 8009204:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009208:	6004      	str	r4, [r0, #0]
 800920a:	60c4      	str	r4, [r0, #12]
 800920c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009210:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009214:	b94c      	cbnz	r4, 800922a <__pow5mult+0x66>
 8009216:	f240 2171 	movw	r1, #625	; 0x271
 800921a:	4630      	mov	r0, r6
 800921c:	f7ff ff14 	bl	8009048 <__i2b>
 8009220:	2300      	movs	r3, #0
 8009222:	4604      	mov	r4, r0
 8009224:	f8c8 0008 	str.w	r0, [r8, #8]
 8009228:	6003      	str	r3, [r0, #0]
 800922a:	f04f 0900 	mov.w	r9, #0
 800922e:	07eb      	lsls	r3, r5, #31
 8009230:	d50a      	bpl.n	8009248 <__pow5mult+0x84>
 8009232:	4639      	mov	r1, r7
 8009234:	4622      	mov	r2, r4
 8009236:	4630      	mov	r0, r6
 8009238:	f7ff ff1c 	bl	8009074 <__multiply>
 800923c:	4680      	mov	r8, r0
 800923e:	4639      	mov	r1, r7
 8009240:	4630      	mov	r0, r6
 8009242:	f7ff fe01 	bl	8008e48 <_Bfree>
 8009246:	4647      	mov	r7, r8
 8009248:	106d      	asrs	r5, r5, #1
 800924a:	d00b      	beq.n	8009264 <__pow5mult+0xa0>
 800924c:	6820      	ldr	r0, [r4, #0]
 800924e:	b938      	cbnz	r0, 8009260 <__pow5mult+0x9c>
 8009250:	4622      	mov	r2, r4
 8009252:	4621      	mov	r1, r4
 8009254:	4630      	mov	r0, r6
 8009256:	f7ff ff0d 	bl	8009074 <__multiply>
 800925a:	6020      	str	r0, [r4, #0]
 800925c:	f8c0 9000 	str.w	r9, [r0]
 8009260:	4604      	mov	r4, r0
 8009262:	e7e4      	b.n	800922e <__pow5mult+0x6a>
 8009264:	4638      	mov	r0, r7
 8009266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800926a:	bf00      	nop
 800926c:	0800c070 	.word	0x0800c070
 8009270:	0800bea4 	.word	0x0800bea4
 8009274:	0800bf24 	.word	0x0800bf24

08009278 <__lshift>:
 8009278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800927c:	460c      	mov	r4, r1
 800927e:	4607      	mov	r7, r0
 8009280:	4691      	mov	r9, r2
 8009282:	6923      	ldr	r3, [r4, #16]
 8009284:	6849      	ldr	r1, [r1, #4]
 8009286:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800928a:	68a3      	ldr	r3, [r4, #8]
 800928c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009290:	f108 0601 	add.w	r6, r8, #1
 8009294:	42b3      	cmp	r3, r6
 8009296:	db0b      	blt.n	80092b0 <__lshift+0x38>
 8009298:	4638      	mov	r0, r7
 800929a:	f7ff fd95 	bl	8008dc8 <_Balloc>
 800929e:	4605      	mov	r5, r0
 80092a0:	b948      	cbnz	r0, 80092b6 <__lshift+0x3e>
 80092a2:	4602      	mov	r2, r0
 80092a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80092a8:	4b27      	ldr	r3, [pc, #156]	; (8009348 <__lshift+0xd0>)
 80092aa:	4828      	ldr	r0, [pc, #160]	; (800934c <__lshift+0xd4>)
 80092ac:	f001 fb18 	bl	800a8e0 <__assert_func>
 80092b0:	3101      	adds	r1, #1
 80092b2:	005b      	lsls	r3, r3, #1
 80092b4:	e7ee      	b.n	8009294 <__lshift+0x1c>
 80092b6:	2300      	movs	r3, #0
 80092b8:	f100 0114 	add.w	r1, r0, #20
 80092bc:	f100 0210 	add.w	r2, r0, #16
 80092c0:	4618      	mov	r0, r3
 80092c2:	4553      	cmp	r3, sl
 80092c4:	db33      	blt.n	800932e <__lshift+0xb6>
 80092c6:	6920      	ldr	r0, [r4, #16]
 80092c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092cc:	f104 0314 	add.w	r3, r4, #20
 80092d0:	f019 091f 	ands.w	r9, r9, #31
 80092d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092dc:	d02b      	beq.n	8009336 <__lshift+0xbe>
 80092de:	468a      	mov	sl, r1
 80092e0:	2200      	movs	r2, #0
 80092e2:	f1c9 0e20 	rsb	lr, r9, #32
 80092e6:	6818      	ldr	r0, [r3, #0]
 80092e8:	fa00 f009 	lsl.w	r0, r0, r9
 80092ec:	4310      	orrs	r0, r2
 80092ee:	f84a 0b04 	str.w	r0, [sl], #4
 80092f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80092f6:	459c      	cmp	ip, r3
 80092f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80092fc:	d8f3      	bhi.n	80092e6 <__lshift+0x6e>
 80092fe:	ebac 0304 	sub.w	r3, ip, r4
 8009302:	3b15      	subs	r3, #21
 8009304:	f023 0303 	bic.w	r3, r3, #3
 8009308:	3304      	adds	r3, #4
 800930a:	f104 0015 	add.w	r0, r4, #21
 800930e:	4584      	cmp	ip, r0
 8009310:	bf38      	it	cc
 8009312:	2304      	movcc	r3, #4
 8009314:	50ca      	str	r2, [r1, r3]
 8009316:	b10a      	cbz	r2, 800931c <__lshift+0xa4>
 8009318:	f108 0602 	add.w	r6, r8, #2
 800931c:	3e01      	subs	r6, #1
 800931e:	4638      	mov	r0, r7
 8009320:	4621      	mov	r1, r4
 8009322:	612e      	str	r6, [r5, #16]
 8009324:	f7ff fd90 	bl	8008e48 <_Bfree>
 8009328:	4628      	mov	r0, r5
 800932a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800932e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009332:	3301      	adds	r3, #1
 8009334:	e7c5      	b.n	80092c2 <__lshift+0x4a>
 8009336:	3904      	subs	r1, #4
 8009338:	f853 2b04 	ldr.w	r2, [r3], #4
 800933c:	459c      	cmp	ip, r3
 800933e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009342:	d8f9      	bhi.n	8009338 <__lshift+0xc0>
 8009344:	e7ea      	b.n	800931c <__lshift+0xa4>
 8009346:	bf00      	nop
 8009348:	0800bf13 	.word	0x0800bf13
 800934c:	0800bf24 	.word	0x0800bf24

08009350 <__mcmp>:
 8009350:	4603      	mov	r3, r0
 8009352:	690a      	ldr	r2, [r1, #16]
 8009354:	6900      	ldr	r0, [r0, #16]
 8009356:	b530      	push	{r4, r5, lr}
 8009358:	1a80      	subs	r0, r0, r2
 800935a:	d10d      	bne.n	8009378 <__mcmp+0x28>
 800935c:	3314      	adds	r3, #20
 800935e:	3114      	adds	r1, #20
 8009360:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009364:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009368:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800936c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009370:	4295      	cmp	r5, r2
 8009372:	d002      	beq.n	800937a <__mcmp+0x2a>
 8009374:	d304      	bcc.n	8009380 <__mcmp+0x30>
 8009376:	2001      	movs	r0, #1
 8009378:	bd30      	pop	{r4, r5, pc}
 800937a:	42a3      	cmp	r3, r4
 800937c:	d3f4      	bcc.n	8009368 <__mcmp+0x18>
 800937e:	e7fb      	b.n	8009378 <__mcmp+0x28>
 8009380:	f04f 30ff 	mov.w	r0, #4294967295
 8009384:	e7f8      	b.n	8009378 <__mcmp+0x28>
	...

08009388 <__mdiff>:
 8009388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	460d      	mov	r5, r1
 800938e:	4607      	mov	r7, r0
 8009390:	4611      	mov	r1, r2
 8009392:	4628      	mov	r0, r5
 8009394:	4614      	mov	r4, r2
 8009396:	f7ff ffdb 	bl	8009350 <__mcmp>
 800939a:	1e06      	subs	r6, r0, #0
 800939c:	d111      	bne.n	80093c2 <__mdiff+0x3a>
 800939e:	4631      	mov	r1, r6
 80093a0:	4638      	mov	r0, r7
 80093a2:	f7ff fd11 	bl	8008dc8 <_Balloc>
 80093a6:	4602      	mov	r2, r0
 80093a8:	b928      	cbnz	r0, 80093b6 <__mdiff+0x2e>
 80093aa:	f240 2137 	movw	r1, #567	; 0x237
 80093ae:	4b3a      	ldr	r3, [pc, #232]	; (8009498 <__mdiff+0x110>)
 80093b0:	483a      	ldr	r0, [pc, #232]	; (800949c <__mdiff+0x114>)
 80093b2:	f001 fa95 	bl	800a8e0 <__assert_func>
 80093b6:	2301      	movs	r3, #1
 80093b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80093bc:	4610      	mov	r0, r2
 80093be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c2:	bfa4      	itt	ge
 80093c4:	4623      	movge	r3, r4
 80093c6:	462c      	movge	r4, r5
 80093c8:	4638      	mov	r0, r7
 80093ca:	6861      	ldr	r1, [r4, #4]
 80093cc:	bfa6      	itte	ge
 80093ce:	461d      	movge	r5, r3
 80093d0:	2600      	movge	r6, #0
 80093d2:	2601      	movlt	r6, #1
 80093d4:	f7ff fcf8 	bl	8008dc8 <_Balloc>
 80093d8:	4602      	mov	r2, r0
 80093da:	b918      	cbnz	r0, 80093e4 <__mdiff+0x5c>
 80093dc:	f240 2145 	movw	r1, #581	; 0x245
 80093e0:	4b2d      	ldr	r3, [pc, #180]	; (8009498 <__mdiff+0x110>)
 80093e2:	e7e5      	b.n	80093b0 <__mdiff+0x28>
 80093e4:	f102 0814 	add.w	r8, r2, #20
 80093e8:	46c2      	mov	sl, r8
 80093ea:	f04f 0c00 	mov.w	ip, #0
 80093ee:	6927      	ldr	r7, [r4, #16]
 80093f0:	60c6      	str	r6, [r0, #12]
 80093f2:	692e      	ldr	r6, [r5, #16]
 80093f4:	f104 0014 	add.w	r0, r4, #20
 80093f8:	f105 0914 	add.w	r9, r5, #20
 80093fc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009400:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009404:	3410      	adds	r4, #16
 8009406:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800940a:	f859 3b04 	ldr.w	r3, [r9], #4
 800940e:	fa1f f18b 	uxth.w	r1, fp
 8009412:	4461      	add	r1, ip
 8009414:	fa1f fc83 	uxth.w	ip, r3
 8009418:	0c1b      	lsrs	r3, r3, #16
 800941a:	eba1 010c 	sub.w	r1, r1, ip
 800941e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009422:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009426:	b289      	uxth	r1, r1
 8009428:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800942c:	454e      	cmp	r6, r9
 800942e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009432:	f84a 1b04 	str.w	r1, [sl], #4
 8009436:	d8e6      	bhi.n	8009406 <__mdiff+0x7e>
 8009438:	1b73      	subs	r3, r6, r5
 800943a:	3b15      	subs	r3, #21
 800943c:	f023 0303 	bic.w	r3, r3, #3
 8009440:	3515      	adds	r5, #21
 8009442:	3304      	adds	r3, #4
 8009444:	42ae      	cmp	r6, r5
 8009446:	bf38      	it	cc
 8009448:	2304      	movcc	r3, #4
 800944a:	4418      	add	r0, r3
 800944c:	4443      	add	r3, r8
 800944e:	461e      	mov	r6, r3
 8009450:	4605      	mov	r5, r0
 8009452:	4575      	cmp	r5, lr
 8009454:	d30e      	bcc.n	8009474 <__mdiff+0xec>
 8009456:	f10e 0103 	add.w	r1, lr, #3
 800945a:	1a09      	subs	r1, r1, r0
 800945c:	f021 0103 	bic.w	r1, r1, #3
 8009460:	3803      	subs	r0, #3
 8009462:	4586      	cmp	lr, r0
 8009464:	bf38      	it	cc
 8009466:	2100      	movcc	r1, #0
 8009468:	440b      	add	r3, r1
 800946a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800946e:	b189      	cbz	r1, 8009494 <__mdiff+0x10c>
 8009470:	6117      	str	r7, [r2, #16]
 8009472:	e7a3      	b.n	80093bc <__mdiff+0x34>
 8009474:	f855 8b04 	ldr.w	r8, [r5], #4
 8009478:	fa1f f188 	uxth.w	r1, r8
 800947c:	4461      	add	r1, ip
 800947e:	140c      	asrs	r4, r1, #16
 8009480:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009484:	b289      	uxth	r1, r1
 8009486:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800948a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800948e:	f846 1b04 	str.w	r1, [r6], #4
 8009492:	e7de      	b.n	8009452 <__mdiff+0xca>
 8009494:	3f01      	subs	r7, #1
 8009496:	e7e8      	b.n	800946a <__mdiff+0xe2>
 8009498:	0800bf13 	.word	0x0800bf13
 800949c:	0800bf24 	.word	0x0800bf24

080094a0 <__ulp>:
 80094a0:	4b0e      	ldr	r3, [pc, #56]	; (80094dc <__ulp+0x3c>)
 80094a2:	400b      	ands	r3, r1
 80094a4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	dc08      	bgt.n	80094be <__ulp+0x1e>
 80094ac:	425b      	negs	r3, r3
 80094ae:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80094b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80094b6:	da04      	bge.n	80094c2 <__ulp+0x22>
 80094b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80094bc:	4113      	asrs	r3, r2
 80094be:	2200      	movs	r2, #0
 80094c0:	e008      	b.n	80094d4 <__ulp+0x34>
 80094c2:	f1a2 0314 	sub.w	r3, r2, #20
 80094c6:	2b1e      	cmp	r3, #30
 80094c8:	bfd6      	itet	le
 80094ca:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80094ce:	2201      	movgt	r2, #1
 80094d0:	40da      	lsrle	r2, r3
 80094d2:	2300      	movs	r3, #0
 80094d4:	4619      	mov	r1, r3
 80094d6:	4610      	mov	r0, r2
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	7ff00000 	.word	0x7ff00000

080094e0 <__b2d>:
 80094e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e2:	6905      	ldr	r5, [r0, #16]
 80094e4:	f100 0714 	add.w	r7, r0, #20
 80094e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80094ec:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80094f0:	1f2e      	subs	r6, r5, #4
 80094f2:	4620      	mov	r0, r4
 80094f4:	f7ff fd5a 	bl	8008fac <__hi0bits>
 80094f8:	f1c0 0220 	rsb	r2, r0, #32
 80094fc:	280a      	cmp	r0, #10
 80094fe:	4603      	mov	r3, r0
 8009500:	f8df c068 	ldr.w	ip, [pc, #104]	; 800956c <__b2d+0x8c>
 8009504:	600a      	str	r2, [r1, #0]
 8009506:	dc12      	bgt.n	800952e <__b2d+0x4e>
 8009508:	f1c0 0e0b 	rsb	lr, r0, #11
 800950c:	fa24 f20e 	lsr.w	r2, r4, lr
 8009510:	42b7      	cmp	r7, r6
 8009512:	ea42 010c 	orr.w	r1, r2, ip
 8009516:	bf2c      	ite	cs
 8009518:	2200      	movcs	r2, #0
 800951a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800951e:	3315      	adds	r3, #21
 8009520:	fa04 f303 	lsl.w	r3, r4, r3
 8009524:	fa22 f20e 	lsr.w	r2, r2, lr
 8009528:	431a      	orrs	r2, r3
 800952a:	4610      	mov	r0, r2
 800952c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800952e:	42b7      	cmp	r7, r6
 8009530:	bf2e      	itee	cs
 8009532:	2200      	movcs	r2, #0
 8009534:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8009538:	f1a5 0608 	subcc.w	r6, r5, #8
 800953c:	3b0b      	subs	r3, #11
 800953e:	d012      	beq.n	8009566 <__b2d+0x86>
 8009540:	f1c3 0520 	rsb	r5, r3, #32
 8009544:	fa22 f105 	lsr.w	r1, r2, r5
 8009548:	409c      	lsls	r4, r3
 800954a:	430c      	orrs	r4, r1
 800954c:	42be      	cmp	r6, r7
 800954e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8009552:	bf94      	ite	ls
 8009554:	2400      	movls	r4, #0
 8009556:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800955a:	409a      	lsls	r2, r3
 800955c:	40ec      	lsrs	r4, r5
 800955e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009562:	4322      	orrs	r2, r4
 8009564:	e7e1      	b.n	800952a <__b2d+0x4a>
 8009566:	ea44 010c 	orr.w	r1, r4, ip
 800956a:	e7de      	b.n	800952a <__b2d+0x4a>
 800956c:	3ff00000 	.word	0x3ff00000

08009570 <__d2b>:
 8009570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009572:	2101      	movs	r1, #1
 8009574:	4617      	mov	r7, r2
 8009576:	461c      	mov	r4, r3
 8009578:	9e08      	ldr	r6, [sp, #32]
 800957a:	f7ff fc25 	bl	8008dc8 <_Balloc>
 800957e:	4605      	mov	r5, r0
 8009580:	b930      	cbnz	r0, 8009590 <__d2b+0x20>
 8009582:	4602      	mov	r2, r0
 8009584:	f240 310f 	movw	r1, #783	; 0x30f
 8009588:	4b22      	ldr	r3, [pc, #136]	; (8009614 <__d2b+0xa4>)
 800958a:	4823      	ldr	r0, [pc, #140]	; (8009618 <__d2b+0xa8>)
 800958c:	f001 f9a8 	bl	800a8e0 <__assert_func>
 8009590:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009594:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009598:	bb24      	cbnz	r4, 80095e4 <__d2b+0x74>
 800959a:	2f00      	cmp	r7, #0
 800959c:	9301      	str	r3, [sp, #4]
 800959e:	d026      	beq.n	80095ee <__d2b+0x7e>
 80095a0:	4668      	mov	r0, sp
 80095a2:	9700      	str	r7, [sp, #0]
 80095a4:	f7ff fd22 	bl	8008fec <__lo0bits>
 80095a8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095ac:	b1e8      	cbz	r0, 80095ea <__d2b+0x7a>
 80095ae:	f1c0 0320 	rsb	r3, r0, #32
 80095b2:	fa02 f303 	lsl.w	r3, r2, r3
 80095b6:	430b      	orrs	r3, r1
 80095b8:	40c2      	lsrs	r2, r0
 80095ba:	616b      	str	r3, [r5, #20]
 80095bc:	9201      	str	r2, [sp, #4]
 80095be:	9b01      	ldr	r3, [sp, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	bf14      	ite	ne
 80095c4:	2102      	movne	r1, #2
 80095c6:	2101      	moveq	r1, #1
 80095c8:	61ab      	str	r3, [r5, #24]
 80095ca:	6129      	str	r1, [r5, #16]
 80095cc:	b1bc      	cbz	r4, 80095fe <__d2b+0x8e>
 80095ce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80095d2:	4404      	add	r4, r0
 80095d4:	6034      	str	r4, [r6, #0]
 80095d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095dc:	6018      	str	r0, [r3, #0]
 80095de:	4628      	mov	r0, r5
 80095e0:	b003      	add	sp, #12
 80095e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095e8:	e7d7      	b.n	800959a <__d2b+0x2a>
 80095ea:	6169      	str	r1, [r5, #20]
 80095ec:	e7e7      	b.n	80095be <__d2b+0x4e>
 80095ee:	a801      	add	r0, sp, #4
 80095f0:	f7ff fcfc 	bl	8008fec <__lo0bits>
 80095f4:	9b01      	ldr	r3, [sp, #4]
 80095f6:	2101      	movs	r1, #1
 80095f8:	616b      	str	r3, [r5, #20]
 80095fa:	3020      	adds	r0, #32
 80095fc:	e7e5      	b.n	80095ca <__d2b+0x5a>
 80095fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009602:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8009606:	6030      	str	r0, [r6, #0]
 8009608:	6918      	ldr	r0, [r3, #16]
 800960a:	f7ff fccf 	bl	8008fac <__hi0bits>
 800960e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009612:	e7e2      	b.n	80095da <__d2b+0x6a>
 8009614:	0800bf13 	.word	0x0800bf13
 8009618:	0800bf24 	.word	0x0800bf24

0800961c <__ratio>:
 800961c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009620:	4688      	mov	r8, r1
 8009622:	4669      	mov	r1, sp
 8009624:	4681      	mov	r9, r0
 8009626:	f7ff ff5b 	bl	80094e0 <__b2d>
 800962a:	460f      	mov	r7, r1
 800962c:	4604      	mov	r4, r0
 800962e:	460d      	mov	r5, r1
 8009630:	4640      	mov	r0, r8
 8009632:	a901      	add	r1, sp, #4
 8009634:	f7ff ff54 	bl	80094e0 <__b2d>
 8009638:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800963c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009640:	468b      	mov	fp, r1
 8009642:	eba3 0c02 	sub.w	ip, r3, r2
 8009646:	e9dd 3200 	ldrd	r3, r2, [sp]
 800964a:	1a9b      	subs	r3, r3, r2
 800964c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009650:	2b00      	cmp	r3, #0
 8009652:	bfd5      	itete	le
 8009654:	460a      	movle	r2, r1
 8009656:	462a      	movgt	r2, r5
 8009658:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800965c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009660:	bfd8      	it	le
 8009662:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009666:	465b      	mov	r3, fp
 8009668:	4602      	mov	r2, r0
 800966a:	4639      	mov	r1, r7
 800966c:	4620      	mov	r0, r4
 800966e:	f7f7 f85d 	bl	800072c <__aeabi_ddiv>
 8009672:	b003      	add	sp, #12
 8009674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009678 <__copybits>:
 8009678:	3901      	subs	r1, #1
 800967a:	b570      	push	{r4, r5, r6, lr}
 800967c:	1149      	asrs	r1, r1, #5
 800967e:	6914      	ldr	r4, [r2, #16]
 8009680:	3101      	adds	r1, #1
 8009682:	f102 0314 	add.w	r3, r2, #20
 8009686:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800968a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800968e:	1f05      	subs	r5, r0, #4
 8009690:	42a3      	cmp	r3, r4
 8009692:	d30c      	bcc.n	80096ae <__copybits+0x36>
 8009694:	1aa3      	subs	r3, r4, r2
 8009696:	3b11      	subs	r3, #17
 8009698:	f023 0303 	bic.w	r3, r3, #3
 800969c:	3211      	adds	r2, #17
 800969e:	42a2      	cmp	r2, r4
 80096a0:	bf88      	it	hi
 80096a2:	2300      	movhi	r3, #0
 80096a4:	4418      	add	r0, r3
 80096a6:	2300      	movs	r3, #0
 80096a8:	4288      	cmp	r0, r1
 80096aa:	d305      	bcc.n	80096b8 <__copybits+0x40>
 80096ac:	bd70      	pop	{r4, r5, r6, pc}
 80096ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80096b2:	f845 6f04 	str.w	r6, [r5, #4]!
 80096b6:	e7eb      	b.n	8009690 <__copybits+0x18>
 80096b8:	f840 3b04 	str.w	r3, [r0], #4
 80096bc:	e7f4      	b.n	80096a8 <__copybits+0x30>

080096be <__any_on>:
 80096be:	f100 0214 	add.w	r2, r0, #20
 80096c2:	6900      	ldr	r0, [r0, #16]
 80096c4:	114b      	asrs	r3, r1, #5
 80096c6:	4298      	cmp	r0, r3
 80096c8:	b510      	push	{r4, lr}
 80096ca:	db11      	blt.n	80096f0 <__any_on+0x32>
 80096cc:	dd0a      	ble.n	80096e4 <__any_on+0x26>
 80096ce:	f011 011f 	ands.w	r1, r1, #31
 80096d2:	d007      	beq.n	80096e4 <__any_on+0x26>
 80096d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80096d8:	fa24 f001 	lsr.w	r0, r4, r1
 80096dc:	fa00 f101 	lsl.w	r1, r0, r1
 80096e0:	428c      	cmp	r4, r1
 80096e2:	d10b      	bne.n	80096fc <__any_on+0x3e>
 80096e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d803      	bhi.n	80096f4 <__any_on+0x36>
 80096ec:	2000      	movs	r0, #0
 80096ee:	bd10      	pop	{r4, pc}
 80096f0:	4603      	mov	r3, r0
 80096f2:	e7f7      	b.n	80096e4 <__any_on+0x26>
 80096f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80096f8:	2900      	cmp	r1, #0
 80096fa:	d0f5      	beq.n	80096e8 <__any_on+0x2a>
 80096fc:	2001      	movs	r0, #1
 80096fe:	e7f6      	b.n	80096ee <__any_on+0x30>

08009700 <sulp>:
 8009700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009704:	460f      	mov	r7, r1
 8009706:	4690      	mov	r8, r2
 8009708:	f7ff feca 	bl	80094a0 <__ulp>
 800970c:	4604      	mov	r4, r0
 800970e:	460d      	mov	r5, r1
 8009710:	f1b8 0f00 	cmp.w	r8, #0
 8009714:	d011      	beq.n	800973a <sulp+0x3a>
 8009716:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800971a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800971e:	2b00      	cmp	r3, #0
 8009720:	dd0b      	ble.n	800973a <sulp+0x3a>
 8009722:	2400      	movs	r4, #0
 8009724:	051b      	lsls	r3, r3, #20
 8009726:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800972a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800972e:	4622      	mov	r2, r4
 8009730:	462b      	mov	r3, r5
 8009732:	f7f6 fed1 	bl	80004d8 <__aeabi_dmul>
 8009736:	4604      	mov	r4, r0
 8009738:	460d      	mov	r5, r1
 800973a:	4620      	mov	r0, r4
 800973c:	4629      	mov	r1, r5
 800973e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009742:	0000      	movs	r0, r0
 8009744:	0000      	movs	r0, r0
	...

08009748 <_strtod_l>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	b09f      	sub	sp, #124	; 0x7c
 800974e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009750:	2200      	movs	r2, #0
 8009752:	4604      	mov	r4, r0
 8009754:	921a      	str	r2, [sp, #104]	; 0x68
 8009756:	460d      	mov	r5, r1
 8009758:	f04f 0800 	mov.w	r8, #0
 800975c:	f04f 0900 	mov.w	r9, #0
 8009760:	460a      	mov	r2, r1
 8009762:	9219      	str	r2, [sp, #100]	; 0x64
 8009764:	7811      	ldrb	r1, [r2, #0]
 8009766:	292b      	cmp	r1, #43	; 0x2b
 8009768:	d04a      	beq.n	8009800 <_strtod_l+0xb8>
 800976a:	d838      	bhi.n	80097de <_strtod_l+0x96>
 800976c:	290d      	cmp	r1, #13
 800976e:	d832      	bhi.n	80097d6 <_strtod_l+0x8e>
 8009770:	2908      	cmp	r1, #8
 8009772:	d832      	bhi.n	80097da <_strtod_l+0x92>
 8009774:	2900      	cmp	r1, #0
 8009776:	d03b      	beq.n	80097f0 <_strtod_l+0xa8>
 8009778:	2200      	movs	r2, #0
 800977a:	920e      	str	r2, [sp, #56]	; 0x38
 800977c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800977e:	7832      	ldrb	r2, [r6, #0]
 8009780:	2a30      	cmp	r2, #48	; 0x30
 8009782:	f040 80b2 	bne.w	80098ea <_strtod_l+0x1a2>
 8009786:	7872      	ldrb	r2, [r6, #1]
 8009788:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800978c:	2a58      	cmp	r2, #88	; 0x58
 800978e:	d16e      	bne.n	800986e <_strtod_l+0x126>
 8009790:	9302      	str	r3, [sp, #8]
 8009792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009794:	4620      	mov	r0, r4
 8009796:	9301      	str	r3, [sp, #4]
 8009798:	ab1a      	add	r3, sp, #104	; 0x68
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	4a8c      	ldr	r2, [pc, #560]	; (80099d0 <_strtod_l+0x288>)
 800979e:	ab1b      	add	r3, sp, #108	; 0x6c
 80097a0:	a919      	add	r1, sp, #100	; 0x64
 80097a2:	f001 f937 	bl	800aa14 <__gethex>
 80097a6:	f010 070f 	ands.w	r7, r0, #15
 80097aa:	4605      	mov	r5, r0
 80097ac:	d005      	beq.n	80097ba <_strtod_l+0x72>
 80097ae:	2f06      	cmp	r7, #6
 80097b0:	d128      	bne.n	8009804 <_strtod_l+0xbc>
 80097b2:	2300      	movs	r3, #0
 80097b4:	3601      	adds	r6, #1
 80097b6:	9619      	str	r6, [sp, #100]	; 0x64
 80097b8:	930e      	str	r3, [sp, #56]	; 0x38
 80097ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f040 85a0 	bne.w	800a302 <_strtod_l+0xbba>
 80097c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097c4:	b1cb      	cbz	r3, 80097fa <_strtod_l+0xb2>
 80097c6:	4642      	mov	r2, r8
 80097c8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80097cc:	4610      	mov	r0, r2
 80097ce:	4619      	mov	r1, r3
 80097d0:	b01f      	add	sp, #124	; 0x7c
 80097d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d6:	2920      	cmp	r1, #32
 80097d8:	d1ce      	bne.n	8009778 <_strtod_l+0x30>
 80097da:	3201      	adds	r2, #1
 80097dc:	e7c1      	b.n	8009762 <_strtod_l+0x1a>
 80097de:	292d      	cmp	r1, #45	; 0x2d
 80097e0:	d1ca      	bne.n	8009778 <_strtod_l+0x30>
 80097e2:	2101      	movs	r1, #1
 80097e4:	910e      	str	r1, [sp, #56]	; 0x38
 80097e6:	1c51      	adds	r1, r2, #1
 80097e8:	9119      	str	r1, [sp, #100]	; 0x64
 80097ea:	7852      	ldrb	r2, [r2, #1]
 80097ec:	2a00      	cmp	r2, #0
 80097ee:	d1c5      	bne.n	800977c <_strtod_l+0x34>
 80097f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097f2:	9519      	str	r5, [sp, #100]	; 0x64
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f040 8582 	bne.w	800a2fe <_strtod_l+0xbb6>
 80097fa:	4642      	mov	r2, r8
 80097fc:	464b      	mov	r3, r9
 80097fe:	e7e5      	b.n	80097cc <_strtod_l+0x84>
 8009800:	2100      	movs	r1, #0
 8009802:	e7ef      	b.n	80097e4 <_strtod_l+0x9c>
 8009804:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009806:	b13a      	cbz	r2, 8009818 <_strtod_l+0xd0>
 8009808:	2135      	movs	r1, #53	; 0x35
 800980a:	a81c      	add	r0, sp, #112	; 0x70
 800980c:	f7ff ff34 	bl	8009678 <__copybits>
 8009810:	4620      	mov	r0, r4
 8009812:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009814:	f7ff fb18 	bl	8008e48 <_Bfree>
 8009818:	3f01      	subs	r7, #1
 800981a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800981c:	2f04      	cmp	r7, #4
 800981e:	d806      	bhi.n	800982e <_strtod_l+0xe6>
 8009820:	e8df f007 	tbb	[pc, r7]
 8009824:	201d0314 	.word	0x201d0314
 8009828:	14          	.byte	0x14
 8009829:	00          	.byte	0x00
 800982a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800982e:	05e9      	lsls	r1, r5, #23
 8009830:	bf48      	it	mi
 8009832:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009836:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800983a:	0d1b      	lsrs	r3, r3, #20
 800983c:	051b      	lsls	r3, r3, #20
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1bb      	bne.n	80097ba <_strtod_l+0x72>
 8009842:	f7fe fb0d 	bl	8007e60 <__errno>
 8009846:	2322      	movs	r3, #34	; 0x22
 8009848:	6003      	str	r3, [r0, #0]
 800984a:	e7b6      	b.n	80097ba <_strtod_l+0x72>
 800984c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009850:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8009854:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009858:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800985c:	e7e7      	b.n	800982e <_strtod_l+0xe6>
 800985e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80099d4 <_strtod_l+0x28c>
 8009862:	e7e4      	b.n	800982e <_strtod_l+0xe6>
 8009864:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009868:	f04f 38ff 	mov.w	r8, #4294967295
 800986c:	e7df      	b.n	800982e <_strtod_l+0xe6>
 800986e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009870:	1c5a      	adds	r2, r3, #1
 8009872:	9219      	str	r2, [sp, #100]	; 0x64
 8009874:	785b      	ldrb	r3, [r3, #1]
 8009876:	2b30      	cmp	r3, #48	; 0x30
 8009878:	d0f9      	beq.n	800986e <_strtod_l+0x126>
 800987a:	2b00      	cmp	r3, #0
 800987c:	d09d      	beq.n	80097ba <_strtod_l+0x72>
 800987e:	2301      	movs	r3, #1
 8009880:	f04f 0a00 	mov.w	sl, #0
 8009884:	220a      	movs	r2, #10
 8009886:	46d3      	mov	fp, sl
 8009888:	9305      	str	r3, [sp, #20]
 800988a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800988c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8009890:	930b      	str	r3, [sp, #44]	; 0x2c
 8009892:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009894:	7806      	ldrb	r6, [r0, #0]
 8009896:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800989a:	b2d9      	uxtb	r1, r3
 800989c:	2909      	cmp	r1, #9
 800989e:	d926      	bls.n	80098ee <_strtod_l+0x1a6>
 80098a0:	2201      	movs	r2, #1
 80098a2:	494d      	ldr	r1, [pc, #308]	; (80099d8 <_strtod_l+0x290>)
 80098a4:	f000 ffe6 	bl	800a874 <strncmp>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	d030      	beq.n	800990e <_strtod_l+0x1c6>
 80098ac:	2000      	movs	r0, #0
 80098ae:	4632      	mov	r2, r6
 80098b0:	4603      	mov	r3, r0
 80098b2:	465e      	mov	r6, fp
 80098b4:	9008      	str	r0, [sp, #32]
 80098b6:	2a65      	cmp	r2, #101	; 0x65
 80098b8:	d001      	beq.n	80098be <_strtod_l+0x176>
 80098ba:	2a45      	cmp	r2, #69	; 0x45
 80098bc:	d113      	bne.n	80098e6 <_strtod_l+0x19e>
 80098be:	b91e      	cbnz	r6, 80098c8 <_strtod_l+0x180>
 80098c0:	9a05      	ldr	r2, [sp, #20]
 80098c2:	4302      	orrs	r2, r0
 80098c4:	d094      	beq.n	80097f0 <_strtod_l+0xa8>
 80098c6:	2600      	movs	r6, #0
 80098c8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80098ca:	1c6a      	adds	r2, r5, #1
 80098cc:	9219      	str	r2, [sp, #100]	; 0x64
 80098ce:	786a      	ldrb	r2, [r5, #1]
 80098d0:	2a2b      	cmp	r2, #43	; 0x2b
 80098d2:	d074      	beq.n	80099be <_strtod_l+0x276>
 80098d4:	2a2d      	cmp	r2, #45	; 0x2d
 80098d6:	d078      	beq.n	80099ca <_strtod_l+0x282>
 80098d8:	f04f 0c00 	mov.w	ip, #0
 80098dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80098e0:	2909      	cmp	r1, #9
 80098e2:	d97f      	bls.n	80099e4 <_strtod_l+0x29c>
 80098e4:	9519      	str	r5, [sp, #100]	; 0x64
 80098e6:	2700      	movs	r7, #0
 80098e8:	e09e      	b.n	8009a28 <_strtod_l+0x2e0>
 80098ea:	2300      	movs	r3, #0
 80098ec:	e7c8      	b.n	8009880 <_strtod_l+0x138>
 80098ee:	f1bb 0f08 	cmp.w	fp, #8
 80098f2:	bfd8      	it	le
 80098f4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80098f6:	f100 0001 	add.w	r0, r0, #1
 80098fa:	bfd6      	itet	le
 80098fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8009900:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009904:	930a      	strle	r3, [sp, #40]	; 0x28
 8009906:	f10b 0b01 	add.w	fp, fp, #1
 800990a:	9019      	str	r0, [sp, #100]	; 0x64
 800990c:	e7c1      	b.n	8009892 <_strtod_l+0x14a>
 800990e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009910:	1c5a      	adds	r2, r3, #1
 8009912:	9219      	str	r2, [sp, #100]	; 0x64
 8009914:	785a      	ldrb	r2, [r3, #1]
 8009916:	f1bb 0f00 	cmp.w	fp, #0
 800991a:	d037      	beq.n	800998c <_strtod_l+0x244>
 800991c:	465e      	mov	r6, fp
 800991e:	9008      	str	r0, [sp, #32]
 8009920:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009924:	2b09      	cmp	r3, #9
 8009926:	d912      	bls.n	800994e <_strtod_l+0x206>
 8009928:	2301      	movs	r3, #1
 800992a:	e7c4      	b.n	80098b6 <_strtod_l+0x16e>
 800992c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800992e:	3001      	adds	r0, #1
 8009930:	1c5a      	adds	r2, r3, #1
 8009932:	9219      	str	r2, [sp, #100]	; 0x64
 8009934:	785a      	ldrb	r2, [r3, #1]
 8009936:	2a30      	cmp	r2, #48	; 0x30
 8009938:	d0f8      	beq.n	800992c <_strtod_l+0x1e4>
 800993a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800993e:	2b08      	cmp	r3, #8
 8009940:	f200 84e4 	bhi.w	800a30c <_strtod_l+0xbc4>
 8009944:	9008      	str	r0, [sp, #32]
 8009946:	2000      	movs	r0, #0
 8009948:	4606      	mov	r6, r0
 800994a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800994c:	930b      	str	r3, [sp, #44]	; 0x2c
 800994e:	3a30      	subs	r2, #48	; 0x30
 8009950:	f100 0301 	add.w	r3, r0, #1
 8009954:	d014      	beq.n	8009980 <_strtod_l+0x238>
 8009956:	9908      	ldr	r1, [sp, #32]
 8009958:	eb00 0c06 	add.w	ip, r0, r6
 800995c:	4419      	add	r1, r3
 800995e:	9108      	str	r1, [sp, #32]
 8009960:	4633      	mov	r3, r6
 8009962:	210a      	movs	r1, #10
 8009964:	4563      	cmp	r3, ip
 8009966:	d113      	bne.n	8009990 <_strtod_l+0x248>
 8009968:	1833      	adds	r3, r6, r0
 800996a:	2b08      	cmp	r3, #8
 800996c:	f106 0601 	add.w	r6, r6, #1
 8009970:	4406      	add	r6, r0
 8009972:	dc1a      	bgt.n	80099aa <_strtod_l+0x262>
 8009974:	230a      	movs	r3, #10
 8009976:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009978:	fb03 2301 	mla	r3, r3, r1, r2
 800997c:	930a      	str	r3, [sp, #40]	; 0x28
 800997e:	2300      	movs	r3, #0
 8009980:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009982:	4618      	mov	r0, r3
 8009984:	1c51      	adds	r1, r2, #1
 8009986:	9119      	str	r1, [sp, #100]	; 0x64
 8009988:	7852      	ldrb	r2, [r2, #1]
 800998a:	e7c9      	b.n	8009920 <_strtod_l+0x1d8>
 800998c:	4658      	mov	r0, fp
 800998e:	e7d2      	b.n	8009936 <_strtod_l+0x1ee>
 8009990:	2b08      	cmp	r3, #8
 8009992:	f103 0301 	add.w	r3, r3, #1
 8009996:	dc03      	bgt.n	80099a0 <_strtod_l+0x258>
 8009998:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800999a:	434f      	muls	r7, r1
 800999c:	970a      	str	r7, [sp, #40]	; 0x28
 800999e:	e7e1      	b.n	8009964 <_strtod_l+0x21c>
 80099a0:	2b10      	cmp	r3, #16
 80099a2:	bfd8      	it	le
 80099a4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80099a8:	e7dc      	b.n	8009964 <_strtod_l+0x21c>
 80099aa:	2e10      	cmp	r6, #16
 80099ac:	bfdc      	itt	le
 80099ae:	230a      	movle	r3, #10
 80099b0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80099b4:	e7e3      	b.n	800997e <_strtod_l+0x236>
 80099b6:	2300      	movs	r3, #0
 80099b8:	9308      	str	r3, [sp, #32]
 80099ba:	2301      	movs	r3, #1
 80099bc:	e780      	b.n	80098c0 <_strtod_l+0x178>
 80099be:	f04f 0c00 	mov.w	ip, #0
 80099c2:	1caa      	adds	r2, r5, #2
 80099c4:	9219      	str	r2, [sp, #100]	; 0x64
 80099c6:	78aa      	ldrb	r2, [r5, #2]
 80099c8:	e788      	b.n	80098dc <_strtod_l+0x194>
 80099ca:	f04f 0c01 	mov.w	ip, #1
 80099ce:	e7f8      	b.n	80099c2 <_strtod_l+0x27a>
 80099d0:	0800c080 	.word	0x0800c080
 80099d4:	7ff00000 	.word	0x7ff00000
 80099d8:	0800c07c 	.word	0x0800c07c
 80099dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80099de:	1c51      	adds	r1, r2, #1
 80099e0:	9119      	str	r1, [sp, #100]	; 0x64
 80099e2:	7852      	ldrb	r2, [r2, #1]
 80099e4:	2a30      	cmp	r2, #48	; 0x30
 80099e6:	d0f9      	beq.n	80099dc <_strtod_l+0x294>
 80099e8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80099ec:	2908      	cmp	r1, #8
 80099ee:	f63f af7a 	bhi.w	80098e6 <_strtod_l+0x19e>
 80099f2:	3a30      	subs	r2, #48	; 0x30
 80099f4:	9209      	str	r2, [sp, #36]	; 0x24
 80099f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80099f8:	920c      	str	r2, [sp, #48]	; 0x30
 80099fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80099fc:	1c57      	adds	r7, r2, #1
 80099fe:	9719      	str	r7, [sp, #100]	; 0x64
 8009a00:	7852      	ldrb	r2, [r2, #1]
 8009a02:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009a06:	f1be 0f09 	cmp.w	lr, #9
 8009a0a:	d938      	bls.n	8009a7e <_strtod_l+0x336>
 8009a0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a0e:	1a7f      	subs	r7, r7, r1
 8009a10:	2f08      	cmp	r7, #8
 8009a12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009a16:	dc03      	bgt.n	8009a20 <_strtod_l+0x2d8>
 8009a18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a1a:	428f      	cmp	r7, r1
 8009a1c:	bfa8      	it	ge
 8009a1e:	460f      	movge	r7, r1
 8009a20:	f1bc 0f00 	cmp.w	ip, #0
 8009a24:	d000      	beq.n	8009a28 <_strtod_l+0x2e0>
 8009a26:	427f      	negs	r7, r7
 8009a28:	2e00      	cmp	r6, #0
 8009a2a:	d14f      	bne.n	8009acc <_strtod_l+0x384>
 8009a2c:	9905      	ldr	r1, [sp, #20]
 8009a2e:	4301      	orrs	r1, r0
 8009a30:	f47f aec3 	bne.w	80097ba <_strtod_l+0x72>
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f47f aedb 	bne.w	80097f0 <_strtod_l+0xa8>
 8009a3a:	2a69      	cmp	r2, #105	; 0x69
 8009a3c:	d029      	beq.n	8009a92 <_strtod_l+0x34a>
 8009a3e:	dc26      	bgt.n	8009a8e <_strtod_l+0x346>
 8009a40:	2a49      	cmp	r2, #73	; 0x49
 8009a42:	d026      	beq.n	8009a92 <_strtod_l+0x34a>
 8009a44:	2a4e      	cmp	r2, #78	; 0x4e
 8009a46:	f47f aed3 	bne.w	80097f0 <_strtod_l+0xa8>
 8009a4a:	499a      	ldr	r1, [pc, #616]	; (8009cb4 <_strtod_l+0x56c>)
 8009a4c:	a819      	add	r0, sp, #100	; 0x64
 8009a4e:	f001 fa23 	bl	800ae98 <__match>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	f43f aecc 	beq.w	80097f0 <_strtod_l+0xa8>
 8009a58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	2b28      	cmp	r3, #40	; 0x28
 8009a5e:	d12f      	bne.n	8009ac0 <_strtod_l+0x378>
 8009a60:	4995      	ldr	r1, [pc, #596]	; (8009cb8 <_strtod_l+0x570>)
 8009a62:	aa1c      	add	r2, sp, #112	; 0x70
 8009a64:	a819      	add	r0, sp, #100	; 0x64
 8009a66:	f001 fa2b 	bl	800aec0 <__hexnan>
 8009a6a:	2805      	cmp	r0, #5
 8009a6c:	d128      	bne.n	8009ac0 <_strtod_l+0x378>
 8009a6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a70:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8009a74:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009a78:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009a7c:	e69d      	b.n	80097ba <_strtod_l+0x72>
 8009a7e:	210a      	movs	r1, #10
 8009a80:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009a82:	fb01 2107 	mla	r1, r1, r7, r2
 8009a86:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009a8a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a8c:	e7b5      	b.n	80099fa <_strtod_l+0x2b2>
 8009a8e:	2a6e      	cmp	r2, #110	; 0x6e
 8009a90:	e7d9      	b.n	8009a46 <_strtod_l+0x2fe>
 8009a92:	498a      	ldr	r1, [pc, #552]	; (8009cbc <_strtod_l+0x574>)
 8009a94:	a819      	add	r0, sp, #100	; 0x64
 8009a96:	f001 f9ff 	bl	800ae98 <__match>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	f43f aea8 	beq.w	80097f0 <_strtod_l+0xa8>
 8009aa0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009aa2:	4987      	ldr	r1, [pc, #540]	; (8009cc0 <_strtod_l+0x578>)
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	a819      	add	r0, sp, #100	; 0x64
 8009aa8:	9319      	str	r3, [sp, #100]	; 0x64
 8009aaa:	f001 f9f5 	bl	800ae98 <__match>
 8009aae:	b910      	cbnz	r0, 8009ab6 <_strtod_l+0x36e>
 8009ab0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	9319      	str	r3, [sp, #100]	; 0x64
 8009ab6:	f04f 0800 	mov.w	r8, #0
 8009aba:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8009cc4 <_strtod_l+0x57c>
 8009abe:	e67c      	b.n	80097ba <_strtod_l+0x72>
 8009ac0:	4881      	ldr	r0, [pc, #516]	; (8009cc8 <_strtod_l+0x580>)
 8009ac2:	f000 ff07 	bl	800a8d4 <nan>
 8009ac6:	4680      	mov	r8, r0
 8009ac8:	4689      	mov	r9, r1
 8009aca:	e676      	b.n	80097ba <_strtod_l+0x72>
 8009acc:	9b08      	ldr	r3, [sp, #32]
 8009ace:	f1bb 0f00 	cmp.w	fp, #0
 8009ad2:	bf08      	it	eq
 8009ad4:	46b3      	moveq	fp, r6
 8009ad6:	1afb      	subs	r3, r7, r3
 8009ad8:	2e10      	cmp	r6, #16
 8009ada:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009adc:	4635      	mov	r5, r6
 8009ade:	9309      	str	r3, [sp, #36]	; 0x24
 8009ae0:	bfa8      	it	ge
 8009ae2:	2510      	movge	r5, #16
 8009ae4:	f7f6 fc7e 	bl	80003e4 <__aeabi_ui2d>
 8009ae8:	2e09      	cmp	r6, #9
 8009aea:	4680      	mov	r8, r0
 8009aec:	4689      	mov	r9, r1
 8009aee:	dd13      	ble.n	8009b18 <_strtod_l+0x3d0>
 8009af0:	4b76      	ldr	r3, [pc, #472]	; (8009ccc <_strtod_l+0x584>)
 8009af2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009af6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009afa:	f7f6 fced 	bl	80004d8 <__aeabi_dmul>
 8009afe:	4680      	mov	r8, r0
 8009b00:	4650      	mov	r0, sl
 8009b02:	4689      	mov	r9, r1
 8009b04:	f7f6 fc6e 	bl	80003e4 <__aeabi_ui2d>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	4640      	mov	r0, r8
 8009b0e:	4649      	mov	r1, r9
 8009b10:	f7f6 fb2c 	bl	800016c <__adddf3>
 8009b14:	4680      	mov	r8, r0
 8009b16:	4689      	mov	r9, r1
 8009b18:	2e0f      	cmp	r6, #15
 8009b1a:	dc36      	bgt.n	8009b8a <_strtod_l+0x442>
 8009b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	f43f ae4b 	beq.w	80097ba <_strtod_l+0x72>
 8009b24:	dd22      	ble.n	8009b6c <_strtod_l+0x424>
 8009b26:	2b16      	cmp	r3, #22
 8009b28:	dc09      	bgt.n	8009b3e <_strtod_l+0x3f6>
 8009b2a:	4968      	ldr	r1, [pc, #416]	; (8009ccc <_strtod_l+0x584>)
 8009b2c:	4642      	mov	r2, r8
 8009b2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b32:	464b      	mov	r3, r9
 8009b34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b38:	f7f6 fcce 	bl	80004d8 <__aeabi_dmul>
 8009b3c:	e7c3      	b.n	8009ac6 <_strtod_l+0x37e>
 8009b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b40:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009b44:	4293      	cmp	r3, r2
 8009b46:	db20      	blt.n	8009b8a <_strtod_l+0x442>
 8009b48:	4c60      	ldr	r4, [pc, #384]	; (8009ccc <_strtod_l+0x584>)
 8009b4a:	f1c6 060f 	rsb	r6, r6, #15
 8009b4e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009b52:	4642      	mov	r2, r8
 8009b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b58:	464b      	mov	r3, r9
 8009b5a:	f7f6 fcbd 	bl	80004d8 <__aeabi_dmul>
 8009b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b60:	1b9e      	subs	r6, r3, r6
 8009b62:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009b66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009b6a:	e7e5      	b.n	8009b38 <_strtod_l+0x3f0>
 8009b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b6e:	3316      	adds	r3, #22
 8009b70:	db0b      	blt.n	8009b8a <_strtod_l+0x442>
 8009b72:	9b08      	ldr	r3, [sp, #32]
 8009b74:	4640      	mov	r0, r8
 8009b76:	1bdf      	subs	r7, r3, r7
 8009b78:	4b54      	ldr	r3, [pc, #336]	; (8009ccc <_strtod_l+0x584>)
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009b80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b84:	f7f6 fdd2 	bl	800072c <__aeabi_ddiv>
 8009b88:	e79d      	b.n	8009ac6 <_strtod_l+0x37e>
 8009b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8c:	1b75      	subs	r5, r6, r5
 8009b8e:	441d      	add	r5, r3
 8009b90:	2d00      	cmp	r5, #0
 8009b92:	dd70      	ble.n	8009c76 <_strtod_l+0x52e>
 8009b94:	f015 030f 	ands.w	r3, r5, #15
 8009b98:	d00a      	beq.n	8009bb0 <_strtod_l+0x468>
 8009b9a:	494c      	ldr	r1, [pc, #304]	; (8009ccc <_strtod_l+0x584>)
 8009b9c:	4642      	mov	r2, r8
 8009b9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ba2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ba6:	464b      	mov	r3, r9
 8009ba8:	f7f6 fc96 	bl	80004d8 <__aeabi_dmul>
 8009bac:	4680      	mov	r8, r0
 8009bae:	4689      	mov	r9, r1
 8009bb0:	f035 050f 	bics.w	r5, r5, #15
 8009bb4:	d04d      	beq.n	8009c52 <_strtod_l+0x50a>
 8009bb6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009bba:	dd22      	ble.n	8009c02 <_strtod_l+0x4ba>
 8009bbc:	2600      	movs	r6, #0
 8009bbe:	46b3      	mov	fp, r6
 8009bc0:	960b      	str	r6, [sp, #44]	; 0x2c
 8009bc2:	9608      	str	r6, [sp, #32]
 8009bc4:	2322      	movs	r3, #34	; 0x22
 8009bc6:	f04f 0800 	mov.w	r8, #0
 8009bca:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8009cc4 <_strtod_l+0x57c>
 8009bce:	6023      	str	r3, [r4, #0]
 8009bd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f43f adf1 	beq.w	80097ba <_strtod_l+0x72>
 8009bd8:	4620      	mov	r0, r4
 8009bda:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009bdc:	f7ff f934 	bl	8008e48 <_Bfree>
 8009be0:	4620      	mov	r0, r4
 8009be2:	9908      	ldr	r1, [sp, #32]
 8009be4:	f7ff f930 	bl	8008e48 <_Bfree>
 8009be8:	4659      	mov	r1, fp
 8009bea:	4620      	mov	r0, r4
 8009bec:	f7ff f92c 	bl	8008e48 <_Bfree>
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bf4:	f7ff f928 	bl	8008e48 <_Bfree>
 8009bf8:	4631      	mov	r1, r6
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f7ff f924 	bl	8008e48 <_Bfree>
 8009c00:	e5db      	b.n	80097ba <_strtod_l+0x72>
 8009c02:	4b33      	ldr	r3, [pc, #204]	; (8009cd0 <_strtod_l+0x588>)
 8009c04:	4640      	mov	r0, r8
 8009c06:	9305      	str	r3, [sp, #20]
 8009c08:	2300      	movs	r3, #0
 8009c0a:	4649      	mov	r1, r9
 8009c0c:	469a      	mov	sl, r3
 8009c0e:	112d      	asrs	r5, r5, #4
 8009c10:	2d01      	cmp	r5, #1
 8009c12:	dc21      	bgt.n	8009c58 <_strtod_l+0x510>
 8009c14:	b10b      	cbz	r3, 8009c1a <_strtod_l+0x4d2>
 8009c16:	4680      	mov	r8, r0
 8009c18:	4689      	mov	r9, r1
 8009c1a:	492d      	ldr	r1, [pc, #180]	; (8009cd0 <_strtod_l+0x588>)
 8009c1c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009c20:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009c24:	4642      	mov	r2, r8
 8009c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c2a:	464b      	mov	r3, r9
 8009c2c:	f7f6 fc54 	bl	80004d8 <__aeabi_dmul>
 8009c30:	4b24      	ldr	r3, [pc, #144]	; (8009cc4 <_strtod_l+0x57c>)
 8009c32:	460a      	mov	r2, r1
 8009c34:	400b      	ands	r3, r1
 8009c36:	4927      	ldr	r1, [pc, #156]	; (8009cd4 <_strtod_l+0x58c>)
 8009c38:	4680      	mov	r8, r0
 8009c3a:	428b      	cmp	r3, r1
 8009c3c:	d8be      	bhi.n	8009bbc <_strtod_l+0x474>
 8009c3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009c42:	428b      	cmp	r3, r1
 8009c44:	bf86      	itte	hi
 8009c46:	f04f 38ff 	movhi.w	r8, #4294967295
 8009c4a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009cd8 <_strtod_l+0x590>
 8009c4e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009c52:	2300      	movs	r3, #0
 8009c54:	9305      	str	r3, [sp, #20]
 8009c56:	e07b      	b.n	8009d50 <_strtod_l+0x608>
 8009c58:	07ea      	lsls	r2, r5, #31
 8009c5a:	d505      	bpl.n	8009c68 <_strtod_l+0x520>
 8009c5c:	9b05      	ldr	r3, [sp, #20]
 8009c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c62:	f7f6 fc39 	bl	80004d8 <__aeabi_dmul>
 8009c66:	2301      	movs	r3, #1
 8009c68:	9a05      	ldr	r2, [sp, #20]
 8009c6a:	f10a 0a01 	add.w	sl, sl, #1
 8009c6e:	3208      	adds	r2, #8
 8009c70:	106d      	asrs	r5, r5, #1
 8009c72:	9205      	str	r2, [sp, #20]
 8009c74:	e7cc      	b.n	8009c10 <_strtod_l+0x4c8>
 8009c76:	d0ec      	beq.n	8009c52 <_strtod_l+0x50a>
 8009c78:	426d      	negs	r5, r5
 8009c7a:	f015 020f 	ands.w	r2, r5, #15
 8009c7e:	d00a      	beq.n	8009c96 <_strtod_l+0x54e>
 8009c80:	4b12      	ldr	r3, [pc, #72]	; (8009ccc <_strtod_l+0x584>)
 8009c82:	4640      	mov	r0, r8
 8009c84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c88:	4649      	mov	r1, r9
 8009c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8e:	f7f6 fd4d 	bl	800072c <__aeabi_ddiv>
 8009c92:	4680      	mov	r8, r0
 8009c94:	4689      	mov	r9, r1
 8009c96:	112d      	asrs	r5, r5, #4
 8009c98:	d0db      	beq.n	8009c52 <_strtod_l+0x50a>
 8009c9a:	2d1f      	cmp	r5, #31
 8009c9c:	dd1e      	ble.n	8009cdc <_strtod_l+0x594>
 8009c9e:	2600      	movs	r6, #0
 8009ca0:	46b3      	mov	fp, r6
 8009ca2:	960b      	str	r6, [sp, #44]	; 0x2c
 8009ca4:	9608      	str	r6, [sp, #32]
 8009ca6:	2322      	movs	r3, #34	; 0x22
 8009ca8:	f04f 0800 	mov.w	r8, #0
 8009cac:	f04f 0900 	mov.w	r9, #0
 8009cb0:	6023      	str	r3, [r4, #0]
 8009cb2:	e78d      	b.n	8009bd0 <_strtod_l+0x488>
 8009cb4:	0800be6b 	.word	0x0800be6b
 8009cb8:	0800c094 	.word	0x0800c094
 8009cbc:	0800be63 	.word	0x0800be63
 8009cc0:	0800be9a 	.word	0x0800be9a
 8009cc4:	7ff00000 	.word	0x7ff00000
 8009cc8:	0800c225 	.word	0x0800c225
 8009ccc:	0800bfa8 	.word	0x0800bfa8
 8009cd0:	0800bf80 	.word	0x0800bf80
 8009cd4:	7ca00000 	.word	0x7ca00000
 8009cd8:	7fefffff 	.word	0x7fefffff
 8009cdc:	f015 0310 	ands.w	r3, r5, #16
 8009ce0:	bf18      	it	ne
 8009ce2:	236a      	movne	r3, #106	; 0x6a
 8009ce4:	4640      	mov	r0, r8
 8009ce6:	9305      	str	r3, [sp, #20]
 8009ce8:	4649      	mov	r1, r9
 8009cea:	2300      	movs	r3, #0
 8009cec:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8009fb8 <_strtod_l+0x870>
 8009cf0:	07ea      	lsls	r2, r5, #31
 8009cf2:	d504      	bpl.n	8009cfe <_strtod_l+0x5b6>
 8009cf4:	e9da 2300 	ldrd	r2, r3, [sl]
 8009cf8:	f7f6 fbee 	bl	80004d8 <__aeabi_dmul>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	106d      	asrs	r5, r5, #1
 8009d00:	f10a 0a08 	add.w	sl, sl, #8
 8009d04:	d1f4      	bne.n	8009cf0 <_strtod_l+0x5a8>
 8009d06:	b10b      	cbz	r3, 8009d0c <_strtod_l+0x5c4>
 8009d08:	4680      	mov	r8, r0
 8009d0a:	4689      	mov	r9, r1
 8009d0c:	9b05      	ldr	r3, [sp, #20]
 8009d0e:	b1bb      	cbz	r3, 8009d40 <_strtod_l+0x5f8>
 8009d10:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009d14:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	4649      	mov	r1, r9
 8009d1c:	dd10      	ble.n	8009d40 <_strtod_l+0x5f8>
 8009d1e:	2b1f      	cmp	r3, #31
 8009d20:	f340 8128 	ble.w	8009f74 <_strtod_l+0x82c>
 8009d24:	2b34      	cmp	r3, #52	; 0x34
 8009d26:	bfd8      	it	le
 8009d28:	f04f 33ff 	movle.w	r3, #4294967295
 8009d2c:	f04f 0800 	mov.w	r8, #0
 8009d30:	bfcf      	iteee	gt
 8009d32:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009d36:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009d3a:	4093      	lslle	r3, r2
 8009d3c:	ea03 0901 	andle.w	r9, r3, r1
 8009d40:	2200      	movs	r2, #0
 8009d42:	2300      	movs	r3, #0
 8009d44:	4640      	mov	r0, r8
 8009d46:	4649      	mov	r1, r9
 8009d48:	f7f6 fe2e 	bl	80009a8 <__aeabi_dcmpeq>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d1a6      	bne.n	8009c9e <_strtod_l+0x556>
 8009d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d52:	465a      	mov	r2, fp
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	4620      	mov	r0, r4
 8009d58:	4633      	mov	r3, r6
 8009d5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d5c:	f7ff f8dc 	bl	8008f18 <__s2b>
 8009d60:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d62:	2800      	cmp	r0, #0
 8009d64:	f43f af2a 	beq.w	8009bbc <_strtod_l+0x474>
 8009d68:	2600      	movs	r6, #0
 8009d6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d6c:	9b08      	ldr	r3, [sp, #32]
 8009d6e:	2a00      	cmp	r2, #0
 8009d70:	eba3 0307 	sub.w	r3, r3, r7
 8009d74:	bfa8      	it	ge
 8009d76:	2300      	movge	r3, #0
 8009d78:	46b3      	mov	fp, r6
 8009d7a:	9312      	str	r3, [sp, #72]	; 0x48
 8009d7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009d80:	9316      	str	r3, [sp, #88]	; 0x58
 8009d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d84:	4620      	mov	r0, r4
 8009d86:	6859      	ldr	r1, [r3, #4]
 8009d88:	f7ff f81e 	bl	8008dc8 <_Balloc>
 8009d8c:	9008      	str	r0, [sp, #32]
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	f43f af18 	beq.w	8009bc4 <_strtod_l+0x47c>
 8009d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d96:	300c      	adds	r0, #12
 8009d98:	691a      	ldr	r2, [r3, #16]
 8009d9a:	f103 010c 	add.w	r1, r3, #12
 8009d9e:	3202      	adds	r2, #2
 8009da0:	0092      	lsls	r2, r2, #2
 8009da2:	f000 fd89 	bl	800a8b8 <memcpy>
 8009da6:	ab1c      	add	r3, sp, #112	; 0x70
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	ab1b      	add	r3, sp, #108	; 0x6c
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	4642      	mov	r2, r8
 8009db0:	464b      	mov	r3, r9
 8009db2:	4620      	mov	r0, r4
 8009db4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8009db8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8009dbc:	f7ff fbd8 	bl	8009570 <__d2b>
 8009dc0:	901a      	str	r0, [sp, #104]	; 0x68
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	f43f aefe 	beq.w	8009bc4 <_strtod_l+0x47c>
 8009dc8:	2101      	movs	r1, #1
 8009dca:	4620      	mov	r0, r4
 8009dcc:	f7ff f93c 	bl	8009048 <__i2b>
 8009dd0:	4683      	mov	fp, r0
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	f43f aef6 	beq.w	8009bc4 <_strtod_l+0x47c>
 8009dd8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009dda:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009ddc:	2f00      	cmp	r7, #0
 8009dde:	bfab      	itete	ge
 8009de0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8009de2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009de4:	eb07 0a03 	addge.w	sl, r7, r3
 8009de8:	1bdd      	sublt	r5, r3, r7
 8009dea:	9b05      	ldr	r3, [sp, #20]
 8009dec:	bfa8      	it	ge
 8009dee:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009df0:	eba7 0703 	sub.w	r7, r7, r3
 8009df4:	4417      	add	r7, r2
 8009df6:	4b71      	ldr	r3, [pc, #452]	; (8009fbc <_strtod_l+0x874>)
 8009df8:	f107 37ff 	add.w	r7, r7, #4294967295
 8009dfc:	bfb8      	it	lt
 8009dfe:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8009e02:	429f      	cmp	r7, r3
 8009e04:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009e08:	f280 80c7 	bge.w	8009f9a <_strtod_l+0x852>
 8009e0c:	1bdb      	subs	r3, r3, r7
 8009e0e:	2b1f      	cmp	r3, #31
 8009e10:	f04f 0101 	mov.w	r1, #1
 8009e14:	eba2 0203 	sub.w	r2, r2, r3
 8009e18:	f300 80b3 	bgt.w	8009f82 <_strtod_l+0x83a>
 8009e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e20:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e22:	2300      	movs	r3, #0
 8009e24:	9310      	str	r3, [sp, #64]	; 0x40
 8009e26:	eb0a 0702 	add.w	r7, sl, r2
 8009e2a:	9b05      	ldr	r3, [sp, #20]
 8009e2c:	45ba      	cmp	sl, r7
 8009e2e:	4415      	add	r5, r2
 8009e30:	441d      	add	r5, r3
 8009e32:	4653      	mov	r3, sl
 8009e34:	bfa8      	it	ge
 8009e36:	463b      	movge	r3, r7
 8009e38:	42ab      	cmp	r3, r5
 8009e3a:	bfa8      	it	ge
 8009e3c:	462b      	movge	r3, r5
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	bfc2      	ittt	gt
 8009e42:	1aff      	subgt	r7, r7, r3
 8009e44:	1aed      	subgt	r5, r5, r3
 8009e46:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009e4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	dd17      	ble.n	8009e80 <_strtod_l+0x738>
 8009e50:	4659      	mov	r1, fp
 8009e52:	461a      	mov	r2, r3
 8009e54:	4620      	mov	r0, r4
 8009e56:	f7ff f9b5 	bl	80091c4 <__pow5mult>
 8009e5a:	4683      	mov	fp, r0
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	f43f aeb1 	beq.w	8009bc4 <_strtod_l+0x47c>
 8009e62:	4601      	mov	r1, r0
 8009e64:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009e66:	4620      	mov	r0, r4
 8009e68:	f7ff f904 	bl	8009074 <__multiply>
 8009e6c:	900a      	str	r0, [sp, #40]	; 0x28
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	f43f aea8 	beq.w	8009bc4 <_strtod_l+0x47c>
 8009e74:	4620      	mov	r0, r4
 8009e76:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009e78:	f7fe ffe6 	bl	8008e48 <_Bfree>
 8009e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e7e:	931a      	str	r3, [sp, #104]	; 0x68
 8009e80:	2f00      	cmp	r7, #0
 8009e82:	f300 808f 	bgt.w	8009fa4 <_strtod_l+0x85c>
 8009e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	dd08      	ble.n	8009e9e <_strtod_l+0x756>
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009e90:	9908      	ldr	r1, [sp, #32]
 8009e92:	f7ff f997 	bl	80091c4 <__pow5mult>
 8009e96:	9008      	str	r0, [sp, #32]
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	f43f ae93 	beq.w	8009bc4 <_strtod_l+0x47c>
 8009e9e:	2d00      	cmp	r5, #0
 8009ea0:	dd08      	ble.n	8009eb4 <_strtod_l+0x76c>
 8009ea2:	462a      	mov	r2, r5
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	9908      	ldr	r1, [sp, #32]
 8009ea8:	f7ff f9e6 	bl	8009278 <__lshift>
 8009eac:	9008      	str	r0, [sp, #32]
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	f43f ae88 	beq.w	8009bc4 <_strtod_l+0x47c>
 8009eb4:	f1ba 0f00 	cmp.w	sl, #0
 8009eb8:	dd08      	ble.n	8009ecc <_strtod_l+0x784>
 8009eba:	4659      	mov	r1, fp
 8009ebc:	4652      	mov	r2, sl
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	f7ff f9da 	bl	8009278 <__lshift>
 8009ec4:	4683      	mov	fp, r0
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	f43f ae7c 	beq.w	8009bc4 <_strtod_l+0x47c>
 8009ecc:	4620      	mov	r0, r4
 8009ece:	9a08      	ldr	r2, [sp, #32]
 8009ed0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009ed2:	f7ff fa59 	bl	8009388 <__mdiff>
 8009ed6:	4606      	mov	r6, r0
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	f43f ae73 	beq.w	8009bc4 <_strtod_l+0x47c>
 8009ede:	2500      	movs	r5, #0
 8009ee0:	68c3      	ldr	r3, [r0, #12]
 8009ee2:	4659      	mov	r1, fp
 8009ee4:	60c5      	str	r5, [r0, #12]
 8009ee6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ee8:	f7ff fa32 	bl	8009350 <__mcmp>
 8009eec:	42a8      	cmp	r0, r5
 8009eee:	da6b      	bge.n	8009fc8 <_strtod_l+0x880>
 8009ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ef2:	ea53 0308 	orrs.w	r3, r3, r8
 8009ef6:	f040 808f 	bne.w	800a018 <_strtod_l+0x8d0>
 8009efa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f040 808a 	bne.w	800a018 <_strtod_l+0x8d0>
 8009f04:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f08:	0d1b      	lsrs	r3, r3, #20
 8009f0a:	051b      	lsls	r3, r3, #20
 8009f0c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009f10:	f240 8082 	bls.w	800a018 <_strtod_l+0x8d0>
 8009f14:	6973      	ldr	r3, [r6, #20]
 8009f16:	b913      	cbnz	r3, 8009f1e <_strtod_l+0x7d6>
 8009f18:	6933      	ldr	r3, [r6, #16]
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	dd7c      	ble.n	800a018 <_strtod_l+0x8d0>
 8009f1e:	4631      	mov	r1, r6
 8009f20:	2201      	movs	r2, #1
 8009f22:	4620      	mov	r0, r4
 8009f24:	f7ff f9a8 	bl	8009278 <__lshift>
 8009f28:	4659      	mov	r1, fp
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	f7ff fa10 	bl	8009350 <__mcmp>
 8009f30:	2800      	cmp	r0, #0
 8009f32:	dd71      	ble.n	800a018 <_strtod_l+0x8d0>
 8009f34:	9905      	ldr	r1, [sp, #20]
 8009f36:	464b      	mov	r3, r9
 8009f38:	4a21      	ldr	r2, [pc, #132]	; (8009fc0 <_strtod_l+0x878>)
 8009f3a:	2900      	cmp	r1, #0
 8009f3c:	f000 808d 	beq.w	800a05a <_strtod_l+0x912>
 8009f40:	ea02 0109 	and.w	r1, r2, r9
 8009f44:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009f48:	f300 8087 	bgt.w	800a05a <_strtod_l+0x912>
 8009f4c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009f50:	f77f aea9 	ble.w	8009ca6 <_strtod_l+0x55e>
 8009f54:	4640      	mov	r0, r8
 8009f56:	4649      	mov	r1, r9
 8009f58:	4b1a      	ldr	r3, [pc, #104]	; (8009fc4 <_strtod_l+0x87c>)
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f7f6 fabc 	bl	80004d8 <__aeabi_dmul>
 8009f60:	4b17      	ldr	r3, [pc, #92]	; (8009fc0 <_strtod_l+0x878>)
 8009f62:	4680      	mov	r8, r0
 8009f64:	400b      	ands	r3, r1
 8009f66:	4689      	mov	r9, r1
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f47f ae35 	bne.w	8009bd8 <_strtod_l+0x490>
 8009f6e:	2322      	movs	r3, #34	; 0x22
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	e631      	b.n	8009bd8 <_strtod_l+0x490>
 8009f74:	f04f 32ff 	mov.w	r2, #4294967295
 8009f78:	fa02 f303 	lsl.w	r3, r2, r3
 8009f7c:	ea03 0808 	and.w	r8, r3, r8
 8009f80:	e6de      	b.n	8009d40 <_strtod_l+0x5f8>
 8009f82:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8009f86:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8009f8a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8009f8e:	37e2      	adds	r7, #226	; 0xe2
 8009f90:	fa01 f307 	lsl.w	r3, r1, r7
 8009f94:	9310      	str	r3, [sp, #64]	; 0x40
 8009f96:	9113      	str	r1, [sp, #76]	; 0x4c
 8009f98:	e745      	b.n	8009e26 <_strtod_l+0x6de>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	9310      	str	r3, [sp, #64]	; 0x40
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	9313      	str	r3, [sp, #76]	; 0x4c
 8009fa2:	e740      	b.n	8009e26 <_strtod_l+0x6de>
 8009fa4:	463a      	mov	r2, r7
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009faa:	f7ff f965 	bl	8009278 <__lshift>
 8009fae:	901a      	str	r0, [sp, #104]	; 0x68
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	f47f af68 	bne.w	8009e86 <_strtod_l+0x73e>
 8009fb6:	e605      	b.n	8009bc4 <_strtod_l+0x47c>
 8009fb8:	0800c0a8 	.word	0x0800c0a8
 8009fbc:	fffffc02 	.word	0xfffffc02
 8009fc0:	7ff00000 	.word	0x7ff00000
 8009fc4:	39500000 	.word	0x39500000
 8009fc8:	46ca      	mov	sl, r9
 8009fca:	d165      	bne.n	800a098 <_strtod_l+0x950>
 8009fcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fd2:	b352      	cbz	r2, 800a02a <_strtod_l+0x8e2>
 8009fd4:	4a9e      	ldr	r2, [pc, #632]	; (800a250 <_strtod_l+0xb08>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d12a      	bne.n	800a030 <_strtod_l+0x8e8>
 8009fda:	9b05      	ldr	r3, [sp, #20]
 8009fdc:	4641      	mov	r1, r8
 8009fde:	b1fb      	cbz	r3, 800a020 <_strtod_l+0x8d8>
 8009fe0:	4b9c      	ldr	r3, [pc, #624]	; (800a254 <_strtod_l+0xb0c>)
 8009fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe6:	ea09 0303 	and.w	r3, r9, r3
 8009fea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009fee:	d81a      	bhi.n	800a026 <_strtod_l+0x8de>
 8009ff0:	0d1b      	lsrs	r3, r3, #20
 8009ff2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8009ffa:	4299      	cmp	r1, r3
 8009ffc:	d118      	bne.n	800a030 <_strtod_l+0x8e8>
 8009ffe:	4b96      	ldr	r3, [pc, #600]	; (800a258 <_strtod_l+0xb10>)
 800a000:	459a      	cmp	sl, r3
 800a002:	d102      	bne.n	800a00a <_strtod_l+0x8c2>
 800a004:	3101      	adds	r1, #1
 800a006:	f43f addd 	beq.w	8009bc4 <_strtod_l+0x47c>
 800a00a:	f04f 0800 	mov.w	r8, #0
 800a00e:	4b91      	ldr	r3, [pc, #580]	; (800a254 <_strtod_l+0xb0c>)
 800a010:	ea0a 0303 	and.w	r3, sl, r3
 800a014:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a018:	9b05      	ldr	r3, [sp, #20]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d19a      	bne.n	8009f54 <_strtod_l+0x80c>
 800a01e:	e5db      	b.n	8009bd8 <_strtod_l+0x490>
 800a020:	f04f 33ff 	mov.w	r3, #4294967295
 800a024:	e7e9      	b.n	8009ffa <_strtod_l+0x8b2>
 800a026:	4613      	mov	r3, r2
 800a028:	e7e7      	b.n	8009ffa <_strtod_l+0x8b2>
 800a02a:	ea53 0308 	orrs.w	r3, r3, r8
 800a02e:	d081      	beq.n	8009f34 <_strtod_l+0x7ec>
 800a030:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a032:	b1e3      	cbz	r3, 800a06e <_strtod_l+0x926>
 800a034:	ea13 0f0a 	tst.w	r3, sl
 800a038:	d0ee      	beq.n	800a018 <_strtod_l+0x8d0>
 800a03a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a03c:	4640      	mov	r0, r8
 800a03e:	4649      	mov	r1, r9
 800a040:	9a05      	ldr	r2, [sp, #20]
 800a042:	b1c3      	cbz	r3, 800a076 <_strtod_l+0x92e>
 800a044:	f7ff fb5c 	bl	8009700 <sulp>
 800a048:	4602      	mov	r2, r0
 800a04a:	460b      	mov	r3, r1
 800a04c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a04e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a050:	f7f6 f88c 	bl	800016c <__adddf3>
 800a054:	4680      	mov	r8, r0
 800a056:	4689      	mov	r9, r1
 800a058:	e7de      	b.n	800a018 <_strtod_l+0x8d0>
 800a05a:	4013      	ands	r3, r2
 800a05c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a060:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a064:	f04f 38ff 	mov.w	r8, #4294967295
 800a068:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a06c:	e7d4      	b.n	800a018 <_strtod_l+0x8d0>
 800a06e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a070:	ea13 0f08 	tst.w	r3, r8
 800a074:	e7e0      	b.n	800a038 <_strtod_l+0x8f0>
 800a076:	f7ff fb43 	bl	8009700 <sulp>
 800a07a:	4602      	mov	r2, r0
 800a07c:	460b      	mov	r3, r1
 800a07e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a080:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a082:	f7f6 f871 	bl	8000168 <__aeabi_dsub>
 800a086:	2200      	movs	r2, #0
 800a088:	2300      	movs	r3, #0
 800a08a:	4680      	mov	r8, r0
 800a08c:	4689      	mov	r9, r1
 800a08e:	f7f6 fc8b 	bl	80009a8 <__aeabi_dcmpeq>
 800a092:	2800      	cmp	r0, #0
 800a094:	d0c0      	beq.n	800a018 <_strtod_l+0x8d0>
 800a096:	e606      	b.n	8009ca6 <_strtod_l+0x55e>
 800a098:	4659      	mov	r1, fp
 800a09a:	4630      	mov	r0, r6
 800a09c:	f7ff fabe 	bl	800961c <__ratio>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a0ae:	f7f6 fc8f 	bl	80009d0 <__aeabi_dcmple>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d06f      	beq.n	800a196 <_strtod_l+0xa4e>
 800a0b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d17c      	bne.n	800a1b6 <_strtod_l+0xa6e>
 800a0bc:	f1b8 0f00 	cmp.w	r8, #0
 800a0c0:	d159      	bne.n	800a176 <_strtod_l+0xa2e>
 800a0c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d17b      	bne.n	800a1c2 <_strtod_l+0xa7a>
 800a0ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	4b62      	ldr	r3, [pc, #392]	; (800a25c <_strtod_l+0xb14>)
 800a0d2:	f7f6 fc73 	bl	80009bc <__aeabi_dcmplt>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d15a      	bne.n	800a190 <_strtod_l+0xa48>
 800a0da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0de:	2200      	movs	r2, #0
 800a0e0:	4b5f      	ldr	r3, [pc, #380]	; (800a260 <_strtod_l+0xb18>)
 800a0e2:	f7f6 f9f9 	bl	80004d8 <__aeabi_dmul>
 800a0e6:	4605      	mov	r5, r0
 800a0e8:	460f      	mov	r7, r1
 800a0ea:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a0ee:	9506      	str	r5, [sp, #24]
 800a0f0:	9307      	str	r3, [sp, #28]
 800a0f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0f6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a0fa:	4b56      	ldr	r3, [pc, #344]	; (800a254 <_strtod_l+0xb0c>)
 800a0fc:	4a55      	ldr	r2, [pc, #340]	; (800a254 <_strtod_l+0xb0c>)
 800a0fe:	ea0a 0303 	and.w	r3, sl, r3
 800a102:	9313      	str	r3, [sp, #76]	; 0x4c
 800a104:	4b57      	ldr	r3, [pc, #348]	; (800a264 <_strtod_l+0xb1c>)
 800a106:	ea0a 0202 	and.w	r2, sl, r2
 800a10a:	429a      	cmp	r2, r3
 800a10c:	f040 80b0 	bne.w	800a270 <_strtod_l+0xb28>
 800a110:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a114:	4640      	mov	r0, r8
 800a116:	4649      	mov	r1, r9
 800a118:	f7ff f9c2 	bl	80094a0 <__ulp>
 800a11c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a120:	f7f6 f9da 	bl	80004d8 <__aeabi_dmul>
 800a124:	4642      	mov	r2, r8
 800a126:	464b      	mov	r3, r9
 800a128:	f7f6 f820 	bl	800016c <__adddf3>
 800a12c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800a254 <_strtod_l+0xb0c>
 800a130:	4a4d      	ldr	r2, [pc, #308]	; (800a268 <_strtod_l+0xb20>)
 800a132:	ea01 0a0a 	and.w	sl, r1, sl
 800a136:	4592      	cmp	sl, r2
 800a138:	4680      	mov	r8, r0
 800a13a:	d948      	bls.n	800a1ce <_strtod_l+0xa86>
 800a13c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a13e:	4b46      	ldr	r3, [pc, #280]	; (800a258 <_strtod_l+0xb10>)
 800a140:	429a      	cmp	r2, r3
 800a142:	d103      	bne.n	800a14c <_strtod_l+0xa04>
 800a144:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a146:	3301      	adds	r3, #1
 800a148:	f43f ad3c 	beq.w	8009bc4 <_strtod_l+0x47c>
 800a14c:	f04f 38ff 	mov.w	r8, #4294967295
 800a150:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800a258 <_strtod_l+0xb10>
 800a154:	4620      	mov	r0, r4
 800a156:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a158:	f7fe fe76 	bl	8008e48 <_Bfree>
 800a15c:	4620      	mov	r0, r4
 800a15e:	9908      	ldr	r1, [sp, #32]
 800a160:	f7fe fe72 	bl	8008e48 <_Bfree>
 800a164:	4659      	mov	r1, fp
 800a166:	4620      	mov	r0, r4
 800a168:	f7fe fe6e 	bl	8008e48 <_Bfree>
 800a16c:	4631      	mov	r1, r6
 800a16e:	4620      	mov	r0, r4
 800a170:	f7fe fe6a 	bl	8008e48 <_Bfree>
 800a174:	e605      	b.n	8009d82 <_strtod_l+0x63a>
 800a176:	f1b8 0f01 	cmp.w	r8, #1
 800a17a:	d103      	bne.n	800a184 <_strtod_l+0xa3c>
 800a17c:	f1b9 0f00 	cmp.w	r9, #0
 800a180:	f43f ad91 	beq.w	8009ca6 <_strtod_l+0x55e>
 800a184:	2200      	movs	r2, #0
 800a186:	4b39      	ldr	r3, [pc, #228]	; (800a26c <_strtod_l+0xb24>)
 800a188:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a18a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a18e:	e016      	b.n	800a1be <_strtod_l+0xa76>
 800a190:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a192:	4f33      	ldr	r7, [pc, #204]	; (800a260 <_strtod_l+0xb18>)
 800a194:	e7a9      	b.n	800a0ea <_strtod_l+0x9a2>
 800a196:	4b32      	ldr	r3, [pc, #200]	; (800a260 <_strtod_l+0xb18>)
 800a198:	2200      	movs	r2, #0
 800a19a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a19e:	f7f6 f99b 	bl	80004d8 <__aeabi_dmul>
 800a1a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1a4:	4605      	mov	r5, r0
 800a1a6:	460f      	mov	r7, r1
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d09e      	beq.n	800a0ea <_strtod_l+0x9a2>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a1b4:	e79d      	b.n	800a0f2 <_strtod_l+0x9aa>
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	4b28      	ldr	r3, [pc, #160]	; (800a25c <_strtod_l+0xb14>)
 800a1ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a1be:	4f27      	ldr	r7, [pc, #156]	; (800a25c <_strtod_l+0xb14>)
 800a1c0:	e797      	b.n	800a0f2 <_strtod_l+0x9aa>
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	4b29      	ldr	r3, [pc, #164]	; (800a26c <_strtod_l+0xb24>)
 800a1c6:	4645      	mov	r5, r8
 800a1c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a1cc:	e7f7      	b.n	800a1be <_strtod_l+0xa76>
 800a1ce:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800a1d2:	9b05      	ldr	r3, [sp, #20]
 800a1d4:	46ca      	mov	sl, r9
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1bc      	bne.n	800a154 <_strtod_l+0xa0c>
 800a1da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a1de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a1e0:	0d1b      	lsrs	r3, r3, #20
 800a1e2:	051b      	lsls	r3, r3, #20
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d1b5      	bne.n	800a154 <_strtod_l+0xa0c>
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	4639      	mov	r1, r7
 800a1ec:	f7f6 fd82 	bl	8000cf4 <__aeabi_d2lz>
 800a1f0:	f7f6 f944 	bl	800047c <__aeabi_l2d>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	4639      	mov	r1, r7
 800a1fc:	f7f5 ffb4 	bl	8000168 <__aeabi_dsub>
 800a200:	460b      	mov	r3, r1
 800a202:	4602      	mov	r2, r0
 800a204:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800a208:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a20c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a20e:	ea4a 0a08 	orr.w	sl, sl, r8
 800a212:	ea5a 0a03 	orrs.w	sl, sl, r3
 800a216:	d06c      	beq.n	800a2f2 <_strtod_l+0xbaa>
 800a218:	a309      	add	r3, pc, #36	; (adr r3, 800a240 <_strtod_l+0xaf8>)
 800a21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21e:	f7f6 fbcd 	bl	80009bc <__aeabi_dcmplt>
 800a222:	2800      	cmp	r0, #0
 800a224:	f47f acd8 	bne.w	8009bd8 <_strtod_l+0x490>
 800a228:	a307      	add	r3, pc, #28	; (adr r3, 800a248 <_strtod_l+0xb00>)
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a232:	f7f6 fbe1 	bl	80009f8 <__aeabi_dcmpgt>
 800a236:	2800      	cmp	r0, #0
 800a238:	d08c      	beq.n	800a154 <_strtod_l+0xa0c>
 800a23a:	e4cd      	b.n	8009bd8 <_strtod_l+0x490>
 800a23c:	f3af 8000 	nop.w
 800a240:	94a03595 	.word	0x94a03595
 800a244:	3fdfffff 	.word	0x3fdfffff
 800a248:	35afe535 	.word	0x35afe535
 800a24c:	3fe00000 	.word	0x3fe00000
 800a250:	000fffff 	.word	0x000fffff
 800a254:	7ff00000 	.word	0x7ff00000
 800a258:	7fefffff 	.word	0x7fefffff
 800a25c:	3ff00000 	.word	0x3ff00000
 800a260:	3fe00000 	.word	0x3fe00000
 800a264:	7fe00000 	.word	0x7fe00000
 800a268:	7c9fffff 	.word	0x7c9fffff
 800a26c:	bff00000 	.word	0xbff00000
 800a270:	9b05      	ldr	r3, [sp, #20]
 800a272:	b333      	cbz	r3, 800a2c2 <_strtod_l+0xb7a>
 800a274:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a276:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a27a:	d822      	bhi.n	800a2c2 <_strtod_l+0xb7a>
 800a27c:	a328      	add	r3, pc, #160	; (adr r3, 800a320 <_strtod_l+0xbd8>)
 800a27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a282:	4628      	mov	r0, r5
 800a284:	4639      	mov	r1, r7
 800a286:	f7f6 fba3 	bl	80009d0 <__aeabi_dcmple>
 800a28a:	b1a0      	cbz	r0, 800a2b6 <_strtod_l+0xb6e>
 800a28c:	4639      	mov	r1, r7
 800a28e:	4628      	mov	r0, r5
 800a290:	f7f6 fbfa 	bl	8000a88 <__aeabi_d2uiz>
 800a294:	2801      	cmp	r0, #1
 800a296:	bf38      	it	cc
 800a298:	2001      	movcc	r0, #1
 800a29a:	f7f6 f8a3 	bl	80003e4 <__aeabi_ui2d>
 800a29e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2a0:	4605      	mov	r5, r0
 800a2a2:	460f      	mov	r7, r1
 800a2a4:	bb03      	cbnz	r3, 800a2e8 <_strtod_l+0xba0>
 800a2a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2aa:	9014      	str	r0, [sp, #80]	; 0x50
 800a2ac:	9315      	str	r3, [sp, #84]	; 0x54
 800a2ae:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a2b2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a2b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a2ba:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a2be:	1a9b      	subs	r3, r3, r2
 800a2c0:	9311      	str	r3, [sp, #68]	; 0x44
 800a2c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a2c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a2c6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800a2ca:	f7ff f8e9 	bl	80094a0 <__ulp>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	4649      	mov	r1, r9
 800a2d6:	f7f6 f8ff 	bl	80004d8 <__aeabi_dmul>
 800a2da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2de:	f7f5 ff45 	bl	800016c <__adddf3>
 800a2e2:	4680      	mov	r8, r0
 800a2e4:	4689      	mov	r9, r1
 800a2e6:	e774      	b.n	800a1d2 <_strtod_l+0xa8a>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a2f0:	e7dd      	b.n	800a2ae <_strtod_l+0xb66>
 800a2f2:	a30d      	add	r3, pc, #52	; (adr r3, 800a328 <_strtod_l+0xbe0>)
 800a2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f8:	f7f6 fb60 	bl	80009bc <__aeabi_dcmplt>
 800a2fc:	e79b      	b.n	800a236 <_strtod_l+0xaee>
 800a2fe:	2300      	movs	r3, #0
 800a300:	930e      	str	r3, [sp, #56]	; 0x38
 800a302:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a304:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a306:	6013      	str	r3, [r2, #0]
 800a308:	f7ff ba5b 	b.w	80097c2 <_strtod_l+0x7a>
 800a30c:	2a65      	cmp	r2, #101	; 0x65
 800a30e:	f43f ab52 	beq.w	80099b6 <_strtod_l+0x26e>
 800a312:	2a45      	cmp	r2, #69	; 0x45
 800a314:	f43f ab4f 	beq.w	80099b6 <_strtod_l+0x26e>
 800a318:	2301      	movs	r3, #1
 800a31a:	f7ff bb87 	b.w	8009a2c <_strtod_l+0x2e4>
 800a31e:	bf00      	nop
 800a320:	ffc00000 	.word	0xffc00000
 800a324:	41dfffff 	.word	0x41dfffff
 800a328:	94a03595 	.word	0x94a03595
 800a32c:	3fcfffff 	.word	0x3fcfffff

0800a330 <_strtod_r>:
 800a330:	4b01      	ldr	r3, [pc, #4]	; (800a338 <_strtod_r+0x8>)
 800a332:	f7ff ba09 	b.w	8009748 <_strtod_l>
 800a336:	bf00      	nop
 800a338:	20000078 	.word	0x20000078

0800a33c <_strtol_l.constprop.0>:
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a342:	4686      	mov	lr, r0
 800a344:	4690      	mov	r8, r2
 800a346:	d001      	beq.n	800a34c <_strtol_l.constprop.0+0x10>
 800a348:	2b24      	cmp	r3, #36	; 0x24
 800a34a:	d906      	bls.n	800a35a <_strtol_l.constprop.0+0x1e>
 800a34c:	f7fd fd88 	bl	8007e60 <__errno>
 800a350:	2316      	movs	r3, #22
 800a352:	6003      	str	r3, [r0, #0]
 800a354:	2000      	movs	r0, #0
 800a356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a35a:	460d      	mov	r5, r1
 800a35c:	4835      	ldr	r0, [pc, #212]	; (800a434 <_strtol_l.constprop.0+0xf8>)
 800a35e:	462a      	mov	r2, r5
 800a360:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a364:	5d06      	ldrb	r6, [r0, r4]
 800a366:	f016 0608 	ands.w	r6, r6, #8
 800a36a:	d1f8      	bne.n	800a35e <_strtol_l.constprop.0+0x22>
 800a36c:	2c2d      	cmp	r4, #45	; 0x2d
 800a36e:	d12e      	bne.n	800a3ce <_strtol_l.constprop.0+0x92>
 800a370:	2601      	movs	r6, #1
 800a372:	782c      	ldrb	r4, [r5, #0]
 800a374:	1c95      	adds	r5, r2, #2
 800a376:	2b00      	cmp	r3, #0
 800a378:	d057      	beq.n	800a42a <_strtol_l.constprop.0+0xee>
 800a37a:	2b10      	cmp	r3, #16
 800a37c:	d109      	bne.n	800a392 <_strtol_l.constprop.0+0x56>
 800a37e:	2c30      	cmp	r4, #48	; 0x30
 800a380:	d107      	bne.n	800a392 <_strtol_l.constprop.0+0x56>
 800a382:	782a      	ldrb	r2, [r5, #0]
 800a384:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a388:	2a58      	cmp	r2, #88	; 0x58
 800a38a:	d149      	bne.n	800a420 <_strtol_l.constprop.0+0xe4>
 800a38c:	2310      	movs	r3, #16
 800a38e:	786c      	ldrb	r4, [r5, #1]
 800a390:	3502      	adds	r5, #2
 800a392:	2200      	movs	r2, #0
 800a394:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800a398:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a39c:	fbbc f9f3 	udiv	r9, ip, r3
 800a3a0:	4610      	mov	r0, r2
 800a3a2:	fb03 ca19 	mls	sl, r3, r9, ip
 800a3a6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a3aa:	2f09      	cmp	r7, #9
 800a3ac:	d814      	bhi.n	800a3d8 <_strtol_l.constprop.0+0x9c>
 800a3ae:	463c      	mov	r4, r7
 800a3b0:	42a3      	cmp	r3, r4
 800a3b2:	dd20      	ble.n	800a3f6 <_strtol_l.constprop.0+0xba>
 800a3b4:	1c57      	adds	r7, r2, #1
 800a3b6:	d007      	beq.n	800a3c8 <_strtol_l.constprop.0+0x8c>
 800a3b8:	4581      	cmp	r9, r0
 800a3ba:	d319      	bcc.n	800a3f0 <_strtol_l.constprop.0+0xb4>
 800a3bc:	d101      	bne.n	800a3c2 <_strtol_l.constprop.0+0x86>
 800a3be:	45a2      	cmp	sl, r4
 800a3c0:	db16      	blt.n	800a3f0 <_strtol_l.constprop.0+0xb4>
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	fb00 4003 	mla	r0, r0, r3, r4
 800a3c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3cc:	e7eb      	b.n	800a3a6 <_strtol_l.constprop.0+0x6a>
 800a3ce:	2c2b      	cmp	r4, #43	; 0x2b
 800a3d0:	bf04      	itt	eq
 800a3d2:	782c      	ldrbeq	r4, [r5, #0]
 800a3d4:	1c95      	addeq	r5, r2, #2
 800a3d6:	e7ce      	b.n	800a376 <_strtol_l.constprop.0+0x3a>
 800a3d8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a3dc:	2f19      	cmp	r7, #25
 800a3de:	d801      	bhi.n	800a3e4 <_strtol_l.constprop.0+0xa8>
 800a3e0:	3c37      	subs	r4, #55	; 0x37
 800a3e2:	e7e5      	b.n	800a3b0 <_strtol_l.constprop.0+0x74>
 800a3e4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a3e8:	2f19      	cmp	r7, #25
 800a3ea:	d804      	bhi.n	800a3f6 <_strtol_l.constprop.0+0xba>
 800a3ec:	3c57      	subs	r4, #87	; 0x57
 800a3ee:	e7df      	b.n	800a3b0 <_strtol_l.constprop.0+0x74>
 800a3f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f4:	e7e8      	b.n	800a3c8 <_strtol_l.constprop.0+0x8c>
 800a3f6:	1c53      	adds	r3, r2, #1
 800a3f8:	d108      	bne.n	800a40c <_strtol_l.constprop.0+0xd0>
 800a3fa:	2322      	movs	r3, #34	; 0x22
 800a3fc:	4660      	mov	r0, ip
 800a3fe:	f8ce 3000 	str.w	r3, [lr]
 800a402:	f1b8 0f00 	cmp.w	r8, #0
 800a406:	d0a6      	beq.n	800a356 <_strtol_l.constprop.0+0x1a>
 800a408:	1e69      	subs	r1, r5, #1
 800a40a:	e006      	b.n	800a41a <_strtol_l.constprop.0+0xde>
 800a40c:	b106      	cbz	r6, 800a410 <_strtol_l.constprop.0+0xd4>
 800a40e:	4240      	negs	r0, r0
 800a410:	f1b8 0f00 	cmp.w	r8, #0
 800a414:	d09f      	beq.n	800a356 <_strtol_l.constprop.0+0x1a>
 800a416:	2a00      	cmp	r2, #0
 800a418:	d1f6      	bne.n	800a408 <_strtol_l.constprop.0+0xcc>
 800a41a:	f8c8 1000 	str.w	r1, [r8]
 800a41e:	e79a      	b.n	800a356 <_strtol_l.constprop.0+0x1a>
 800a420:	2430      	movs	r4, #48	; 0x30
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1b5      	bne.n	800a392 <_strtol_l.constprop.0+0x56>
 800a426:	2308      	movs	r3, #8
 800a428:	e7b3      	b.n	800a392 <_strtol_l.constprop.0+0x56>
 800a42a:	2c30      	cmp	r4, #48	; 0x30
 800a42c:	d0a9      	beq.n	800a382 <_strtol_l.constprop.0+0x46>
 800a42e:	230a      	movs	r3, #10
 800a430:	e7af      	b.n	800a392 <_strtol_l.constprop.0+0x56>
 800a432:	bf00      	nop
 800a434:	0800c0d1 	.word	0x0800c0d1

0800a438 <_strtol_r>:
 800a438:	f7ff bf80 	b.w	800a33c <_strtol_l.constprop.0>

0800a43c <__ssputs_r>:
 800a43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a440:	461f      	mov	r7, r3
 800a442:	688e      	ldr	r6, [r1, #8]
 800a444:	4682      	mov	sl, r0
 800a446:	42be      	cmp	r6, r7
 800a448:	460c      	mov	r4, r1
 800a44a:	4690      	mov	r8, r2
 800a44c:	680b      	ldr	r3, [r1, #0]
 800a44e:	d82c      	bhi.n	800a4aa <__ssputs_r+0x6e>
 800a450:	898a      	ldrh	r2, [r1, #12]
 800a452:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a456:	d026      	beq.n	800a4a6 <__ssputs_r+0x6a>
 800a458:	6965      	ldr	r5, [r4, #20]
 800a45a:	6909      	ldr	r1, [r1, #16]
 800a45c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a460:	eba3 0901 	sub.w	r9, r3, r1
 800a464:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a468:	1c7b      	adds	r3, r7, #1
 800a46a:	444b      	add	r3, r9
 800a46c:	106d      	asrs	r5, r5, #1
 800a46e:	429d      	cmp	r5, r3
 800a470:	bf38      	it	cc
 800a472:	461d      	movcc	r5, r3
 800a474:	0553      	lsls	r3, r2, #21
 800a476:	d527      	bpl.n	800a4c8 <__ssputs_r+0x8c>
 800a478:	4629      	mov	r1, r5
 800a47a:	f7fe fc19 	bl	8008cb0 <_malloc_r>
 800a47e:	4606      	mov	r6, r0
 800a480:	b360      	cbz	r0, 800a4dc <__ssputs_r+0xa0>
 800a482:	464a      	mov	r2, r9
 800a484:	6921      	ldr	r1, [r4, #16]
 800a486:	f000 fa17 	bl	800a8b8 <memcpy>
 800a48a:	89a3      	ldrh	r3, [r4, #12]
 800a48c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a494:	81a3      	strh	r3, [r4, #12]
 800a496:	6126      	str	r6, [r4, #16]
 800a498:	444e      	add	r6, r9
 800a49a:	6026      	str	r6, [r4, #0]
 800a49c:	463e      	mov	r6, r7
 800a49e:	6165      	str	r5, [r4, #20]
 800a4a0:	eba5 0509 	sub.w	r5, r5, r9
 800a4a4:	60a5      	str	r5, [r4, #8]
 800a4a6:	42be      	cmp	r6, r7
 800a4a8:	d900      	bls.n	800a4ac <__ssputs_r+0x70>
 800a4aa:	463e      	mov	r6, r7
 800a4ac:	4632      	mov	r2, r6
 800a4ae:	4641      	mov	r1, r8
 800a4b0:	6820      	ldr	r0, [r4, #0]
 800a4b2:	f000 f9c5 	bl	800a840 <memmove>
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	68a3      	ldr	r3, [r4, #8]
 800a4ba:	1b9b      	subs	r3, r3, r6
 800a4bc:	60a3      	str	r3, [r4, #8]
 800a4be:	6823      	ldr	r3, [r4, #0]
 800a4c0:	4433      	add	r3, r6
 800a4c2:	6023      	str	r3, [r4, #0]
 800a4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4c8:	462a      	mov	r2, r5
 800a4ca:	f000 fda6 	bl	800b01a <_realloc_r>
 800a4ce:	4606      	mov	r6, r0
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d1e0      	bne.n	800a496 <__ssputs_r+0x5a>
 800a4d4:	4650      	mov	r0, sl
 800a4d6:	6921      	ldr	r1, [r4, #16]
 800a4d8:	f7fe fb7a 	bl	8008bd0 <_free_r>
 800a4dc:	230c      	movs	r3, #12
 800a4de:	f8ca 3000 	str.w	r3, [sl]
 800a4e2:	89a3      	ldrh	r3, [r4, #12]
 800a4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ec:	81a3      	strh	r3, [r4, #12]
 800a4ee:	e7e9      	b.n	800a4c4 <__ssputs_r+0x88>

0800a4f0 <_svfiprintf_r>:
 800a4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f4:	4698      	mov	r8, r3
 800a4f6:	898b      	ldrh	r3, [r1, #12]
 800a4f8:	4607      	mov	r7, r0
 800a4fa:	061b      	lsls	r3, r3, #24
 800a4fc:	460d      	mov	r5, r1
 800a4fe:	4614      	mov	r4, r2
 800a500:	b09d      	sub	sp, #116	; 0x74
 800a502:	d50e      	bpl.n	800a522 <_svfiprintf_r+0x32>
 800a504:	690b      	ldr	r3, [r1, #16]
 800a506:	b963      	cbnz	r3, 800a522 <_svfiprintf_r+0x32>
 800a508:	2140      	movs	r1, #64	; 0x40
 800a50a:	f7fe fbd1 	bl	8008cb0 <_malloc_r>
 800a50e:	6028      	str	r0, [r5, #0]
 800a510:	6128      	str	r0, [r5, #16]
 800a512:	b920      	cbnz	r0, 800a51e <_svfiprintf_r+0x2e>
 800a514:	230c      	movs	r3, #12
 800a516:	603b      	str	r3, [r7, #0]
 800a518:	f04f 30ff 	mov.w	r0, #4294967295
 800a51c:	e0d0      	b.n	800a6c0 <_svfiprintf_r+0x1d0>
 800a51e:	2340      	movs	r3, #64	; 0x40
 800a520:	616b      	str	r3, [r5, #20]
 800a522:	2300      	movs	r3, #0
 800a524:	9309      	str	r3, [sp, #36]	; 0x24
 800a526:	2320      	movs	r3, #32
 800a528:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a52c:	2330      	movs	r3, #48	; 0x30
 800a52e:	f04f 0901 	mov.w	r9, #1
 800a532:	f8cd 800c 	str.w	r8, [sp, #12]
 800a536:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a6d8 <_svfiprintf_r+0x1e8>
 800a53a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a53e:	4623      	mov	r3, r4
 800a540:	469a      	mov	sl, r3
 800a542:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a546:	b10a      	cbz	r2, 800a54c <_svfiprintf_r+0x5c>
 800a548:	2a25      	cmp	r2, #37	; 0x25
 800a54a:	d1f9      	bne.n	800a540 <_svfiprintf_r+0x50>
 800a54c:	ebba 0b04 	subs.w	fp, sl, r4
 800a550:	d00b      	beq.n	800a56a <_svfiprintf_r+0x7a>
 800a552:	465b      	mov	r3, fp
 800a554:	4622      	mov	r2, r4
 800a556:	4629      	mov	r1, r5
 800a558:	4638      	mov	r0, r7
 800a55a:	f7ff ff6f 	bl	800a43c <__ssputs_r>
 800a55e:	3001      	adds	r0, #1
 800a560:	f000 80a9 	beq.w	800a6b6 <_svfiprintf_r+0x1c6>
 800a564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a566:	445a      	add	r2, fp
 800a568:	9209      	str	r2, [sp, #36]	; 0x24
 800a56a:	f89a 3000 	ldrb.w	r3, [sl]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f000 80a1 	beq.w	800a6b6 <_svfiprintf_r+0x1c6>
 800a574:	2300      	movs	r3, #0
 800a576:	f04f 32ff 	mov.w	r2, #4294967295
 800a57a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a57e:	f10a 0a01 	add.w	sl, sl, #1
 800a582:	9304      	str	r3, [sp, #16]
 800a584:	9307      	str	r3, [sp, #28]
 800a586:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a58a:	931a      	str	r3, [sp, #104]	; 0x68
 800a58c:	4654      	mov	r4, sl
 800a58e:	2205      	movs	r2, #5
 800a590:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a594:	4850      	ldr	r0, [pc, #320]	; (800a6d8 <_svfiprintf_r+0x1e8>)
 800a596:	f7fd fc98 	bl	8007eca <memchr>
 800a59a:	9a04      	ldr	r2, [sp, #16]
 800a59c:	b9d8      	cbnz	r0, 800a5d6 <_svfiprintf_r+0xe6>
 800a59e:	06d0      	lsls	r0, r2, #27
 800a5a0:	bf44      	itt	mi
 800a5a2:	2320      	movmi	r3, #32
 800a5a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5a8:	0711      	lsls	r1, r2, #28
 800a5aa:	bf44      	itt	mi
 800a5ac:	232b      	movmi	r3, #43	; 0x2b
 800a5ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a5b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a5b8:	d015      	beq.n	800a5e6 <_svfiprintf_r+0xf6>
 800a5ba:	4654      	mov	r4, sl
 800a5bc:	2000      	movs	r0, #0
 800a5be:	f04f 0c0a 	mov.w	ip, #10
 800a5c2:	9a07      	ldr	r2, [sp, #28]
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5ca:	3b30      	subs	r3, #48	; 0x30
 800a5cc:	2b09      	cmp	r3, #9
 800a5ce:	d94d      	bls.n	800a66c <_svfiprintf_r+0x17c>
 800a5d0:	b1b0      	cbz	r0, 800a600 <_svfiprintf_r+0x110>
 800a5d2:	9207      	str	r2, [sp, #28]
 800a5d4:	e014      	b.n	800a600 <_svfiprintf_r+0x110>
 800a5d6:	eba0 0308 	sub.w	r3, r0, r8
 800a5da:	fa09 f303 	lsl.w	r3, r9, r3
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	46a2      	mov	sl, r4
 800a5e2:	9304      	str	r3, [sp, #16]
 800a5e4:	e7d2      	b.n	800a58c <_svfiprintf_r+0x9c>
 800a5e6:	9b03      	ldr	r3, [sp, #12]
 800a5e8:	1d19      	adds	r1, r3, #4
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	9103      	str	r1, [sp, #12]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	bfbb      	ittet	lt
 800a5f2:	425b      	neglt	r3, r3
 800a5f4:	f042 0202 	orrlt.w	r2, r2, #2
 800a5f8:	9307      	strge	r3, [sp, #28]
 800a5fa:	9307      	strlt	r3, [sp, #28]
 800a5fc:	bfb8      	it	lt
 800a5fe:	9204      	strlt	r2, [sp, #16]
 800a600:	7823      	ldrb	r3, [r4, #0]
 800a602:	2b2e      	cmp	r3, #46	; 0x2e
 800a604:	d10c      	bne.n	800a620 <_svfiprintf_r+0x130>
 800a606:	7863      	ldrb	r3, [r4, #1]
 800a608:	2b2a      	cmp	r3, #42	; 0x2a
 800a60a:	d134      	bne.n	800a676 <_svfiprintf_r+0x186>
 800a60c:	9b03      	ldr	r3, [sp, #12]
 800a60e:	3402      	adds	r4, #2
 800a610:	1d1a      	adds	r2, r3, #4
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	9203      	str	r2, [sp, #12]
 800a616:	2b00      	cmp	r3, #0
 800a618:	bfb8      	it	lt
 800a61a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a61e:	9305      	str	r3, [sp, #20]
 800a620:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a6dc <_svfiprintf_r+0x1ec>
 800a624:	2203      	movs	r2, #3
 800a626:	4650      	mov	r0, sl
 800a628:	7821      	ldrb	r1, [r4, #0]
 800a62a:	f7fd fc4e 	bl	8007eca <memchr>
 800a62e:	b138      	cbz	r0, 800a640 <_svfiprintf_r+0x150>
 800a630:	2240      	movs	r2, #64	; 0x40
 800a632:	9b04      	ldr	r3, [sp, #16]
 800a634:	eba0 000a 	sub.w	r0, r0, sl
 800a638:	4082      	lsls	r2, r0
 800a63a:	4313      	orrs	r3, r2
 800a63c:	3401      	adds	r4, #1
 800a63e:	9304      	str	r3, [sp, #16]
 800a640:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a644:	2206      	movs	r2, #6
 800a646:	4826      	ldr	r0, [pc, #152]	; (800a6e0 <_svfiprintf_r+0x1f0>)
 800a648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a64c:	f7fd fc3d 	bl	8007eca <memchr>
 800a650:	2800      	cmp	r0, #0
 800a652:	d038      	beq.n	800a6c6 <_svfiprintf_r+0x1d6>
 800a654:	4b23      	ldr	r3, [pc, #140]	; (800a6e4 <_svfiprintf_r+0x1f4>)
 800a656:	bb1b      	cbnz	r3, 800a6a0 <_svfiprintf_r+0x1b0>
 800a658:	9b03      	ldr	r3, [sp, #12]
 800a65a:	3307      	adds	r3, #7
 800a65c:	f023 0307 	bic.w	r3, r3, #7
 800a660:	3308      	adds	r3, #8
 800a662:	9303      	str	r3, [sp, #12]
 800a664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a666:	4433      	add	r3, r6
 800a668:	9309      	str	r3, [sp, #36]	; 0x24
 800a66a:	e768      	b.n	800a53e <_svfiprintf_r+0x4e>
 800a66c:	460c      	mov	r4, r1
 800a66e:	2001      	movs	r0, #1
 800a670:	fb0c 3202 	mla	r2, ip, r2, r3
 800a674:	e7a6      	b.n	800a5c4 <_svfiprintf_r+0xd4>
 800a676:	2300      	movs	r3, #0
 800a678:	f04f 0c0a 	mov.w	ip, #10
 800a67c:	4619      	mov	r1, r3
 800a67e:	3401      	adds	r4, #1
 800a680:	9305      	str	r3, [sp, #20]
 800a682:	4620      	mov	r0, r4
 800a684:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a688:	3a30      	subs	r2, #48	; 0x30
 800a68a:	2a09      	cmp	r2, #9
 800a68c:	d903      	bls.n	800a696 <_svfiprintf_r+0x1a6>
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d0c6      	beq.n	800a620 <_svfiprintf_r+0x130>
 800a692:	9105      	str	r1, [sp, #20]
 800a694:	e7c4      	b.n	800a620 <_svfiprintf_r+0x130>
 800a696:	4604      	mov	r4, r0
 800a698:	2301      	movs	r3, #1
 800a69a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a69e:	e7f0      	b.n	800a682 <_svfiprintf_r+0x192>
 800a6a0:	ab03      	add	r3, sp, #12
 800a6a2:	9300      	str	r3, [sp, #0]
 800a6a4:	462a      	mov	r2, r5
 800a6a6:	4638      	mov	r0, r7
 800a6a8:	4b0f      	ldr	r3, [pc, #60]	; (800a6e8 <_svfiprintf_r+0x1f8>)
 800a6aa:	a904      	add	r1, sp, #16
 800a6ac:	f7fc fc5c 	bl	8006f68 <_printf_float>
 800a6b0:	1c42      	adds	r2, r0, #1
 800a6b2:	4606      	mov	r6, r0
 800a6b4:	d1d6      	bne.n	800a664 <_svfiprintf_r+0x174>
 800a6b6:	89ab      	ldrh	r3, [r5, #12]
 800a6b8:	065b      	lsls	r3, r3, #25
 800a6ba:	f53f af2d 	bmi.w	800a518 <_svfiprintf_r+0x28>
 800a6be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6c0:	b01d      	add	sp, #116	; 0x74
 800a6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c6:	ab03      	add	r3, sp, #12
 800a6c8:	9300      	str	r3, [sp, #0]
 800a6ca:	462a      	mov	r2, r5
 800a6cc:	4638      	mov	r0, r7
 800a6ce:	4b06      	ldr	r3, [pc, #24]	; (800a6e8 <_svfiprintf_r+0x1f8>)
 800a6d0:	a904      	add	r1, sp, #16
 800a6d2:	f7fc fee9 	bl	80074a8 <_printf_i>
 800a6d6:	e7eb      	b.n	800a6b0 <_svfiprintf_r+0x1c0>
 800a6d8:	0800c1d1 	.word	0x0800c1d1
 800a6dc:	0800c1d7 	.word	0x0800c1d7
 800a6e0:	0800c1db 	.word	0x0800c1db
 800a6e4:	08006f69 	.word	0x08006f69
 800a6e8:	0800a43d 	.word	0x0800a43d

0800a6ec <__sflush_r>:
 800a6ec:	898a      	ldrh	r2, [r1, #12]
 800a6ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f0:	4605      	mov	r5, r0
 800a6f2:	0710      	lsls	r0, r2, #28
 800a6f4:	460c      	mov	r4, r1
 800a6f6:	d457      	bmi.n	800a7a8 <__sflush_r+0xbc>
 800a6f8:	684b      	ldr	r3, [r1, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	dc04      	bgt.n	800a708 <__sflush_r+0x1c>
 800a6fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a700:	2b00      	cmp	r3, #0
 800a702:	dc01      	bgt.n	800a708 <__sflush_r+0x1c>
 800a704:	2000      	movs	r0, #0
 800a706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a70a:	2e00      	cmp	r6, #0
 800a70c:	d0fa      	beq.n	800a704 <__sflush_r+0x18>
 800a70e:	2300      	movs	r3, #0
 800a710:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a714:	682f      	ldr	r7, [r5, #0]
 800a716:	6a21      	ldr	r1, [r4, #32]
 800a718:	602b      	str	r3, [r5, #0]
 800a71a:	d032      	beq.n	800a782 <__sflush_r+0x96>
 800a71c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a71e:	89a3      	ldrh	r3, [r4, #12]
 800a720:	075a      	lsls	r2, r3, #29
 800a722:	d505      	bpl.n	800a730 <__sflush_r+0x44>
 800a724:	6863      	ldr	r3, [r4, #4]
 800a726:	1ac0      	subs	r0, r0, r3
 800a728:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a72a:	b10b      	cbz	r3, 800a730 <__sflush_r+0x44>
 800a72c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a72e:	1ac0      	subs	r0, r0, r3
 800a730:	2300      	movs	r3, #0
 800a732:	4602      	mov	r2, r0
 800a734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a736:	4628      	mov	r0, r5
 800a738:	6a21      	ldr	r1, [r4, #32]
 800a73a:	47b0      	blx	r6
 800a73c:	1c43      	adds	r3, r0, #1
 800a73e:	89a3      	ldrh	r3, [r4, #12]
 800a740:	d106      	bne.n	800a750 <__sflush_r+0x64>
 800a742:	6829      	ldr	r1, [r5, #0]
 800a744:	291d      	cmp	r1, #29
 800a746:	d82b      	bhi.n	800a7a0 <__sflush_r+0xb4>
 800a748:	4a28      	ldr	r2, [pc, #160]	; (800a7ec <__sflush_r+0x100>)
 800a74a:	410a      	asrs	r2, r1
 800a74c:	07d6      	lsls	r6, r2, #31
 800a74e:	d427      	bmi.n	800a7a0 <__sflush_r+0xb4>
 800a750:	2200      	movs	r2, #0
 800a752:	6062      	str	r2, [r4, #4]
 800a754:	6922      	ldr	r2, [r4, #16]
 800a756:	04d9      	lsls	r1, r3, #19
 800a758:	6022      	str	r2, [r4, #0]
 800a75a:	d504      	bpl.n	800a766 <__sflush_r+0x7a>
 800a75c:	1c42      	adds	r2, r0, #1
 800a75e:	d101      	bne.n	800a764 <__sflush_r+0x78>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	b903      	cbnz	r3, 800a766 <__sflush_r+0x7a>
 800a764:	6560      	str	r0, [r4, #84]	; 0x54
 800a766:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a768:	602f      	str	r7, [r5, #0]
 800a76a:	2900      	cmp	r1, #0
 800a76c:	d0ca      	beq.n	800a704 <__sflush_r+0x18>
 800a76e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a772:	4299      	cmp	r1, r3
 800a774:	d002      	beq.n	800a77c <__sflush_r+0x90>
 800a776:	4628      	mov	r0, r5
 800a778:	f7fe fa2a 	bl	8008bd0 <_free_r>
 800a77c:	2000      	movs	r0, #0
 800a77e:	6360      	str	r0, [r4, #52]	; 0x34
 800a780:	e7c1      	b.n	800a706 <__sflush_r+0x1a>
 800a782:	2301      	movs	r3, #1
 800a784:	4628      	mov	r0, r5
 800a786:	47b0      	blx	r6
 800a788:	1c41      	adds	r1, r0, #1
 800a78a:	d1c8      	bne.n	800a71e <__sflush_r+0x32>
 800a78c:	682b      	ldr	r3, [r5, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d0c5      	beq.n	800a71e <__sflush_r+0x32>
 800a792:	2b1d      	cmp	r3, #29
 800a794:	d001      	beq.n	800a79a <__sflush_r+0xae>
 800a796:	2b16      	cmp	r3, #22
 800a798:	d101      	bne.n	800a79e <__sflush_r+0xb2>
 800a79a:	602f      	str	r7, [r5, #0]
 800a79c:	e7b2      	b.n	800a704 <__sflush_r+0x18>
 800a79e:	89a3      	ldrh	r3, [r4, #12]
 800a7a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7a4:	81a3      	strh	r3, [r4, #12]
 800a7a6:	e7ae      	b.n	800a706 <__sflush_r+0x1a>
 800a7a8:	690f      	ldr	r7, [r1, #16]
 800a7aa:	2f00      	cmp	r7, #0
 800a7ac:	d0aa      	beq.n	800a704 <__sflush_r+0x18>
 800a7ae:	0793      	lsls	r3, r2, #30
 800a7b0:	bf18      	it	ne
 800a7b2:	2300      	movne	r3, #0
 800a7b4:	680e      	ldr	r6, [r1, #0]
 800a7b6:	bf08      	it	eq
 800a7b8:	694b      	ldreq	r3, [r1, #20]
 800a7ba:	1bf6      	subs	r6, r6, r7
 800a7bc:	600f      	str	r7, [r1, #0]
 800a7be:	608b      	str	r3, [r1, #8]
 800a7c0:	2e00      	cmp	r6, #0
 800a7c2:	dd9f      	ble.n	800a704 <__sflush_r+0x18>
 800a7c4:	4633      	mov	r3, r6
 800a7c6:	463a      	mov	r2, r7
 800a7c8:	4628      	mov	r0, r5
 800a7ca:	6a21      	ldr	r1, [r4, #32]
 800a7cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a7d0:	47e0      	blx	ip
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	dc06      	bgt.n	800a7e4 <__sflush_r+0xf8>
 800a7d6:	89a3      	ldrh	r3, [r4, #12]
 800a7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7e0:	81a3      	strh	r3, [r4, #12]
 800a7e2:	e790      	b.n	800a706 <__sflush_r+0x1a>
 800a7e4:	4407      	add	r7, r0
 800a7e6:	1a36      	subs	r6, r6, r0
 800a7e8:	e7ea      	b.n	800a7c0 <__sflush_r+0xd4>
 800a7ea:	bf00      	nop
 800a7ec:	dfbffffe 	.word	0xdfbffffe

0800a7f0 <_fflush_r>:
 800a7f0:	b538      	push	{r3, r4, r5, lr}
 800a7f2:	690b      	ldr	r3, [r1, #16]
 800a7f4:	4605      	mov	r5, r0
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	b913      	cbnz	r3, 800a800 <_fflush_r+0x10>
 800a7fa:	2500      	movs	r5, #0
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	bd38      	pop	{r3, r4, r5, pc}
 800a800:	b118      	cbz	r0, 800a80a <_fflush_r+0x1a>
 800a802:	6a03      	ldr	r3, [r0, #32]
 800a804:	b90b      	cbnz	r3, 800a80a <_fflush_r+0x1a>
 800a806:	f7fd fa0b 	bl	8007c20 <__sinit>
 800a80a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d0f3      	beq.n	800a7fa <_fflush_r+0xa>
 800a812:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a814:	07d0      	lsls	r0, r2, #31
 800a816:	d404      	bmi.n	800a822 <_fflush_r+0x32>
 800a818:	0599      	lsls	r1, r3, #22
 800a81a:	d402      	bmi.n	800a822 <_fflush_r+0x32>
 800a81c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a81e:	f7fd fb4a 	bl	8007eb6 <__retarget_lock_acquire_recursive>
 800a822:	4628      	mov	r0, r5
 800a824:	4621      	mov	r1, r4
 800a826:	f7ff ff61 	bl	800a6ec <__sflush_r>
 800a82a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a82c:	4605      	mov	r5, r0
 800a82e:	07da      	lsls	r2, r3, #31
 800a830:	d4e4      	bmi.n	800a7fc <_fflush_r+0xc>
 800a832:	89a3      	ldrh	r3, [r4, #12]
 800a834:	059b      	lsls	r3, r3, #22
 800a836:	d4e1      	bmi.n	800a7fc <_fflush_r+0xc>
 800a838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a83a:	f7fd fb3d 	bl	8007eb8 <__retarget_lock_release_recursive>
 800a83e:	e7dd      	b.n	800a7fc <_fflush_r+0xc>

0800a840 <memmove>:
 800a840:	4288      	cmp	r0, r1
 800a842:	b510      	push	{r4, lr}
 800a844:	eb01 0402 	add.w	r4, r1, r2
 800a848:	d902      	bls.n	800a850 <memmove+0x10>
 800a84a:	4284      	cmp	r4, r0
 800a84c:	4623      	mov	r3, r4
 800a84e:	d807      	bhi.n	800a860 <memmove+0x20>
 800a850:	1e43      	subs	r3, r0, #1
 800a852:	42a1      	cmp	r1, r4
 800a854:	d008      	beq.n	800a868 <memmove+0x28>
 800a856:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a85a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a85e:	e7f8      	b.n	800a852 <memmove+0x12>
 800a860:	4601      	mov	r1, r0
 800a862:	4402      	add	r2, r0
 800a864:	428a      	cmp	r2, r1
 800a866:	d100      	bne.n	800a86a <memmove+0x2a>
 800a868:	bd10      	pop	{r4, pc}
 800a86a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a86e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a872:	e7f7      	b.n	800a864 <memmove+0x24>

0800a874 <strncmp>:
 800a874:	b510      	push	{r4, lr}
 800a876:	b16a      	cbz	r2, 800a894 <strncmp+0x20>
 800a878:	3901      	subs	r1, #1
 800a87a:	1884      	adds	r4, r0, r2
 800a87c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a880:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a884:	429a      	cmp	r2, r3
 800a886:	d103      	bne.n	800a890 <strncmp+0x1c>
 800a888:	42a0      	cmp	r0, r4
 800a88a:	d001      	beq.n	800a890 <strncmp+0x1c>
 800a88c:	2a00      	cmp	r2, #0
 800a88e:	d1f5      	bne.n	800a87c <strncmp+0x8>
 800a890:	1ad0      	subs	r0, r2, r3
 800a892:	bd10      	pop	{r4, pc}
 800a894:	4610      	mov	r0, r2
 800a896:	e7fc      	b.n	800a892 <strncmp+0x1e>

0800a898 <_sbrk_r>:
 800a898:	b538      	push	{r3, r4, r5, lr}
 800a89a:	2300      	movs	r3, #0
 800a89c:	4d05      	ldr	r5, [pc, #20]	; (800a8b4 <_sbrk_r+0x1c>)
 800a89e:	4604      	mov	r4, r0
 800a8a0:	4608      	mov	r0, r1
 800a8a2:	602b      	str	r3, [r5, #0]
 800a8a4:	f7f8 f964 	bl	8002b70 <_sbrk>
 800a8a8:	1c43      	adds	r3, r0, #1
 800a8aa:	d102      	bne.n	800a8b2 <_sbrk_r+0x1a>
 800a8ac:	682b      	ldr	r3, [r5, #0]
 800a8ae:	b103      	cbz	r3, 800a8b2 <_sbrk_r+0x1a>
 800a8b0:	6023      	str	r3, [r4, #0]
 800a8b2:	bd38      	pop	{r3, r4, r5, pc}
 800a8b4:	20000a38 	.word	0x20000a38

0800a8b8 <memcpy>:
 800a8b8:	440a      	add	r2, r1
 800a8ba:	4291      	cmp	r1, r2
 800a8bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8c0:	d100      	bne.n	800a8c4 <memcpy+0xc>
 800a8c2:	4770      	bx	lr
 800a8c4:	b510      	push	{r4, lr}
 800a8c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8ca:	4291      	cmp	r1, r2
 800a8cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8d0:	d1f9      	bne.n	800a8c6 <memcpy+0xe>
 800a8d2:	bd10      	pop	{r4, pc}

0800a8d4 <nan>:
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	4901      	ldr	r1, [pc, #4]	; (800a8dc <nan+0x8>)
 800a8d8:	4770      	bx	lr
 800a8da:	bf00      	nop
 800a8dc:	7ff80000 	.word	0x7ff80000

0800a8e0 <__assert_func>:
 800a8e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8e2:	4614      	mov	r4, r2
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	4b09      	ldr	r3, [pc, #36]	; (800a90c <__assert_func+0x2c>)
 800a8e8:	4605      	mov	r5, r0
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	68d8      	ldr	r0, [r3, #12]
 800a8ee:	b14c      	cbz	r4, 800a904 <__assert_func+0x24>
 800a8f0:	4b07      	ldr	r3, [pc, #28]	; (800a910 <__assert_func+0x30>)
 800a8f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8f6:	9100      	str	r1, [sp, #0]
 800a8f8:	462b      	mov	r3, r5
 800a8fa:	4906      	ldr	r1, [pc, #24]	; (800a914 <__assert_func+0x34>)
 800a8fc:	f000 fbca 	bl	800b094 <fiprintf>
 800a900:	f000 fbda 	bl	800b0b8 <abort>
 800a904:	4b04      	ldr	r3, [pc, #16]	; (800a918 <__assert_func+0x38>)
 800a906:	461c      	mov	r4, r3
 800a908:	e7f3      	b.n	800a8f2 <__assert_func+0x12>
 800a90a:	bf00      	nop
 800a90c:	20000074 	.word	0x20000074
 800a910:	0800c1ea 	.word	0x0800c1ea
 800a914:	0800c1f7 	.word	0x0800c1f7
 800a918:	0800c225 	.word	0x0800c225

0800a91c <_calloc_r>:
 800a91c:	b570      	push	{r4, r5, r6, lr}
 800a91e:	fba1 5402 	umull	r5, r4, r1, r2
 800a922:	b934      	cbnz	r4, 800a932 <_calloc_r+0x16>
 800a924:	4629      	mov	r1, r5
 800a926:	f7fe f9c3 	bl	8008cb0 <_malloc_r>
 800a92a:	4606      	mov	r6, r0
 800a92c:	b928      	cbnz	r0, 800a93a <_calloc_r+0x1e>
 800a92e:	4630      	mov	r0, r6
 800a930:	bd70      	pop	{r4, r5, r6, pc}
 800a932:	220c      	movs	r2, #12
 800a934:	2600      	movs	r6, #0
 800a936:	6002      	str	r2, [r0, #0]
 800a938:	e7f9      	b.n	800a92e <_calloc_r+0x12>
 800a93a:	462a      	mov	r2, r5
 800a93c:	4621      	mov	r1, r4
 800a93e:	f7fd fa3c 	bl	8007dba <memset>
 800a942:	e7f4      	b.n	800a92e <_calloc_r+0x12>

0800a944 <rshift>:
 800a944:	6903      	ldr	r3, [r0, #16]
 800a946:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a94a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a94e:	f100 0414 	add.w	r4, r0, #20
 800a952:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a956:	dd46      	ble.n	800a9e6 <rshift+0xa2>
 800a958:	f011 011f 	ands.w	r1, r1, #31
 800a95c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a960:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a964:	d10c      	bne.n	800a980 <rshift+0x3c>
 800a966:	4629      	mov	r1, r5
 800a968:	f100 0710 	add.w	r7, r0, #16
 800a96c:	42b1      	cmp	r1, r6
 800a96e:	d335      	bcc.n	800a9dc <rshift+0x98>
 800a970:	1a9b      	subs	r3, r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	1eea      	subs	r2, r5, #3
 800a976:	4296      	cmp	r6, r2
 800a978:	bf38      	it	cc
 800a97a:	2300      	movcc	r3, #0
 800a97c:	4423      	add	r3, r4
 800a97e:	e015      	b.n	800a9ac <rshift+0x68>
 800a980:	46a1      	mov	r9, r4
 800a982:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a986:	f1c1 0820 	rsb	r8, r1, #32
 800a98a:	40cf      	lsrs	r7, r1
 800a98c:	f105 0e04 	add.w	lr, r5, #4
 800a990:	4576      	cmp	r6, lr
 800a992:	46f4      	mov	ip, lr
 800a994:	d816      	bhi.n	800a9c4 <rshift+0x80>
 800a996:	1a9a      	subs	r2, r3, r2
 800a998:	0092      	lsls	r2, r2, #2
 800a99a:	3a04      	subs	r2, #4
 800a99c:	3501      	adds	r5, #1
 800a99e:	42ae      	cmp	r6, r5
 800a9a0:	bf38      	it	cc
 800a9a2:	2200      	movcc	r2, #0
 800a9a4:	18a3      	adds	r3, r4, r2
 800a9a6:	50a7      	str	r7, [r4, r2]
 800a9a8:	b107      	cbz	r7, 800a9ac <rshift+0x68>
 800a9aa:	3304      	adds	r3, #4
 800a9ac:	42a3      	cmp	r3, r4
 800a9ae:	eba3 0204 	sub.w	r2, r3, r4
 800a9b2:	bf08      	it	eq
 800a9b4:	2300      	moveq	r3, #0
 800a9b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a9ba:	6102      	str	r2, [r0, #16]
 800a9bc:	bf08      	it	eq
 800a9be:	6143      	streq	r3, [r0, #20]
 800a9c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9c4:	f8dc c000 	ldr.w	ip, [ip]
 800a9c8:	fa0c fc08 	lsl.w	ip, ip, r8
 800a9cc:	ea4c 0707 	orr.w	r7, ip, r7
 800a9d0:	f849 7b04 	str.w	r7, [r9], #4
 800a9d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a9d8:	40cf      	lsrs	r7, r1
 800a9da:	e7d9      	b.n	800a990 <rshift+0x4c>
 800a9dc:	f851 cb04 	ldr.w	ip, [r1], #4
 800a9e0:	f847 cf04 	str.w	ip, [r7, #4]!
 800a9e4:	e7c2      	b.n	800a96c <rshift+0x28>
 800a9e6:	4623      	mov	r3, r4
 800a9e8:	e7e0      	b.n	800a9ac <rshift+0x68>

0800a9ea <__hexdig_fun>:
 800a9ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a9ee:	2b09      	cmp	r3, #9
 800a9f0:	d802      	bhi.n	800a9f8 <__hexdig_fun+0xe>
 800a9f2:	3820      	subs	r0, #32
 800a9f4:	b2c0      	uxtb	r0, r0
 800a9f6:	4770      	bx	lr
 800a9f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a9fc:	2b05      	cmp	r3, #5
 800a9fe:	d801      	bhi.n	800aa04 <__hexdig_fun+0x1a>
 800aa00:	3847      	subs	r0, #71	; 0x47
 800aa02:	e7f7      	b.n	800a9f4 <__hexdig_fun+0xa>
 800aa04:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aa08:	2b05      	cmp	r3, #5
 800aa0a:	d801      	bhi.n	800aa10 <__hexdig_fun+0x26>
 800aa0c:	3827      	subs	r0, #39	; 0x27
 800aa0e:	e7f1      	b.n	800a9f4 <__hexdig_fun+0xa>
 800aa10:	2000      	movs	r0, #0
 800aa12:	4770      	bx	lr

0800aa14 <__gethex>:
 800aa14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa18:	4681      	mov	r9, r0
 800aa1a:	468a      	mov	sl, r1
 800aa1c:	4617      	mov	r7, r2
 800aa1e:	680a      	ldr	r2, [r1, #0]
 800aa20:	b085      	sub	sp, #20
 800aa22:	f102 0b02 	add.w	fp, r2, #2
 800aa26:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aa2a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aa2e:	9302      	str	r3, [sp, #8]
 800aa30:	32fe      	adds	r2, #254	; 0xfe
 800aa32:	eb02 030b 	add.w	r3, r2, fp
 800aa36:	46d8      	mov	r8, fp
 800aa38:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800aa3c:	9301      	str	r3, [sp, #4]
 800aa3e:	2830      	cmp	r0, #48	; 0x30
 800aa40:	d0f7      	beq.n	800aa32 <__gethex+0x1e>
 800aa42:	f7ff ffd2 	bl	800a9ea <__hexdig_fun>
 800aa46:	4604      	mov	r4, r0
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d138      	bne.n	800aabe <__gethex+0xaa>
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	4640      	mov	r0, r8
 800aa50:	49a7      	ldr	r1, [pc, #668]	; (800acf0 <__gethex+0x2dc>)
 800aa52:	f7ff ff0f 	bl	800a874 <strncmp>
 800aa56:	4606      	mov	r6, r0
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	d169      	bne.n	800ab30 <__gethex+0x11c>
 800aa5c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800aa60:	465d      	mov	r5, fp
 800aa62:	f7ff ffc2 	bl	800a9ea <__hexdig_fun>
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d064      	beq.n	800ab34 <__gethex+0x120>
 800aa6a:	465a      	mov	r2, fp
 800aa6c:	7810      	ldrb	r0, [r2, #0]
 800aa6e:	4690      	mov	r8, r2
 800aa70:	2830      	cmp	r0, #48	; 0x30
 800aa72:	f102 0201 	add.w	r2, r2, #1
 800aa76:	d0f9      	beq.n	800aa6c <__gethex+0x58>
 800aa78:	f7ff ffb7 	bl	800a9ea <__hexdig_fun>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	fab0 f480 	clz	r4, r0
 800aa82:	465e      	mov	r6, fp
 800aa84:	0964      	lsrs	r4, r4, #5
 800aa86:	9301      	str	r3, [sp, #4]
 800aa88:	4642      	mov	r2, r8
 800aa8a:	4615      	mov	r5, r2
 800aa8c:	7828      	ldrb	r0, [r5, #0]
 800aa8e:	3201      	adds	r2, #1
 800aa90:	f7ff ffab 	bl	800a9ea <__hexdig_fun>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d1f8      	bne.n	800aa8a <__gethex+0x76>
 800aa98:	2201      	movs	r2, #1
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	4994      	ldr	r1, [pc, #592]	; (800acf0 <__gethex+0x2dc>)
 800aa9e:	f7ff fee9 	bl	800a874 <strncmp>
 800aaa2:	b978      	cbnz	r0, 800aac4 <__gethex+0xb0>
 800aaa4:	b946      	cbnz	r6, 800aab8 <__gethex+0xa4>
 800aaa6:	1c6e      	adds	r6, r5, #1
 800aaa8:	4632      	mov	r2, r6
 800aaaa:	4615      	mov	r5, r2
 800aaac:	7828      	ldrb	r0, [r5, #0]
 800aaae:	3201      	adds	r2, #1
 800aab0:	f7ff ff9b 	bl	800a9ea <__hexdig_fun>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d1f8      	bne.n	800aaaa <__gethex+0x96>
 800aab8:	1b73      	subs	r3, r6, r5
 800aaba:	009e      	lsls	r6, r3, #2
 800aabc:	e004      	b.n	800aac8 <__gethex+0xb4>
 800aabe:	2400      	movs	r4, #0
 800aac0:	4626      	mov	r6, r4
 800aac2:	e7e1      	b.n	800aa88 <__gethex+0x74>
 800aac4:	2e00      	cmp	r6, #0
 800aac6:	d1f7      	bne.n	800aab8 <__gethex+0xa4>
 800aac8:	782b      	ldrb	r3, [r5, #0]
 800aaca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aace:	2b50      	cmp	r3, #80	; 0x50
 800aad0:	d13d      	bne.n	800ab4e <__gethex+0x13a>
 800aad2:	786b      	ldrb	r3, [r5, #1]
 800aad4:	2b2b      	cmp	r3, #43	; 0x2b
 800aad6:	d02f      	beq.n	800ab38 <__gethex+0x124>
 800aad8:	2b2d      	cmp	r3, #45	; 0x2d
 800aada:	d031      	beq.n	800ab40 <__gethex+0x12c>
 800aadc:	f04f 0b00 	mov.w	fp, #0
 800aae0:	1c69      	adds	r1, r5, #1
 800aae2:	7808      	ldrb	r0, [r1, #0]
 800aae4:	f7ff ff81 	bl	800a9ea <__hexdig_fun>
 800aae8:	1e42      	subs	r2, r0, #1
 800aaea:	b2d2      	uxtb	r2, r2
 800aaec:	2a18      	cmp	r2, #24
 800aaee:	d82e      	bhi.n	800ab4e <__gethex+0x13a>
 800aaf0:	f1a0 0210 	sub.w	r2, r0, #16
 800aaf4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aaf8:	f7ff ff77 	bl	800a9ea <__hexdig_fun>
 800aafc:	f100 3cff 	add.w	ip, r0, #4294967295
 800ab00:	fa5f fc8c 	uxtb.w	ip, ip
 800ab04:	f1bc 0f18 	cmp.w	ip, #24
 800ab08:	d91d      	bls.n	800ab46 <__gethex+0x132>
 800ab0a:	f1bb 0f00 	cmp.w	fp, #0
 800ab0e:	d000      	beq.n	800ab12 <__gethex+0xfe>
 800ab10:	4252      	negs	r2, r2
 800ab12:	4416      	add	r6, r2
 800ab14:	f8ca 1000 	str.w	r1, [sl]
 800ab18:	b1dc      	cbz	r4, 800ab52 <__gethex+0x13e>
 800ab1a:	9b01      	ldr	r3, [sp, #4]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	bf14      	ite	ne
 800ab20:	f04f 0800 	movne.w	r8, #0
 800ab24:	f04f 0806 	moveq.w	r8, #6
 800ab28:	4640      	mov	r0, r8
 800ab2a:	b005      	add	sp, #20
 800ab2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab30:	4645      	mov	r5, r8
 800ab32:	4626      	mov	r6, r4
 800ab34:	2401      	movs	r4, #1
 800ab36:	e7c7      	b.n	800aac8 <__gethex+0xb4>
 800ab38:	f04f 0b00 	mov.w	fp, #0
 800ab3c:	1ca9      	adds	r1, r5, #2
 800ab3e:	e7d0      	b.n	800aae2 <__gethex+0xce>
 800ab40:	f04f 0b01 	mov.w	fp, #1
 800ab44:	e7fa      	b.n	800ab3c <__gethex+0x128>
 800ab46:	230a      	movs	r3, #10
 800ab48:	fb03 0002 	mla	r0, r3, r2, r0
 800ab4c:	e7d0      	b.n	800aaf0 <__gethex+0xdc>
 800ab4e:	4629      	mov	r1, r5
 800ab50:	e7e0      	b.n	800ab14 <__gethex+0x100>
 800ab52:	4621      	mov	r1, r4
 800ab54:	eba5 0308 	sub.w	r3, r5, r8
 800ab58:	3b01      	subs	r3, #1
 800ab5a:	2b07      	cmp	r3, #7
 800ab5c:	dc0a      	bgt.n	800ab74 <__gethex+0x160>
 800ab5e:	4648      	mov	r0, r9
 800ab60:	f7fe f932 	bl	8008dc8 <_Balloc>
 800ab64:	4604      	mov	r4, r0
 800ab66:	b940      	cbnz	r0, 800ab7a <__gethex+0x166>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	21e4      	movs	r1, #228	; 0xe4
 800ab6c:	4b61      	ldr	r3, [pc, #388]	; (800acf4 <__gethex+0x2e0>)
 800ab6e:	4862      	ldr	r0, [pc, #392]	; (800acf8 <__gethex+0x2e4>)
 800ab70:	f7ff feb6 	bl	800a8e0 <__assert_func>
 800ab74:	3101      	adds	r1, #1
 800ab76:	105b      	asrs	r3, r3, #1
 800ab78:	e7ef      	b.n	800ab5a <__gethex+0x146>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	469b      	mov	fp, r3
 800ab7e:	f100 0a14 	add.w	sl, r0, #20
 800ab82:	f8cd a004 	str.w	sl, [sp, #4]
 800ab86:	45a8      	cmp	r8, r5
 800ab88:	d344      	bcc.n	800ac14 <__gethex+0x200>
 800ab8a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ab8e:	4658      	mov	r0, fp
 800ab90:	f848 bb04 	str.w	fp, [r8], #4
 800ab94:	eba8 080a 	sub.w	r8, r8, sl
 800ab98:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800ab9c:	6122      	str	r2, [r4, #16]
 800ab9e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800aba2:	f7fe fa03 	bl	8008fac <__hi0bits>
 800aba6:	683d      	ldr	r5, [r7, #0]
 800aba8:	eba8 0800 	sub.w	r8, r8, r0
 800abac:	45a8      	cmp	r8, r5
 800abae:	dd59      	ble.n	800ac64 <__gethex+0x250>
 800abb0:	eba8 0805 	sub.w	r8, r8, r5
 800abb4:	4641      	mov	r1, r8
 800abb6:	4620      	mov	r0, r4
 800abb8:	f7fe fd81 	bl	80096be <__any_on>
 800abbc:	4683      	mov	fp, r0
 800abbe:	b1b8      	cbz	r0, 800abf0 <__gethex+0x1dc>
 800abc0:	f04f 0b01 	mov.w	fp, #1
 800abc4:	f108 33ff 	add.w	r3, r8, #4294967295
 800abc8:	1159      	asrs	r1, r3, #5
 800abca:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800abce:	f003 021f 	and.w	r2, r3, #31
 800abd2:	fa0b f202 	lsl.w	r2, fp, r2
 800abd6:	420a      	tst	r2, r1
 800abd8:	d00a      	beq.n	800abf0 <__gethex+0x1dc>
 800abda:	455b      	cmp	r3, fp
 800abdc:	dd06      	ble.n	800abec <__gethex+0x1d8>
 800abde:	4620      	mov	r0, r4
 800abe0:	f1a8 0102 	sub.w	r1, r8, #2
 800abe4:	f7fe fd6b 	bl	80096be <__any_on>
 800abe8:	2800      	cmp	r0, #0
 800abea:	d138      	bne.n	800ac5e <__gethex+0x24a>
 800abec:	f04f 0b02 	mov.w	fp, #2
 800abf0:	4641      	mov	r1, r8
 800abf2:	4620      	mov	r0, r4
 800abf4:	f7ff fea6 	bl	800a944 <rshift>
 800abf8:	4446      	add	r6, r8
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	42b3      	cmp	r3, r6
 800abfe:	da41      	bge.n	800ac84 <__gethex+0x270>
 800ac00:	4621      	mov	r1, r4
 800ac02:	4648      	mov	r0, r9
 800ac04:	f7fe f920 	bl	8008e48 <_Bfree>
 800ac08:	2300      	movs	r3, #0
 800ac0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac0c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ac10:	6013      	str	r3, [r2, #0]
 800ac12:	e789      	b.n	800ab28 <__gethex+0x114>
 800ac14:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ac18:	2a2e      	cmp	r2, #46	; 0x2e
 800ac1a:	d014      	beq.n	800ac46 <__gethex+0x232>
 800ac1c:	2b20      	cmp	r3, #32
 800ac1e:	d106      	bne.n	800ac2e <__gethex+0x21a>
 800ac20:	9b01      	ldr	r3, [sp, #4]
 800ac22:	f843 bb04 	str.w	fp, [r3], #4
 800ac26:	f04f 0b00 	mov.w	fp, #0
 800ac2a:	9301      	str	r3, [sp, #4]
 800ac2c:	465b      	mov	r3, fp
 800ac2e:	7828      	ldrb	r0, [r5, #0]
 800ac30:	9303      	str	r3, [sp, #12]
 800ac32:	f7ff feda 	bl	800a9ea <__hexdig_fun>
 800ac36:	9b03      	ldr	r3, [sp, #12]
 800ac38:	f000 000f 	and.w	r0, r0, #15
 800ac3c:	4098      	lsls	r0, r3
 800ac3e:	ea4b 0b00 	orr.w	fp, fp, r0
 800ac42:	3304      	adds	r3, #4
 800ac44:	e79f      	b.n	800ab86 <__gethex+0x172>
 800ac46:	45a8      	cmp	r8, r5
 800ac48:	d8e8      	bhi.n	800ac1c <__gethex+0x208>
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	4928      	ldr	r1, [pc, #160]	; (800acf0 <__gethex+0x2dc>)
 800ac50:	9303      	str	r3, [sp, #12]
 800ac52:	f7ff fe0f 	bl	800a874 <strncmp>
 800ac56:	9b03      	ldr	r3, [sp, #12]
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d1df      	bne.n	800ac1c <__gethex+0x208>
 800ac5c:	e793      	b.n	800ab86 <__gethex+0x172>
 800ac5e:	f04f 0b03 	mov.w	fp, #3
 800ac62:	e7c5      	b.n	800abf0 <__gethex+0x1dc>
 800ac64:	da0b      	bge.n	800ac7e <__gethex+0x26a>
 800ac66:	eba5 0808 	sub.w	r8, r5, r8
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	4642      	mov	r2, r8
 800ac6e:	4648      	mov	r0, r9
 800ac70:	f7fe fb02 	bl	8009278 <__lshift>
 800ac74:	4604      	mov	r4, r0
 800ac76:	eba6 0608 	sub.w	r6, r6, r8
 800ac7a:	f100 0a14 	add.w	sl, r0, #20
 800ac7e:	f04f 0b00 	mov.w	fp, #0
 800ac82:	e7ba      	b.n	800abfa <__gethex+0x1e6>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	42b3      	cmp	r3, r6
 800ac88:	dd74      	ble.n	800ad74 <__gethex+0x360>
 800ac8a:	1b9e      	subs	r6, r3, r6
 800ac8c:	42b5      	cmp	r5, r6
 800ac8e:	dc35      	bgt.n	800acfc <__gethex+0x2e8>
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d023      	beq.n	800acde <__gethex+0x2ca>
 800ac96:	2b03      	cmp	r3, #3
 800ac98:	d025      	beq.n	800ace6 <__gethex+0x2d2>
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d115      	bne.n	800acca <__gethex+0x2b6>
 800ac9e:	42b5      	cmp	r5, r6
 800aca0:	d113      	bne.n	800acca <__gethex+0x2b6>
 800aca2:	2d01      	cmp	r5, #1
 800aca4:	d10b      	bne.n	800acbe <__gethex+0x2aa>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	9a02      	ldr	r2, [sp, #8]
 800acaa:	f04f 0862 	mov.w	r8, #98	; 0x62
 800acae:	6013      	str	r3, [r2, #0]
 800acb0:	2301      	movs	r3, #1
 800acb2:	6123      	str	r3, [r4, #16]
 800acb4:	f8ca 3000 	str.w	r3, [sl]
 800acb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acba:	601c      	str	r4, [r3, #0]
 800acbc:	e734      	b.n	800ab28 <__gethex+0x114>
 800acbe:	4620      	mov	r0, r4
 800acc0:	1e69      	subs	r1, r5, #1
 800acc2:	f7fe fcfc 	bl	80096be <__any_on>
 800acc6:	2800      	cmp	r0, #0
 800acc8:	d1ed      	bne.n	800aca6 <__gethex+0x292>
 800acca:	4621      	mov	r1, r4
 800accc:	4648      	mov	r0, r9
 800acce:	f7fe f8bb 	bl	8008e48 <_Bfree>
 800acd2:	2300      	movs	r3, #0
 800acd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acd6:	f04f 0850 	mov.w	r8, #80	; 0x50
 800acda:	6013      	str	r3, [r2, #0]
 800acdc:	e724      	b.n	800ab28 <__gethex+0x114>
 800acde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d1f2      	bne.n	800acca <__gethex+0x2b6>
 800ace4:	e7df      	b.n	800aca6 <__gethex+0x292>
 800ace6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d1dc      	bne.n	800aca6 <__gethex+0x292>
 800acec:	e7ed      	b.n	800acca <__gethex+0x2b6>
 800acee:	bf00      	nop
 800acf0:	0800c07c 	.word	0x0800c07c
 800acf4:	0800bf13 	.word	0x0800bf13
 800acf8:	0800c226 	.word	0x0800c226
 800acfc:	f106 38ff 	add.w	r8, r6, #4294967295
 800ad00:	f1bb 0f00 	cmp.w	fp, #0
 800ad04:	d133      	bne.n	800ad6e <__gethex+0x35a>
 800ad06:	f1b8 0f00 	cmp.w	r8, #0
 800ad0a:	d004      	beq.n	800ad16 <__gethex+0x302>
 800ad0c:	4641      	mov	r1, r8
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f7fe fcd5 	bl	80096be <__any_on>
 800ad14:	4683      	mov	fp, r0
 800ad16:	2301      	movs	r3, #1
 800ad18:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ad1c:	f008 081f 	and.w	r8, r8, #31
 800ad20:	fa03 f308 	lsl.w	r3, r3, r8
 800ad24:	f04f 0802 	mov.w	r8, #2
 800ad28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ad2c:	4631      	mov	r1, r6
 800ad2e:	4213      	tst	r3, r2
 800ad30:	4620      	mov	r0, r4
 800ad32:	bf18      	it	ne
 800ad34:	f04b 0b02 	orrne.w	fp, fp, #2
 800ad38:	1bad      	subs	r5, r5, r6
 800ad3a:	f7ff fe03 	bl	800a944 <rshift>
 800ad3e:	687e      	ldr	r6, [r7, #4]
 800ad40:	f1bb 0f00 	cmp.w	fp, #0
 800ad44:	d04a      	beq.n	800addc <__gethex+0x3c8>
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d016      	beq.n	800ad7a <__gethex+0x366>
 800ad4c:	2b03      	cmp	r3, #3
 800ad4e:	d018      	beq.n	800ad82 <__gethex+0x36e>
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d109      	bne.n	800ad68 <__gethex+0x354>
 800ad54:	f01b 0f02 	tst.w	fp, #2
 800ad58:	d006      	beq.n	800ad68 <__gethex+0x354>
 800ad5a:	f8da 3000 	ldr.w	r3, [sl]
 800ad5e:	ea4b 0b03 	orr.w	fp, fp, r3
 800ad62:	f01b 0f01 	tst.w	fp, #1
 800ad66:	d10f      	bne.n	800ad88 <__gethex+0x374>
 800ad68:	f048 0810 	orr.w	r8, r8, #16
 800ad6c:	e036      	b.n	800addc <__gethex+0x3c8>
 800ad6e:	f04f 0b01 	mov.w	fp, #1
 800ad72:	e7d0      	b.n	800ad16 <__gethex+0x302>
 800ad74:	f04f 0801 	mov.w	r8, #1
 800ad78:	e7e2      	b.n	800ad40 <__gethex+0x32c>
 800ad7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad7c:	f1c3 0301 	rsb	r3, r3, #1
 800ad80:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d0ef      	beq.n	800ad68 <__gethex+0x354>
 800ad88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ad8c:	f104 0214 	add.w	r2, r4, #20
 800ad90:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ad94:	9301      	str	r3, [sp, #4]
 800ad96:	2300      	movs	r3, #0
 800ad98:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ad9c:	4694      	mov	ip, r2
 800ad9e:	f852 1b04 	ldr.w	r1, [r2], #4
 800ada2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ada6:	d01e      	beq.n	800ade6 <__gethex+0x3d2>
 800ada8:	3101      	adds	r1, #1
 800adaa:	f8cc 1000 	str.w	r1, [ip]
 800adae:	f1b8 0f02 	cmp.w	r8, #2
 800adb2:	f104 0214 	add.w	r2, r4, #20
 800adb6:	d13d      	bne.n	800ae34 <__gethex+0x420>
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	3b01      	subs	r3, #1
 800adbc:	42ab      	cmp	r3, r5
 800adbe:	d10b      	bne.n	800add8 <__gethex+0x3c4>
 800adc0:	2301      	movs	r3, #1
 800adc2:	1169      	asrs	r1, r5, #5
 800adc4:	f005 051f 	and.w	r5, r5, #31
 800adc8:	fa03 f505 	lsl.w	r5, r3, r5
 800adcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800add0:	421d      	tst	r5, r3
 800add2:	bf18      	it	ne
 800add4:	f04f 0801 	movne.w	r8, #1
 800add8:	f048 0820 	orr.w	r8, r8, #32
 800addc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adde:	601c      	str	r4, [r3, #0]
 800ade0:	9b02      	ldr	r3, [sp, #8]
 800ade2:	601e      	str	r6, [r3, #0]
 800ade4:	e6a0      	b.n	800ab28 <__gethex+0x114>
 800ade6:	4290      	cmp	r0, r2
 800ade8:	f842 3c04 	str.w	r3, [r2, #-4]
 800adec:	d8d6      	bhi.n	800ad9c <__gethex+0x388>
 800adee:	68a2      	ldr	r2, [r4, #8]
 800adf0:	4593      	cmp	fp, r2
 800adf2:	db17      	blt.n	800ae24 <__gethex+0x410>
 800adf4:	6861      	ldr	r1, [r4, #4]
 800adf6:	4648      	mov	r0, r9
 800adf8:	3101      	adds	r1, #1
 800adfa:	f7fd ffe5 	bl	8008dc8 <_Balloc>
 800adfe:	4682      	mov	sl, r0
 800ae00:	b918      	cbnz	r0, 800ae0a <__gethex+0x3f6>
 800ae02:	4602      	mov	r2, r0
 800ae04:	2184      	movs	r1, #132	; 0x84
 800ae06:	4b1a      	ldr	r3, [pc, #104]	; (800ae70 <__gethex+0x45c>)
 800ae08:	e6b1      	b.n	800ab6e <__gethex+0x15a>
 800ae0a:	6922      	ldr	r2, [r4, #16]
 800ae0c:	f104 010c 	add.w	r1, r4, #12
 800ae10:	3202      	adds	r2, #2
 800ae12:	0092      	lsls	r2, r2, #2
 800ae14:	300c      	adds	r0, #12
 800ae16:	f7ff fd4f 	bl	800a8b8 <memcpy>
 800ae1a:	4621      	mov	r1, r4
 800ae1c:	4648      	mov	r0, r9
 800ae1e:	f7fe f813 	bl	8008e48 <_Bfree>
 800ae22:	4654      	mov	r4, sl
 800ae24:	6922      	ldr	r2, [r4, #16]
 800ae26:	1c51      	adds	r1, r2, #1
 800ae28:	6121      	str	r1, [r4, #16]
 800ae2a:	2101      	movs	r1, #1
 800ae2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ae30:	6151      	str	r1, [r2, #20]
 800ae32:	e7bc      	b.n	800adae <__gethex+0x39a>
 800ae34:	6921      	ldr	r1, [r4, #16]
 800ae36:	4559      	cmp	r1, fp
 800ae38:	dd0b      	ble.n	800ae52 <__gethex+0x43e>
 800ae3a:	2101      	movs	r1, #1
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	f7ff fd81 	bl	800a944 <rshift>
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	3601      	adds	r6, #1
 800ae46:	42b3      	cmp	r3, r6
 800ae48:	f6ff aeda 	blt.w	800ac00 <__gethex+0x1ec>
 800ae4c:	f04f 0801 	mov.w	r8, #1
 800ae50:	e7c2      	b.n	800add8 <__gethex+0x3c4>
 800ae52:	f015 051f 	ands.w	r5, r5, #31
 800ae56:	d0f9      	beq.n	800ae4c <__gethex+0x438>
 800ae58:	9b01      	ldr	r3, [sp, #4]
 800ae5a:	f1c5 0520 	rsb	r5, r5, #32
 800ae5e:	441a      	add	r2, r3
 800ae60:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ae64:	f7fe f8a2 	bl	8008fac <__hi0bits>
 800ae68:	42a8      	cmp	r0, r5
 800ae6a:	dbe6      	blt.n	800ae3a <__gethex+0x426>
 800ae6c:	e7ee      	b.n	800ae4c <__gethex+0x438>
 800ae6e:	bf00      	nop
 800ae70:	0800bf13 	.word	0x0800bf13

0800ae74 <L_shift>:
 800ae74:	f1c2 0208 	rsb	r2, r2, #8
 800ae78:	0092      	lsls	r2, r2, #2
 800ae7a:	b570      	push	{r4, r5, r6, lr}
 800ae7c:	f1c2 0620 	rsb	r6, r2, #32
 800ae80:	6843      	ldr	r3, [r0, #4]
 800ae82:	6804      	ldr	r4, [r0, #0]
 800ae84:	fa03 f506 	lsl.w	r5, r3, r6
 800ae88:	432c      	orrs	r4, r5
 800ae8a:	40d3      	lsrs	r3, r2
 800ae8c:	6004      	str	r4, [r0, #0]
 800ae8e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ae92:	4288      	cmp	r0, r1
 800ae94:	d3f4      	bcc.n	800ae80 <L_shift+0xc>
 800ae96:	bd70      	pop	{r4, r5, r6, pc}

0800ae98 <__match>:
 800ae98:	b530      	push	{r4, r5, lr}
 800ae9a:	6803      	ldr	r3, [r0, #0]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aea2:	b914      	cbnz	r4, 800aeaa <__match+0x12>
 800aea4:	6003      	str	r3, [r0, #0]
 800aea6:	2001      	movs	r0, #1
 800aea8:	bd30      	pop	{r4, r5, pc}
 800aeaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800aeb2:	2d19      	cmp	r5, #25
 800aeb4:	bf98      	it	ls
 800aeb6:	3220      	addls	r2, #32
 800aeb8:	42a2      	cmp	r2, r4
 800aeba:	d0f0      	beq.n	800ae9e <__match+0x6>
 800aebc:	2000      	movs	r0, #0
 800aebe:	e7f3      	b.n	800aea8 <__match+0x10>

0800aec0 <__hexnan>:
 800aec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec4:	2500      	movs	r5, #0
 800aec6:	680b      	ldr	r3, [r1, #0]
 800aec8:	4682      	mov	sl, r0
 800aeca:	115e      	asrs	r6, r3, #5
 800aecc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aed0:	f013 031f 	ands.w	r3, r3, #31
 800aed4:	bf18      	it	ne
 800aed6:	3604      	addne	r6, #4
 800aed8:	1f37      	subs	r7, r6, #4
 800aeda:	4690      	mov	r8, r2
 800aedc:	46b9      	mov	r9, r7
 800aede:	463c      	mov	r4, r7
 800aee0:	46ab      	mov	fp, r5
 800aee2:	b087      	sub	sp, #28
 800aee4:	6801      	ldr	r1, [r0, #0]
 800aee6:	9301      	str	r3, [sp, #4]
 800aee8:	f846 5c04 	str.w	r5, [r6, #-4]
 800aeec:	9502      	str	r5, [sp, #8]
 800aeee:	784a      	ldrb	r2, [r1, #1]
 800aef0:	1c4b      	adds	r3, r1, #1
 800aef2:	9303      	str	r3, [sp, #12]
 800aef4:	b342      	cbz	r2, 800af48 <__hexnan+0x88>
 800aef6:	4610      	mov	r0, r2
 800aef8:	9105      	str	r1, [sp, #20]
 800aefa:	9204      	str	r2, [sp, #16]
 800aefc:	f7ff fd75 	bl	800a9ea <__hexdig_fun>
 800af00:	2800      	cmp	r0, #0
 800af02:	d14f      	bne.n	800afa4 <__hexnan+0xe4>
 800af04:	9a04      	ldr	r2, [sp, #16]
 800af06:	9905      	ldr	r1, [sp, #20]
 800af08:	2a20      	cmp	r2, #32
 800af0a:	d818      	bhi.n	800af3e <__hexnan+0x7e>
 800af0c:	9b02      	ldr	r3, [sp, #8]
 800af0e:	459b      	cmp	fp, r3
 800af10:	dd13      	ble.n	800af3a <__hexnan+0x7a>
 800af12:	454c      	cmp	r4, r9
 800af14:	d206      	bcs.n	800af24 <__hexnan+0x64>
 800af16:	2d07      	cmp	r5, #7
 800af18:	dc04      	bgt.n	800af24 <__hexnan+0x64>
 800af1a:	462a      	mov	r2, r5
 800af1c:	4649      	mov	r1, r9
 800af1e:	4620      	mov	r0, r4
 800af20:	f7ff ffa8 	bl	800ae74 <L_shift>
 800af24:	4544      	cmp	r4, r8
 800af26:	d950      	bls.n	800afca <__hexnan+0x10a>
 800af28:	2300      	movs	r3, #0
 800af2a:	f1a4 0904 	sub.w	r9, r4, #4
 800af2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800af32:	461d      	mov	r5, r3
 800af34:	464c      	mov	r4, r9
 800af36:	f8cd b008 	str.w	fp, [sp, #8]
 800af3a:	9903      	ldr	r1, [sp, #12]
 800af3c:	e7d7      	b.n	800aeee <__hexnan+0x2e>
 800af3e:	2a29      	cmp	r2, #41	; 0x29
 800af40:	d155      	bne.n	800afee <__hexnan+0x12e>
 800af42:	3102      	adds	r1, #2
 800af44:	f8ca 1000 	str.w	r1, [sl]
 800af48:	f1bb 0f00 	cmp.w	fp, #0
 800af4c:	d04f      	beq.n	800afee <__hexnan+0x12e>
 800af4e:	454c      	cmp	r4, r9
 800af50:	d206      	bcs.n	800af60 <__hexnan+0xa0>
 800af52:	2d07      	cmp	r5, #7
 800af54:	dc04      	bgt.n	800af60 <__hexnan+0xa0>
 800af56:	462a      	mov	r2, r5
 800af58:	4649      	mov	r1, r9
 800af5a:	4620      	mov	r0, r4
 800af5c:	f7ff ff8a 	bl	800ae74 <L_shift>
 800af60:	4544      	cmp	r4, r8
 800af62:	d934      	bls.n	800afce <__hexnan+0x10e>
 800af64:	4623      	mov	r3, r4
 800af66:	f1a8 0204 	sub.w	r2, r8, #4
 800af6a:	f853 1b04 	ldr.w	r1, [r3], #4
 800af6e:	429f      	cmp	r7, r3
 800af70:	f842 1f04 	str.w	r1, [r2, #4]!
 800af74:	d2f9      	bcs.n	800af6a <__hexnan+0xaa>
 800af76:	1b3b      	subs	r3, r7, r4
 800af78:	f023 0303 	bic.w	r3, r3, #3
 800af7c:	3304      	adds	r3, #4
 800af7e:	3e03      	subs	r6, #3
 800af80:	3401      	adds	r4, #1
 800af82:	42a6      	cmp	r6, r4
 800af84:	bf38      	it	cc
 800af86:	2304      	movcc	r3, #4
 800af88:	2200      	movs	r2, #0
 800af8a:	4443      	add	r3, r8
 800af8c:	f843 2b04 	str.w	r2, [r3], #4
 800af90:	429f      	cmp	r7, r3
 800af92:	d2fb      	bcs.n	800af8c <__hexnan+0xcc>
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	b91b      	cbnz	r3, 800afa0 <__hexnan+0xe0>
 800af98:	4547      	cmp	r7, r8
 800af9a:	d126      	bne.n	800afea <__hexnan+0x12a>
 800af9c:	2301      	movs	r3, #1
 800af9e:	603b      	str	r3, [r7, #0]
 800afa0:	2005      	movs	r0, #5
 800afa2:	e025      	b.n	800aff0 <__hexnan+0x130>
 800afa4:	3501      	adds	r5, #1
 800afa6:	2d08      	cmp	r5, #8
 800afa8:	f10b 0b01 	add.w	fp, fp, #1
 800afac:	dd06      	ble.n	800afbc <__hexnan+0xfc>
 800afae:	4544      	cmp	r4, r8
 800afb0:	d9c3      	bls.n	800af3a <__hexnan+0x7a>
 800afb2:	2300      	movs	r3, #0
 800afb4:	2501      	movs	r5, #1
 800afb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800afba:	3c04      	subs	r4, #4
 800afbc:	6822      	ldr	r2, [r4, #0]
 800afbe:	f000 000f 	and.w	r0, r0, #15
 800afc2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800afc6:	6020      	str	r0, [r4, #0]
 800afc8:	e7b7      	b.n	800af3a <__hexnan+0x7a>
 800afca:	2508      	movs	r5, #8
 800afcc:	e7b5      	b.n	800af3a <__hexnan+0x7a>
 800afce:	9b01      	ldr	r3, [sp, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d0df      	beq.n	800af94 <__hexnan+0xd4>
 800afd4:	f04f 32ff 	mov.w	r2, #4294967295
 800afd8:	f1c3 0320 	rsb	r3, r3, #32
 800afdc:	40da      	lsrs	r2, r3
 800afde:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800afe2:	4013      	ands	r3, r2
 800afe4:	f846 3c04 	str.w	r3, [r6, #-4]
 800afe8:	e7d4      	b.n	800af94 <__hexnan+0xd4>
 800afea:	3f04      	subs	r7, #4
 800afec:	e7d2      	b.n	800af94 <__hexnan+0xd4>
 800afee:	2004      	movs	r0, #4
 800aff0:	b007      	add	sp, #28
 800aff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aff6 <__ascii_mbtowc>:
 800aff6:	b082      	sub	sp, #8
 800aff8:	b901      	cbnz	r1, 800affc <__ascii_mbtowc+0x6>
 800affa:	a901      	add	r1, sp, #4
 800affc:	b142      	cbz	r2, 800b010 <__ascii_mbtowc+0x1a>
 800affe:	b14b      	cbz	r3, 800b014 <__ascii_mbtowc+0x1e>
 800b000:	7813      	ldrb	r3, [r2, #0]
 800b002:	600b      	str	r3, [r1, #0]
 800b004:	7812      	ldrb	r2, [r2, #0]
 800b006:	1e10      	subs	r0, r2, #0
 800b008:	bf18      	it	ne
 800b00a:	2001      	movne	r0, #1
 800b00c:	b002      	add	sp, #8
 800b00e:	4770      	bx	lr
 800b010:	4610      	mov	r0, r2
 800b012:	e7fb      	b.n	800b00c <__ascii_mbtowc+0x16>
 800b014:	f06f 0001 	mvn.w	r0, #1
 800b018:	e7f8      	b.n	800b00c <__ascii_mbtowc+0x16>

0800b01a <_realloc_r>:
 800b01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b01e:	4680      	mov	r8, r0
 800b020:	4614      	mov	r4, r2
 800b022:	460e      	mov	r6, r1
 800b024:	b921      	cbnz	r1, 800b030 <_realloc_r+0x16>
 800b026:	4611      	mov	r1, r2
 800b028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b02c:	f7fd be40 	b.w	8008cb0 <_malloc_r>
 800b030:	b92a      	cbnz	r2, 800b03e <_realloc_r+0x24>
 800b032:	f7fd fdcd 	bl	8008bd0 <_free_r>
 800b036:	4625      	mov	r5, r4
 800b038:	4628      	mov	r0, r5
 800b03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b03e:	f000 f842 	bl	800b0c6 <_malloc_usable_size_r>
 800b042:	4284      	cmp	r4, r0
 800b044:	4607      	mov	r7, r0
 800b046:	d802      	bhi.n	800b04e <_realloc_r+0x34>
 800b048:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b04c:	d812      	bhi.n	800b074 <_realloc_r+0x5a>
 800b04e:	4621      	mov	r1, r4
 800b050:	4640      	mov	r0, r8
 800b052:	f7fd fe2d 	bl	8008cb0 <_malloc_r>
 800b056:	4605      	mov	r5, r0
 800b058:	2800      	cmp	r0, #0
 800b05a:	d0ed      	beq.n	800b038 <_realloc_r+0x1e>
 800b05c:	42bc      	cmp	r4, r7
 800b05e:	4622      	mov	r2, r4
 800b060:	4631      	mov	r1, r6
 800b062:	bf28      	it	cs
 800b064:	463a      	movcs	r2, r7
 800b066:	f7ff fc27 	bl	800a8b8 <memcpy>
 800b06a:	4631      	mov	r1, r6
 800b06c:	4640      	mov	r0, r8
 800b06e:	f7fd fdaf 	bl	8008bd0 <_free_r>
 800b072:	e7e1      	b.n	800b038 <_realloc_r+0x1e>
 800b074:	4635      	mov	r5, r6
 800b076:	e7df      	b.n	800b038 <_realloc_r+0x1e>

0800b078 <__ascii_wctomb>:
 800b078:	4603      	mov	r3, r0
 800b07a:	4608      	mov	r0, r1
 800b07c:	b141      	cbz	r1, 800b090 <__ascii_wctomb+0x18>
 800b07e:	2aff      	cmp	r2, #255	; 0xff
 800b080:	d904      	bls.n	800b08c <__ascii_wctomb+0x14>
 800b082:	228a      	movs	r2, #138	; 0x8a
 800b084:	f04f 30ff 	mov.w	r0, #4294967295
 800b088:	601a      	str	r2, [r3, #0]
 800b08a:	4770      	bx	lr
 800b08c:	2001      	movs	r0, #1
 800b08e:	700a      	strb	r2, [r1, #0]
 800b090:	4770      	bx	lr
	...

0800b094 <fiprintf>:
 800b094:	b40e      	push	{r1, r2, r3}
 800b096:	b503      	push	{r0, r1, lr}
 800b098:	4601      	mov	r1, r0
 800b09a:	ab03      	add	r3, sp, #12
 800b09c:	4805      	ldr	r0, [pc, #20]	; (800b0b4 <fiprintf+0x20>)
 800b09e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0a2:	6800      	ldr	r0, [r0, #0]
 800b0a4:	9301      	str	r3, [sp, #4]
 800b0a6:	f000 f83d 	bl	800b124 <_vfiprintf_r>
 800b0aa:	b002      	add	sp, #8
 800b0ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0b0:	b003      	add	sp, #12
 800b0b2:	4770      	bx	lr
 800b0b4:	20000074 	.word	0x20000074

0800b0b8 <abort>:
 800b0b8:	2006      	movs	r0, #6
 800b0ba:	b508      	push	{r3, lr}
 800b0bc:	f000 fa0a 	bl	800b4d4 <raise>
 800b0c0:	2001      	movs	r0, #1
 800b0c2:	f7f7 fce2 	bl	8002a8a <_exit>

0800b0c6 <_malloc_usable_size_r>:
 800b0c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0ca:	1f18      	subs	r0, r3, #4
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	bfbc      	itt	lt
 800b0d0:	580b      	ldrlt	r3, [r1, r0]
 800b0d2:	18c0      	addlt	r0, r0, r3
 800b0d4:	4770      	bx	lr

0800b0d6 <__sfputc_r>:
 800b0d6:	6893      	ldr	r3, [r2, #8]
 800b0d8:	b410      	push	{r4}
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	6093      	str	r3, [r2, #8]
 800b0e0:	da07      	bge.n	800b0f2 <__sfputc_r+0x1c>
 800b0e2:	6994      	ldr	r4, [r2, #24]
 800b0e4:	42a3      	cmp	r3, r4
 800b0e6:	db01      	blt.n	800b0ec <__sfputc_r+0x16>
 800b0e8:	290a      	cmp	r1, #10
 800b0ea:	d102      	bne.n	800b0f2 <__sfputc_r+0x1c>
 800b0ec:	bc10      	pop	{r4}
 800b0ee:	f000 b933 	b.w	800b358 <__swbuf_r>
 800b0f2:	6813      	ldr	r3, [r2, #0]
 800b0f4:	1c58      	adds	r0, r3, #1
 800b0f6:	6010      	str	r0, [r2, #0]
 800b0f8:	7019      	strb	r1, [r3, #0]
 800b0fa:	4608      	mov	r0, r1
 800b0fc:	bc10      	pop	{r4}
 800b0fe:	4770      	bx	lr

0800b100 <__sfputs_r>:
 800b100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b102:	4606      	mov	r6, r0
 800b104:	460f      	mov	r7, r1
 800b106:	4614      	mov	r4, r2
 800b108:	18d5      	adds	r5, r2, r3
 800b10a:	42ac      	cmp	r4, r5
 800b10c:	d101      	bne.n	800b112 <__sfputs_r+0x12>
 800b10e:	2000      	movs	r0, #0
 800b110:	e007      	b.n	800b122 <__sfputs_r+0x22>
 800b112:	463a      	mov	r2, r7
 800b114:	4630      	mov	r0, r6
 800b116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b11a:	f7ff ffdc 	bl	800b0d6 <__sfputc_r>
 800b11e:	1c43      	adds	r3, r0, #1
 800b120:	d1f3      	bne.n	800b10a <__sfputs_r+0xa>
 800b122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b124 <_vfiprintf_r>:
 800b124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b128:	460d      	mov	r5, r1
 800b12a:	4614      	mov	r4, r2
 800b12c:	4698      	mov	r8, r3
 800b12e:	4606      	mov	r6, r0
 800b130:	b09d      	sub	sp, #116	; 0x74
 800b132:	b118      	cbz	r0, 800b13c <_vfiprintf_r+0x18>
 800b134:	6a03      	ldr	r3, [r0, #32]
 800b136:	b90b      	cbnz	r3, 800b13c <_vfiprintf_r+0x18>
 800b138:	f7fc fd72 	bl	8007c20 <__sinit>
 800b13c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b13e:	07d9      	lsls	r1, r3, #31
 800b140:	d405      	bmi.n	800b14e <_vfiprintf_r+0x2a>
 800b142:	89ab      	ldrh	r3, [r5, #12]
 800b144:	059a      	lsls	r2, r3, #22
 800b146:	d402      	bmi.n	800b14e <_vfiprintf_r+0x2a>
 800b148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b14a:	f7fc feb4 	bl	8007eb6 <__retarget_lock_acquire_recursive>
 800b14e:	89ab      	ldrh	r3, [r5, #12]
 800b150:	071b      	lsls	r3, r3, #28
 800b152:	d501      	bpl.n	800b158 <_vfiprintf_r+0x34>
 800b154:	692b      	ldr	r3, [r5, #16]
 800b156:	b99b      	cbnz	r3, 800b180 <_vfiprintf_r+0x5c>
 800b158:	4629      	mov	r1, r5
 800b15a:	4630      	mov	r0, r6
 800b15c:	f000 f93a 	bl	800b3d4 <__swsetup_r>
 800b160:	b170      	cbz	r0, 800b180 <_vfiprintf_r+0x5c>
 800b162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b164:	07dc      	lsls	r4, r3, #31
 800b166:	d504      	bpl.n	800b172 <_vfiprintf_r+0x4e>
 800b168:	f04f 30ff 	mov.w	r0, #4294967295
 800b16c:	b01d      	add	sp, #116	; 0x74
 800b16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b172:	89ab      	ldrh	r3, [r5, #12]
 800b174:	0598      	lsls	r0, r3, #22
 800b176:	d4f7      	bmi.n	800b168 <_vfiprintf_r+0x44>
 800b178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b17a:	f7fc fe9d 	bl	8007eb8 <__retarget_lock_release_recursive>
 800b17e:	e7f3      	b.n	800b168 <_vfiprintf_r+0x44>
 800b180:	2300      	movs	r3, #0
 800b182:	9309      	str	r3, [sp, #36]	; 0x24
 800b184:	2320      	movs	r3, #32
 800b186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b18a:	2330      	movs	r3, #48	; 0x30
 800b18c:	f04f 0901 	mov.w	r9, #1
 800b190:	f8cd 800c 	str.w	r8, [sp, #12]
 800b194:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b344 <_vfiprintf_r+0x220>
 800b198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b19c:	4623      	mov	r3, r4
 800b19e:	469a      	mov	sl, r3
 800b1a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1a4:	b10a      	cbz	r2, 800b1aa <_vfiprintf_r+0x86>
 800b1a6:	2a25      	cmp	r2, #37	; 0x25
 800b1a8:	d1f9      	bne.n	800b19e <_vfiprintf_r+0x7a>
 800b1aa:	ebba 0b04 	subs.w	fp, sl, r4
 800b1ae:	d00b      	beq.n	800b1c8 <_vfiprintf_r+0xa4>
 800b1b0:	465b      	mov	r3, fp
 800b1b2:	4622      	mov	r2, r4
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	f7ff ffa2 	bl	800b100 <__sfputs_r>
 800b1bc:	3001      	adds	r0, #1
 800b1be:	f000 80a9 	beq.w	800b314 <_vfiprintf_r+0x1f0>
 800b1c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1c4:	445a      	add	r2, fp
 800b1c6:	9209      	str	r2, [sp, #36]	; 0x24
 800b1c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f000 80a1 	beq.w	800b314 <_vfiprintf_r+0x1f0>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1dc:	f10a 0a01 	add.w	sl, sl, #1
 800b1e0:	9304      	str	r3, [sp, #16]
 800b1e2:	9307      	str	r3, [sp, #28]
 800b1e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1e8:	931a      	str	r3, [sp, #104]	; 0x68
 800b1ea:	4654      	mov	r4, sl
 800b1ec:	2205      	movs	r2, #5
 800b1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1f2:	4854      	ldr	r0, [pc, #336]	; (800b344 <_vfiprintf_r+0x220>)
 800b1f4:	f7fc fe69 	bl	8007eca <memchr>
 800b1f8:	9a04      	ldr	r2, [sp, #16]
 800b1fa:	b9d8      	cbnz	r0, 800b234 <_vfiprintf_r+0x110>
 800b1fc:	06d1      	lsls	r1, r2, #27
 800b1fe:	bf44      	itt	mi
 800b200:	2320      	movmi	r3, #32
 800b202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b206:	0713      	lsls	r3, r2, #28
 800b208:	bf44      	itt	mi
 800b20a:	232b      	movmi	r3, #43	; 0x2b
 800b20c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b210:	f89a 3000 	ldrb.w	r3, [sl]
 800b214:	2b2a      	cmp	r3, #42	; 0x2a
 800b216:	d015      	beq.n	800b244 <_vfiprintf_r+0x120>
 800b218:	4654      	mov	r4, sl
 800b21a:	2000      	movs	r0, #0
 800b21c:	f04f 0c0a 	mov.w	ip, #10
 800b220:	9a07      	ldr	r2, [sp, #28]
 800b222:	4621      	mov	r1, r4
 800b224:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b228:	3b30      	subs	r3, #48	; 0x30
 800b22a:	2b09      	cmp	r3, #9
 800b22c:	d94d      	bls.n	800b2ca <_vfiprintf_r+0x1a6>
 800b22e:	b1b0      	cbz	r0, 800b25e <_vfiprintf_r+0x13a>
 800b230:	9207      	str	r2, [sp, #28]
 800b232:	e014      	b.n	800b25e <_vfiprintf_r+0x13a>
 800b234:	eba0 0308 	sub.w	r3, r0, r8
 800b238:	fa09 f303 	lsl.w	r3, r9, r3
 800b23c:	4313      	orrs	r3, r2
 800b23e:	46a2      	mov	sl, r4
 800b240:	9304      	str	r3, [sp, #16]
 800b242:	e7d2      	b.n	800b1ea <_vfiprintf_r+0xc6>
 800b244:	9b03      	ldr	r3, [sp, #12]
 800b246:	1d19      	adds	r1, r3, #4
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	9103      	str	r1, [sp, #12]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	bfbb      	ittet	lt
 800b250:	425b      	neglt	r3, r3
 800b252:	f042 0202 	orrlt.w	r2, r2, #2
 800b256:	9307      	strge	r3, [sp, #28]
 800b258:	9307      	strlt	r3, [sp, #28]
 800b25a:	bfb8      	it	lt
 800b25c:	9204      	strlt	r2, [sp, #16]
 800b25e:	7823      	ldrb	r3, [r4, #0]
 800b260:	2b2e      	cmp	r3, #46	; 0x2e
 800b262:	d10c      	bne.n	800b27e <_vfiprintf_r+0x15a>
 800b264:	7863      	ldrb	r3, [r4, #1]
 800b266:	2b2a      	cmp	r3, #42	; 0x2a
 800b268:	d134      	bne.n	800b2d4 <_vfiprintf_r+0x1b0>
 800b26a:	9b03      	ldr	r3, [sp, #12]
 800b26c:	3402      	adds	r4, #2
 800b26e:	1d1a      	adds	r2, r3, #4
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	9203      	str	r2, [sp, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	bfb8      	it	lt
 800b278:	f04f 33ff 	movlt.w	r3, #4294967295
 800b27c:	9305      	str	r3, [sp, #20]
 800b27e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b348 <_vfiprintf_r+0x224>
 800b282:	2203      	movs	r2, #3
 800b284:	4650      	mov	r0, sl
 800b286:	7821      	ldrb	r1, [r4, #0]
 800b288:	f7fc fe1f 	bl	8007eca <memchr>
 800b28c:	b138      	cbz	r0, 800b29e <_vfiprintf_r+0x17a>
 800b28e:	2240      	movs	r2, #64	; 0x40
 800b290:	9b04      	ldr	r3, [sp, #16]
 800b292:	eba0 000a 	sub.w	r0, r0, sl
 800b296:	4082      	lsls	r2, r0
 800b298:	4313      	orrs	r3, r2
 800b29a:	3401      	adds	r4, #1
 800b29c:	9304      	str	r3, [sp, #16]
 800b29e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2a2:	2206      	movs	r2, #6
 800b2a4:	4829      	ldr	r0, [pc, #164]	; (800b34c <_vfiprintf_r+0x228>)
 800b2a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2aa:	f7fc fe0e 	bl	8007eca <memchr>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d03f      	beq.n	800b332 <_vfiprintf_r+0x20e>
 800b2b2:	4b27      	ldr	r3, [pc, #156]	; (800b350 <_vfiprintf_r+0x22c>)
 800b2b4:	bb1b      	cbnz	r3, 800b2fe <_vfiprintf_r+0x1da>
 800b2b6:	9b03      	ldr	r3, [sp, #12]
 800b2b8:	3307      	adds	r3, #7
 800b2ba:	f023 0307 	bic.w	r3, r3, #7
 800b2be:	3308      	adds	r3, #8
 800b2c0:	9303      	str	r3, [sp, #12]
 800b2c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c4:	443b      	add	r3, r7
 800b2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2c8:	e768      	b.n	800b19c <_vfiprintf_r+0x78>
 800b2ca:	460c      	mov	r4, r1
 800b2cc:	2001      	movs	r0, #1
 800b2ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2d2:	e7a6      	b.n	800b222 <_vfiprintf_r+0xfe>
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	f04f 0c0a 	mov.w	ip, #10
 800b2da:	4619      	mov	r1, r3
 800b2dc:	3401      	adds	r4, #1
 800b2de:	9305      	str	r3, [sp, #20]
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2e6:	3a30      	subs	r2, #48	; 0x30
 800b2e8:	2a09      	cmp	r2, #9
 800b2ea:	d903      	bls.n	800b2f4 <_vfiprintf_r+0x1d0>
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d0c6      	beq.n	800b27e <_vfiprintf_r+0x15a>
 800b2f0:	9105      	str	r1, [sp, #20]
 800b2f2:	e7c4      	b.n	800b27e <_vfiprintf_r+0x15a>
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2fc:	e7f0      	b.n	800b2e0 <_vfiprintf_r+0x1bc>
 800b2fe:	ab03      	add	r3, sp, #12
 800b300:	9300      	str	r3, [sp, #0]
 800b302:	462a      	mov	r2, r5
 800b304:	4630      	mov	r0, r6
 800b306:	4b13      	ldr	r3, [pc, #76]	; (800b354 <_vfiprintf_r+0x230>)
 800b308:	a904      	add	r1, sp, #16
 800b30a:	f7fb fe2d 	bl	8006f68 <_printf_float>
 800b30e:	4607      	mov	r7, r0
 800b310:	1c78      	adds	r0, r7, #1
 800b312:	d1d6      	bne.n	800b2c2 <_vfiprintf_r+0x19e>
 800b314:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b316:	07d9      	lsls	r1, r3, #31
 800b318:	d405      	bmi.n	800b326 <_vfiprintf_r+0x202>
 800b31a:	89ab      	ldrh	r3, [r5, #12]
 800b31c:	059a      	lsls	r2, r3, #22
 800b31e:	d402      	bmi.n	800b326 <_vfiprintf_r+0x202>
 800b320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b322:	f7fc fdc9 	bl	8007eb8 <__retarget_lock_release_recursive>
 800b326:	89ab      	ldrh	r3, [r5, #12]
 800b328:	065b      	lsls	r3, r3, #25
 800b32a:	f53f af1d 	bmi.w	800b168 <_vfiprintf_r+0x44>
 800b32e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b330:	e71c      	b.n	800b16c <_vfiprintf_r+0x48>
 800b332:	ab03      	add	r3, sp, #12
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	462a      	mov	r2, r5
 800b338:	4630      	mov	r0, r6
 800b33a:	4b06      	ldr	r3, [pc, #24]	; (800b354 <_vfiprintf_r+0x230>)
 800b33c:	a904      	add	r1, sp, #16
 800b33e:	f7fc f8b3 	bl	80074a8 <_printf_i>
 800b342:	e7e4      	b.n	800b30e <_vfiprintf_r+0x1ea>
 800b344:	0800c1d1 	.word	0x0800c1d1
 800b348:	0800c1d7 	.word	0x0800c1d7
 800b34c:	0800c1db 	.word	0x0800c1db
 800b350:	08006f69 	.word	0x08006f69
 800b354:	0800b101 	.word	0x0800b101

0800b358 <__swbuf_r>:
 800b358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35a:	460e      	mov	r6, r1
 800b35c:	4614      	mov	r4, r2
 800b35e:	4605      	mov	r5, r0
 800b360:	b118      	cbz	r0, 800b36a <__swbuf_r+0x12>
 800b362:	6a03      	ldr	r3, [r0, #32]
 800b364:	b90b      	cbnz	r3, 800b36a <__swbuf_r+0x12>
 800b366:	f7fc fc5b 	bl	8007c20 <__sinit>
 800b36a:	69a3      	ldr	r3, [r4, #24]
 800b36c:	60a3      	str	r3, [r4, #8]
 800b36e:	89a3      	ldrh	r3, [r4, #12]
 800b370:	071a      	lsls	r2, r3, #28
 800b372:	d525      	bpl.n	800b3c0 <__swbuf_r+0x68>
 800b374:	6923      	ldr	r3, [r4, #16]
 800b376:	b31b      	cbz	r3, 800b3c0 <__swbuf_r+0x68>
 800b378:	6823      	ldr	r3, [r4, #0]
 800b37a:	6922      	ldr	r2, [r4, #16]
 800b37c:	b2f6      	uxtb	r6, r6
 800b37e:	1a98      	subs	r0, r3, r2
 800b380:	6963      	ldr	r3, [r4, #20]
 800b382:	4637      	mov	r7, r6
 800b384:	4283      	cmp	r3, r0
 800b386:	dc04      	bgt.n	800b392 <__swbuf_r+0x3a>
 800b388:	4621      	mov	r1, r4
 800b38a:	4628      	mov	r0, r5
 800b38c:	f7ff fa30 	bl	800a7f0 <_fflush_r>
 800b390:	b9e0      	cbnz	r0, 800b3cc <__swbuf_r+0x74>
 800b392:	68a3      	ldr	r3, [r4, #8]
 800b394:	3b01      	subs	r3, #1
 800b396:	60a3      	str	r3, [r4, #8]
 800b398:	6823      	ldr	r3, [r4, #0]
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	6022      	str	r2, [r4, #0]
 800b39e:	701e      	strb	r6, [r3, #0]
 800b3a0:	6962      	ldr	r2, [r4, #20]
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d004      	beq.n	800b3b2 <__swbuf_r+0x5a>
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	07db      	lsls	r3, r3, #31
 800b3ac:	d506      	bpl.n	800b3bc <__swbuf_r+0x64>
 800b3ae:	2e0a      	cmp	r6, #10
 800b3b0:	d104      	bne.n	800b3bc <__swbuf_r+0x64>
 800b3b2:	4621      	mov	r1, r4
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	f7ff fa1b 	bl	800a7f0 <_fflush_r>
 800b3ba:	b938      	cbnz	r0, 800b3cc <__swbuf_r+0x74>
 800b3bc:	4638      	mov	r0, r7
 800b3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3c0:	4621      	mov	r1, r4
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	f000 f806 	bl	800b3d4 <__swsetup_r>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	d0d5      	beq.n	800b378 <__swbuf_r+0x20>
 800b3cc:	f04f 37ff 	mov.w	r7, #4294967295
 800b3d0:	e7f4      	b.n	800b3bc <__swbuf_r+0x64>
	...

0800b3d4 <__swsetup_r>:
 800b3d4:	b538      	push	{r3, r4, r5, lr}
 800b3d6:	4b2a      	ldr	r3, [pc, #168]	; (800b480 <__swsetup_r+0xac>)
 800b3d8:	4605      	mov	r5, r0
 800b3da:	6818      	ldr	r0, [r3, #0]
 800b3dc:	460c      	mov	r4, r1
 800b3de:	b118      	cbz	r0, 800b3e8 <__swsetup_r+0x14>
 800b3e0:	6a03      	ldr	r3, [r0, #32]
 800b3e2:	b90b      	cbnz	r3, 800b3e8 <__swsetup_r+0x14>
 800b3e4:	f7fc fc1c 	bl	8007c20 <__sinit>
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3ee:	0718      	lsls	r0, r3, #28
 800b3f0:	d422      	bmi.n	800b438 <__swsetup_r+0x64>
 800b3f2:	06d9      	lsls	r1, r3, #27
 800b3f4:	d407      	bmi.n	800b406 <__swsetup_r+0x32>
 800b3f6:	2309      	movs	r3, #9
 800b3f8:	602b      	str	r3, [r5, #0]
 800b3fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b402:	81a3      	strh	r3, [r4, #12]
 800b404:	e034      	b.n	800b470 <__swsetup_r+0x9c>
 800b406:	0758      	lsls	r0, r3, #29
 800b408:	d512      	bpl.n	800b430 <__swsetup_r+0x5c>
 800b40a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b40c:	b141      	cbz	r1, 800b420 <__swsetup_r+0x4c>
 800b40e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b412:	4299      	cmp	r1, r3
 800b414:	d002      	beq.n	800b41c <__swsetup_r+0x48>
 800b416:	4628      	mov	r0, r5
 800b418:	f7fd fbda 	bl	8008bd0 <_free_r>
 800b41c:	2300      	movs	r3, #0
 800b41e:	6363      	str	r3, [r4, #52]	; 0x34
 800b420:	89a3      	ldrh	r3, [r4, #12]
 800b422:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b426:	81a3      	strh	r3, [r4, #12]
 800b428:	2300      	movs	r3, #0
 800b42a:	6063      	str	r3, [r4, #4]
 800b42c:	6923      	ldr	r3, [r4, #16]
 800b42e:	6023      	str	r3, [r4, #0]
 800b430:	89a3      	ldrh	r3, [r4, #12]
 800b432:	f043 0308 	orr.w	r3, r3, #8
 800b436:	81a3      	strh	r3, [r4, #12]
 800b438:	6923      	ldr	r3, [r4, #16]
 800b43a:	b94b      	cbnz	r3, 800b450 <__swsetup_r+0x7c>
 800b43c:	89a3      	ldrh	r3, [r4, #12]
 800b43e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b446:	d003      	beq.n	800b450 <__swsetup_r+0x7c>
 800b448:	4621      	mov	r1, r4
 800b44a:	4628      	mov	r0, r5
 800b44c:	f000 f883 	bl	800b556 <__smakebuf_r>
 800b450:	89a0      	ldrh	r0, [r4, #12]
 800b452:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b456:	f010 0301 	ands.w	r3, r0, #1
 800b45a:	d00a      	beq.n	800b472 <__swsetup_r+0x9e>
 800b45c:	2300      	movs	r3, #0
 800b45e:	60a3      	str	r3, [r4, #8]
 800b460:	6963      	ldr	r3, [r4, #20]
 800b462:	425b      	negs	r3, r3
 800b464:	61a3      	str	r3, [r4, #24]
 800b466:	6923      	ldr	r3, [r4, #16]
 800b468:	b943      	cbnz	r3, 800b47c <__swsetup_r+0xa8>
 800b46a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b46e:	d1c4      	bne.n	800b3fa <__swsetup_r+0x26>
 800b470:	bd38      	pop	{r3, r4, r5, pc}
 800b472:	0781      	lsls	r1, r0, #30
 800b474:	bf58      	it	pl
 800b476:	6963      	ldrpl	r3, [r4, #20]
 800b478:	60a3      	str	r3, [r4, #8]
 800b47a:	e7f4      	b.n	800b466 <__swsetup_r+0x92>
 800b47c:	2000      	movs	r0, #0
 800b47e:	e7f7      	b.n	800b470 <__swsetup_r+0x9c>
 800b480:	20000074 	.word	0x20000074

0800b484 <_raise_r>:
 800b484:	291f      	cmp	r1, #31
 800b486:	b538      	push	{r3, r4, r5, lr}
 800b488:	4604      	mov	r4, r0
 800b48a:	460d      	mov	r5, r1
 800b48c:	d904      	bls.n	800b498 <_raise_r+0x14>
 800b48e:	2316      	movs	r3, #22
 800b490:	6003      	str	r3, [r0, #0]
 800b492:	f04f 30ff 	mov.w	r0, #4294967295
 800b496:	bd38      	pop	{r3, r4, r5, pc}
 800b498:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b49a:	b112      	cbz	r2, 800b4a2 <_raise_r+0x1e>
 800b49c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4a0:	b94b      	cbnz	r3, 800b4b6 <_raise_r+0x32>
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f000 f830 	bl	800b508 <_getpid_r>
 800b4a8:	462a      	mov	r2, r5
 800b4aa:	4601      	mov	r1, r0
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4b2:	f000 b817 	b.w	800b4e4 <_kill_r>
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d00a      	beq.n	800b4d0 <_raise_r+0x4c>
 800b4ba:	1c59      	adds	r1, r3, #1
 800b4bc:	d103      	bne.n	800b4c6 <_raise_r+0x42>
 800b4be:	2316      	movs	r3, #22
 800b4c0:	6003      	str	r3, [r0, #0]
 800b4c2:	2001      	movs	r0, #1
 800b4c4:	e7e7      	b.n	800b496 <_raise_r+0x12>
 800b4c6:	2400      	movs	r4, #0
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b4ce:	4798      	blx	r3
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	e7e0      	b.n	800b496 <_raise_r+0x12>

0800b4d4 <raise>:
 800b4d4:	4b02      	ldr	r3, [pc, #8]	; (800b4e0 <raise+0xc>)
 800b4d6:	4601      	mov	r1, r0
 800b4d8:	6818      	ldr	r0, [r3, #0]
 800b4da:	f7ff bfd3 	b.w	800b484 <_raise_r>
 800b4de:	bf00      	nop
 800b4e0:	20000074 	.word	0x20000074

0800b4e4 <_kill_r>:
 800b4e4:	b538      	push	{r3, r4, r5, lr}
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	4d06      	ldr	r5, [pc, #24]	; (800b504 <_kill_r+0x20>)
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	4608      	mov	r0, r1
 800b4ee:	4611      	mov	r1, r2
 800b4f0:	602b      	str	r3, [r5, #0]
 800b4f2:	f7f7 faba 	bl	8002a6a <_kill>
 800b4f6:	1c43      	adds	r3, r0, #1
 800b4f8:	d102      	bne.n	800b500 <_kill_r+0x1c>
 800b4fa:	682b      	ldr	r3, [r5, #0]
 800b4fc:	b103      	cbz	r3, 800b500 <_kill_r+0x1c>
 800b4fe:	6023      	str	r3, [r4, #0]
 800b500:	bd38      	pop	{r3, r4, r5, pc}
 800b502:	bf00      	nop
 800b504:	20000a38 	.word	0x20000a38

0800b508 <_getpid_r>:
 800b508:	f7f7 baa8 	b.w	8002a5c <_getpid>

0800b50c <__swhatbuf_r>:
 800b50c:	b570      	push	{r4, r5, r6, lr}
 800b50e:	460c      	mov	r4, r1
 800b510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b514:	4615      	mov	r5, r2
 800b516:	2900      	cmp	r1, #0
 800b518:	461e      	mov	r6, r3
 800b51a:	b096      	sub	sp, #88	; 0x58
 800b51c:	da0c      	bge.n	800b538 <__swhatbuf_r+0x2c>
 800b51e:	89a3      	ldrh	r3, [r4, #12]
 800b520:	2100      	movs	r1, #0
 800b522:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b526:	bf0c      	ite	eq
 800b528:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b52c:	2340      	movne	r3, #64	; 0x40
 800b52e:	2000      	movs	r0, #0
 800b530:	6031      	str	r1, [r6, #0]
 800b532:	602b      	str	r3, [r5, #0]
 800b534:	b016      	add	sp, #88	; 0x58
 800b536:	bd70      	pop	{r4, r5, r6, pc}
 800b538:	466a      	mov	r2, sp
 800b53a:	f000 f849 	bl	800b5d0 <_fstat_r>
 800b53e:	2800      	cmp	r0, #0
 800b540:	dbed      	blt.n	800b51e <__swhatbuf_r+0x12>
 800b542:	9901      	ldr	r1, [sp, #4]
 800b544:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b548:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b54c:	4259      	negs	r1, r3
 800b54e:	4159      	adcs	r1, r3
 800b550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b554:	e7eb      	b.n	800b52e <__swhatbuf_r+0x22>

0800b556 <__smakebuf_r>:
 800b556:	898b      	ldrh	r3, [r1, #12]
 800b558:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b55a:	079d      	lsls	r5, r3, #30
 800b55c:	4606      	mov	r6, r0
 800b55e:	460c      	mov	r4, r1
 800b560:	d507      	bpl.n	800b572 <__smakebuf_r+0x1c>
 800b562:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b566:	6023      	str	r3, [r4, #0]
 800b568:	6123      	str	r3, [r4, #16]
 800b56a:	2301      	movs	r3, #1
 800b56c:	6163      	str	r3, [r4, #20]
 800b56e:	b002      	add	sp, #8
 800b570:	bd70      	pop	{r4, r5, r6, pc}
 800b572:	466a      	mov	r2, sp
 800b574:	ab01      	add	r3, sp, #4
 800b576:	f7ff ffc9 	bl	800b50c <__swhatbuf_r>
 800b57a:	9900      	ldr	r1, [sp, #0]
 800b57c:	4605      	mov	r5, r0
 800b57e:	4630      	mov	r0, r6
 800b580:	f7fd fb96 	bl	8008cb0 <_malloc_r>
 800b584:	b948      	cbnz	r0, 800b59a <__smakebuf_r+0x44>
 800b586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b58a:	059a      	lsls	r2, r3, #22
 800b58c:	d4ef      	bmi.n	800b56e <__smakebuf_r+0x18>
 800b58e:	f023 0303 	bic.w	r3, r3, #3
 800b592:	f043 0302 	orr.w	r3, r3, #2
 800b596:	81a3      	strh	r3, [r4, #12]
 800b598:	e7e3      	b.n	800b562 <__smakebuf_r+0xc>
 800b59a:	89a3      	ldrh	r3, [r4, #12]
 800b59c:	6020      	str	r0, [r4, #0]
 800b59e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5a2:	81a3      	strh	r3, [r4, #12]
 800b5a4:	9b00      	ldr	r3, [sp, #0]
 800b5a6:	6120      	str	r0, [r4, #16]
 800b5a8:	6163      	str	r3, [r4, #20]
 800b5aa:	9b01      	ldr	r3, [sp, #4]
 800b5ac:	b15b      	cbz	r3, 800b5c6 <__smakebuf_r+0x70>
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5b4:	f000 f81e 	bl	800b5f4 <_isatty_r>
 800b5b8:	b128      	cbz	r0, 800b5c6 <__smakebuf_r+0x70>
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	f023 0303 	bic.w	r3, r3, #3
 800b5c0:	f043 0301 	orr.w	r3, r3, #1
 800b5c4:	81a3      	strh	r3, [r4, #12]
 800b5c6:	89a3      	ldrh	r3, [r4, #12]
 800b5c8:	431d      	orrs	r5, r3
 800b5ca:	81a5      	strh	r5, [r4, #12]
 800b5cc:	e7cf      	b.n	800b56e <__smakebuf_r+0x18>
	...

0800b5d0 <_fstat_r>:
 800b5d0:	b538      	push	{r3, r4, r5, lr}
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	4d06      	ldr	r5, [pc, #24]	; (800b5f0 <_fstat_r+0x20>)
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	4608      	mov	r0, r1
 800b5da:	4611      	mov	r1, r2
 800b5dc:	602b      	str	r3, [r5, #0]
 800b5de:	f7f7 faa2 	bl	8002b26 <_fstat>
 800b5e2:	1c43      	adds	r3, r0, #1
 800b5e4:	d102      	bne.n	800b5ec <_fstat_r+0x1c>
 800b5e6:	682b      	ldr	r3, [r5, #0]
 800b5e8:	b103      	cbz	r3, 800b5ec <_fstat_r+0x1c>
 800b5ea:	6023      	str	r3, [r4, #0]
 800b5ec:	bd38      	pop	{r3, r4, r5, pc}
 800b5ee:	bf00      	nop
 800b5f0:	20000a38 	.word	0x20000a38

0800b5f4 <_isatty_r>:
 800b5f4:	b538      	push	{r3, r4, r5, lr}
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	4d05      	ldr	r5, [pc, #20]	; (800b610 <_isatty_r+0x1c>)
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	4608      	mov	r0, r1
 800b5fe:	602b      	str	r3, [r5, #0]
 800b600:	f7f7 faa0 	bl	8002b44 <_isatty>
 800b604:	1c43      	adds	r3, r0, #1
 800b606:	d102      	bne.n	800b60e <_isatty_r+0x1a>
 800b608:	682b      	ldr	r3, [r5, #0]
 800b60a:	b103      	cbz	r3, 800b60e <_isatty_r+0x1a>
 800b60c:	6023      	str	r3, [r4, #0]
 800b60e:	bd38      	pop	{r3, r4, r5, pc}
 800b610:	20000a38 	.word	0x20000a38

0800b614 <_init>:
 800b614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b616:	bf00      	nop
 800b618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b61a:	bc08      	pop	{r3}
 800b61c:	469e      	mov	lr, r3
 800b61e:	4770      	bx	lr

0800b620 <_fini>:
 800b620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b622:	bf00      	nop
 800b624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b626:	bc08      	pop	{r3}
 800b628:	469e      	mov	lr, r3
 800b62a:	4770      	bx	lr
